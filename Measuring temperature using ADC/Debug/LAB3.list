
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004164  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004360  08004360  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004360  08004360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08004374  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004374  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a167  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ee  00000000  00000000  0002a1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0e5  00000000  00000000  0002ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2ec  00000000  00000000  00056f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e2f  00000000  00000000  000611f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002690  00000000  00000000  00169070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004308 	.word	0x08004308

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004308 	.word	0x08004308

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f001 fbdc 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f003 ff37 	bl	8004090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fbe9 	bl	8001a2e <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f001 fbb3 	bl	80019da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	609a      	str	r2, [r3, #8]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	609a      	str	r2, [r3, #8]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800034c:	b480      	push	{r7}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3360      	adds	r3, #96	; 0x60
 800035e:	461a      	mov	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	4413      	add	r3, r2
 8000366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LL_ADC_SetOffset+0x44>)
 800036e:	4013      	ands	r3, r2
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	430a      	orrs	r2, r1
 800037a:	4313      	orrs	r3, r2
 800037c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000384:	bf00      	nop
 8000386:	371c      	adds	r7, #28
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	03fff000 	.word	0x03fff000

08000394 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3360      	adds	r3, #96	; 0x60
 80003a2:	461a      	mov	r2, r3
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3360      	adds	r3, #96	; 0x60
 80003d0:	461a      	mov	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ea:	bf00      	nop
 80003ec:	371c      	adds	r7, #28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	431a      	orrs	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	615a      	str	r2, [r3, #20]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000430:	2301      	movs	r3, #1
 8000432:	e000      	b.n	8000436 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000442:	b480      	push	{r7}
 8000444:	b087      	sub	sp, #28
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3330      	adds	r3, #48	; 0x30
 8000452:	461a      	mov	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	f003 030c 	and.w	r3, r3, #12
 800045e:	4413      	add	r3, r2
 8000460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f003 031f 	and.w	r3, r3, #31
 800046c:	211f      	movs	r1, #31
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43db      	mvns	r3, r3
 8000474:	401a      	ands	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	0e9b      	lsrs	r3, r3, #26
 800047a:	f003 011f 	and.w	r1, r3, #31
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f003 031f 	and.w	r3, r3, #31
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	431a      	orrs	r2, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800048e:	bf00      	nop
 8000490:	371c      	adds	r7, #28
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800049a:	b480      	push	{r7}
 800049c:	b087      	sub	sp, #28
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3314      	adds	r3, #20
 80004aa:	461a      	mov	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	0e5b      	lsrs	r3, r3, #25
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	4413      	add	r3, r2
 80004b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	0d1b      	lsrs	r3, r3, #20
 80004c2:	f003 031f 	and.w	r3, r3, #31
 80004c6:	2107      	movs	r1, #7
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	0d1b      	lsrs	r3, r3, #20
 80004d4:	f003 031f 	and.w	r3, r3, #31
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	431a      	orrs	r2, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004e4:	bf00      	nop
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f003 0318 	and.w	r3, r3, #24
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000514:	40d9      	lsrs	r1, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	400b      	ands	r3, r1
 800051a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800051e:	431a      	orrs	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	0007ffff 	.word	0x0007ffff

08000538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6093      	str	r3, [r2, #8]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800056c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000570:	d101      	bne.n	8000576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005c0:	d101      	bne.n	80005c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005e8:	f043 0201 	orr.w	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 0202 	orr.w	r2, r3, #2
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b01      	cmp	r3, #1
 8000636:	d101      	bne.n	800063c <LL_ADC_IsEnabled+0x18>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <LL_ADC_IsEnabled+0x1a>
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	2b02      	cmp	r3, #2
 800065c:	d101      	bne.n	8000662 <LL_ADC_IsDisableOngoing+0x18>
 800065e:	2301      	movs	r3, #1
 8000660:	e000      	b.n	8000664 <LL_ADC_IsDisableOngoing+0x1a>
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000684:	f043 0204 	orr.w	r2, r3, #4
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006ac:	f043 0210 	orr.w	r2, r3, #16
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006fa:	f043 0220 	orr.w	r2, r3, #32
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b08      	cmp	r3, #8
 8000720:	d101      	bne.n	8000726 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000722:	2301      	movs	r3, #1
 8000724:	e000      	b.n	8000728 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e12f      	b.n	80009ae <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000758:	2b00      	cmp	r3, #0
 800075a:	d109      	bne.n	8000770 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f003 fcbb 	bl	80040d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fef1 	bl	800055c <LL_ADC_IsDeepPowerDownEnabled>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fed7 	bl	8000538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff0c 	bl	80005ac <LL_ADC_IsInternalRegulatorEnabled>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d115      	bne.n	80007c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fef0 	bl	8000584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007a4:	4b84      	ldr	r3, [pc, #528]	; (80009b8 <HAL_ADC_Init+0x284>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	099b      	lsrs	r3, r3, #6
 80007aa:	4a84      	ldr	r2, [pc, #528]	; (80009bc <HAL_ADC_Init+0x288>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	099b      	lsrs	r3, r3, #6
 80007b2:	3301      	adds	r3, #1
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007b8:	e002      	b.n	80007c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3b01      	subs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f9      	bne.n	80007ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff feee 	bl	80005ac <LL_ADC_IsInternalRegulatorEnabled>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10d      	bne.n	80007f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f043 0210 	orr.w	r2, r3, #16
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007e6:	f043 0201 	orr.w	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff62 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80007fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	2b00      	cmp	r3, #0
 8000808:	f040 80c8 	bne.w	800099c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 80c4 	bne.w	800099c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000818:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800081c:	f043 0202 	orr.w	r2, r3, #2
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fefb 	bl	8000624 <LL_ADC_IsEnabled>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10b      	bne.n	800084c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000834:	4862      	ldr	r0, [pc, #392]	; (80009c0 <HAL_ADC_Init+0x28c>)
 8000836:	f7ff fef5 	bl	8000624 <LL_ADC_IsEnabled>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4619      	mov	r1, r3
 8000846:	485f      	ldr	r0, [pc, #380]	; (80009c4 <HAL_ADC_Init+0x290>)
 8000848:	f7ff fd4c 	bl	80002e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7e5b      	ldrb	r3, [r3, #25]
 8000850:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000856:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800085c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000862:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800086a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d106      	bne.n	8000888 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	3b01      	subs	r3, #1
 8000880:	045b      	lsls	r3, r3, #17
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	2b00      	cmp	r3, #0
 800088e:	d009      	beq.n	80008a4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000894:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <HAL_ADC_Init+0x294>)
 80008ac:	4013      	ands	r3, r2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	430b      	orrs	r3, r1
 80008b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff feff 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80008c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff20 	bl	800070e <LL_ADC_INJ_IsConversionOngoing>
 80008ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d140      	bne.n	8000958 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d13d      	bne.n	8000958 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7e1b      	ldrb	r3, [r3, #24]
 80008e4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008e6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008ee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008f0:	4313      	orrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008fe:	f023 0306 	bic.w	r3, r3, #6
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	69b9      	ldr	r1, [r7, #24]
 8000908:	430b      	orrs	r3, r1
 800090a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000912:	2b01      	cmp	r3, #1
 8000914:	d118      	bne.n	8000948 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000920:	f023 0304 	bic.w	r3, r3, #4
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800092c:	4311      	orrs	r1, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000932:	4311      	orrs	r1, r2
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000938:	430a      	orrs	r2, r1
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f042 0201 	orr.w	r2, r2, #1
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	e007      	b.n	8000958 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	691a      	ldr	r2, [r3, #16]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f022 0201 	bic.w	r2, r2, #1
 8000956:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d10c      	bne.n	800097a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f023 010f 	bic.w	r1, r3, #15
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	430a      	orrs	r2, r1
 8000976:	631a      	str	r2, [r3, #48]	; 0x30
 8000978:	e007      	b.n	800098a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 020f 	bic.w	r2, r2, #15
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
 800099a:	e007      	b.n	80009ac <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	f043 0210 	orr.w	r2, r3, #16
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	053e2d63 	.word	0x053e2d63
 80009c0:	50040000 	.word	0x50040000
 80009c4:	50040300 	.word	0x50040300
 80009c8:	fff0c007 	.word	0xfff0c007

080009cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe6f 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d167      	bne.n	8000ab8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d101      	bne.n	80009f6 <HAL_ADC_Start_DMA+0x2a>
 80009f2:	2302      	movs	r3, #2
 80009f4:	e063      	b.n	8000abe <HAL_ADC_Start_DMA+0xf2>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2201      	movs	r2, #1
 80009fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 fd96 	bl	8001530 <ADC_Enable>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d14f      	bne.n	8000aae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d006      	beq.n	8000a3c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a32:	f023 0206 	bic.w	r2, r3, #6
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a3a:	e002      	b.n	8000a42 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <HAL_ADC_Start_DMA+0xfc>)
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_ADC_Start_DMA+0x100>)
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a56:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <HAL_ADC_Start_DMA+0x104>)
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	221c      	movs	r2, #28
 8000a60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f042 0210 	orr.w	r2, r2, #16
 8000a78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3340      	adds	r3, #64	; 0x40
 8000a94:	4619      	mov	r1, r3
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f001 f87d 	bl	8001b98 <HAL_DMA_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fde2 	bl	8000670 <LL_ADC_REG_StartConversion>
 8000aac:	e006      	b.n	8000abc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000ab6:	e001      	b.n	8000abc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	080016fb 	.word	0x080016fb
 8000acc:	080017d3 	.word	0x080017d3
 8000ad0:	080017ef 	.word	0x080017ef

08000ad4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_ADC_Stop_DMA+0x16>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e051      	b.n	8000b8e <HAL_ADC_Stop_DMA+0xba>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000af2:	2103      	movs	r1, #3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fc5f 	bl	80013b8 <ADC_ConversionStop>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d13f      	bne.n	8000b84 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0201 	bic.w	r2, r2, #1
 8000b12:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d10f      	bne.n	8000b42 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f8b1 	bl	8001c8e <HAL_DMA_Abort>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d005      	beq.n	8000b42 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0210 	bic.w	r2, r2, #16
 8000b50:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fd6f 	bl	800163c <ADC_Disable>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e002      	b.n	8000b6a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 fd69 	bl	800163c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0b6      	sub	sp, #216	; 0xd8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x22>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e3d5      	b.n	800138e <HAL_ADC_ConfigChannel+0x7ce>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd66 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 83ba 	bne.w	8001370 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d824      	bhi.n	8000c4e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d81b      	bhi.n	8000c46 <HAL_ADC_ConfigChannel+0x86>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_ADC_ConfigChannel+0x54>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000c35 	.word	0x08000c35
 8000c20:	08000c3d 	.word	0x08000c3d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	220c      	movs	r2, #12
 8000c28:	605a      	str	r2, [r3, #4]
          break;
 8000c2a:	e011      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2212      	movs	r2, #18
 8000c30:	605a      	str	r2, [r3, #4]
          break;
 8000c32:	e00d      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2218      	movs	r2, #24
 8000c38:	605a      	str	r2, [r3, #4]
          break;
 8000c3a:	e009      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	605a      	str	r2, [r3, #4]
          break;
 8000c44:	e004      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2206      	movs	r2, #6
 8000c4a:	605a      	str	r2, [r3, #4]
          break;
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000c4e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f7ff fbf0 	bl	8000442 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fd2a 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000c6c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd4a 	bl	800070e <LL_ADC_INJ_IsConversionOngoing>
 8000c7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 81c1 	bne.w	800100a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f040 81bc 	bne.w	800100a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9a:	d10f      	bne.n	8000cbc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f7ff fbf7 	bl	800049a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb9e 	bl	80003f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8000cba:	e00e      	b.n	8000cda <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f7ff fbe6 	bl	800049a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fb8e 	bl	80003f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00a      	beq.n	8000d12 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6919      	ldr	r1, [r3, #16]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d0c:	f7ff fb1e 	bl	800034c <LL_ADC_SetOffset>
 8000d10:	e17b      	b.n	800100a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb3b 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10a      	bne.n	8000d3e <HAL_ADC_ConfigChannel+0x17e>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb30 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	0e9b      	lsrs	r3, r3, #26
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	e01e      	b.n	8000d7c <HAL_ADC_ConfigChannel+0x1bc>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fb25 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d54:	fa93 f3a3 	rbit	r3, r3
 8000d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	e004      	b.n	8000d7a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d74:	fab3 f383 	clz	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <HAL_ADC_ConfigChannel+0x1d4>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0e9b      	lsrs	r3, r3, #26
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	e018      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x206>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000db8:	2320      	movs	r3, #32
 8000dba:	e004      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d106      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff faf4 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fad8 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10a      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x244>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff facd 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	0e9b      	lsrs	r3, r3, #26
 8000dfe:	f003 021f 	and.w	r2, r3, #31
 8000e02:	e01e      	b.n	8000e42 <HAL_ADC_ConfigChannel+0x282>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fac2 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e1a:	fa93 f3a3 	rbit	r3, r3
 8000e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000e32:	2320      	movs	r3, #32
 8000e34:	e004      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x29a>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0e9b      	lsrs	r3, r3, #26
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	e018      	b.n	8000e8c <HAL_ADC_ConfigChannel+0x2cc>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	e004      	b.n	8000e8c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d106      	bne.n	8000e9e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2200      	movs	r2, #0
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fa91 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa75 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10a      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x30a>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fa6a 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	0e9b      	lsrs	r3, r3, #26
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	e01e      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x348>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa5f 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	e004      	b.n	8000f06 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f00:	fab3 f383 	clz	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x360>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0e9b      	lsrs	r3, r3, #26
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	e016      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x38e>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000f32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000f40:	2320      	movs	r3, #32
 8000f42:	e004      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d106      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa30 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2103      	movs	r1, #3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa14 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10a      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x3cc>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa09 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	0e9b      	lsrs	r3, r3, #26
 8000f86:	f003 021f 	and.w	r2, r3, #31
 8000f8a:	e017      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x3fc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2103      	movs	r1, #3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f9fe 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fa6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	e003      	b.n	8000fba <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8000fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_ADC_ConfigChannel+0x414>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0e9b      	lsrs	r3, r3, #26
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	e011      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x438>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8000fec:	2320      	movs	r3, #32
 8000fee:	e003      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8000ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ff2:	fab3 f383 	clz	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d106      	bne.n	800100a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	2103      	movs	r1, #3
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f9db 	bl	80003c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb08 	bl	8000624 <LL_ADC_IsEnabled>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8140 	bne.w	800129c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	f7ff fa61 	bl	80004f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4a8f      	ldr	r2, [pc, #572]	; (8001270 <HAL_ADC_ConfigChannel+0x6b0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	f040 8131 	bne.w	800129c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10b      	bne.n	8001062 <HAL_ADC_ConfigChannel+0x4a2>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	0e9b      	lsrs	r3, r3, #26
 8001050:	3301      	adds	r3, #1
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b09      	cmp	r3, #9
 8001058:	bf94      	ite	ls
 800105a:	2301      	movls	r3, #1
 800105c:	2300      	movhi	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	e019      	b.n	8001096 <HAL_ADC_ConfigChannel+0x4d6>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001072:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800107a:	2320      	movs	r3, #32
 800107c:	e003      	b.n	8001086 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800107e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	2b09      	cmp	r3, #9
 800108e:	bf94      	ite	ls
 8001090:	2301      	movls	r3, #1
 8001092:	2300      	movhi	r3, #0
 8001094:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001096:	2b00      	cmp	r3, #0
 8001098:	d079      	beq.n	800118e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d107      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x4f6>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0e9b      	lsrs	r3, r3, #26
 80010ac:	3301      	adds	r3, #1
 80010ae:	069b      	lsls	r3, r3, #26
 80010b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010b4:	e015      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x522>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80010c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80010ce:	2320      	movs	r3, #32
 80010d0:	e003      	b.n	80010da <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80010d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	069b      	lsls	r3, r3, #26
 80010de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x542>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0e9b      	lsrs	r3, r3, #26
 80010f4:	3301      	adds	r3, #1
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	e017      	b.n	8001132 <HAL_ADC_ConfigChannel+0x572>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800111a:	2320      	movs	r3, #32
 800111c:	e003      	b.n	8001126 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800111e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	ea42 0103 	orr.w	r1, r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x598>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0e9b      	lsrs	r3, r3, #26
 8001148:	3301      	adds	r3, #1
 800114a:	f003 021f 	and.w	r2, r3, #31
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	051b      	lsls	r3, r3, #20
 8001156:	e018      	b.n	800118a <HAL_ADC_ConfigChannel+0x5ca>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800116a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001170:	2320      	movs	r3, #32
 8001172:	e003      	b.n	800117c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3301      	adds	r3, #1
 800117e:	f003 021f 	and.w	r2, r3, #31
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800118a:	430b      	orrs	r3, r1
 800118c:	e081      	b.n	8001292 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001196:	2b00      	cmp	r3, #0
 8001198:	d107      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x5ea>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0e9b      	lsrs	r3, r3, #26
 80011a0:	3301      	adds	r3, #1
 80011a2:	069b      	lsls	r3, r3, #26
 80011a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011a8:	e015      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x616>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80011c2:	2320      	movs	r3, #32
 80011c4:	e003      	b.n	80011ce <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80011c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	069b      	lsls	r3, r3, #26
 80011d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x636>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0e9b      	lsrs	r3, r3, #26
 80011e8:	3301      	adds	r3, #1
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	e017      	b.n	8001226 <HAL_ADC_ConfigChannel+0x666>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	61fb      	str	r3, [r7, #28]
  return result;
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800120e:	2320      	movs	r3, #32
 8001210:	e003      	b.n	800121a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3301      	adds	r3, #1
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	ea42 0103 	orr.w	r1, r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10d      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x692>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0e9b      	lsrs	r3, r3, #26
 800123c:	3301      	adds	r3, #1
 800123e:	f003 021f 	and.w	r2, r3, #31
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	051b      	lsls	r3, r3, #20
 800124c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001250:	e01e      	b.n	8001290 <HAL_ADC_ConfigChannel+0x6d0>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	613b      	str	r3, [r7, #16]
  return result;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800126a:	2320      	movs	r3, #32
 800126c:	e006      	b.n	800127c <HAL_ADC_ConfigChannel+0x6bc>
 800126e:	bf00      	nop
 8001270:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	f003 021f 	and.w	r2, r3, #31
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	051b      	lsls	r3, r3, #20
 800128c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001290:	430b      	orrs	r3, r1
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6892      	ldr	r2, [r2, #8]
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff f8ff 	bl	800049a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_ADC_ConfigChannel+0x7d8>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d06c      	beq.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012a8:	483c      	ldr	r0, [pc, #240]	; (800139c <HAL_ADC_ConfigChannel+0x7dc>)
 80012aa:	f7ff f841 	bl	8000330 <LL_ADC_GetCommonPathInternalCh>
 80012ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <HAL_ADC_ConfigChannel+0x7e0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d127      	bne.n	800130c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d121      	bne.n	800130c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <HAL_ADC_ConfigChannel+0x7e4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d157      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012da:	4619      	mov	r1, r3
 80012dc:	482f      	ldr	r0, [pc, #188]	; (800139c <HAL_ADC_ConfigChannel+0x7dc>)
 80012de:	f7ff f814 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_ADC_ConfigChannel+0x7e8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	099b      	lsrs	r3, r3, #6
 80012e8:	4a30      	ldr	r2, [pc, #192]	; (80013ac <HAL_ADC_ConfigChannel+0x7ec>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	099b      	lsrs	r3, r3, #6
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80012fc:	e002      	b.n	8001304 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3b01      	subs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800130a:	e03a      	b.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d113      	bne.n	800133e <HAL_ADC_ConfigChannel+0x77e>
 8001316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800131a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d12a      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800132c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001334:	4619      	mov	r1, r3
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <HAL_ADC_ConfigChannel+0x7dc>)
 8001338:	f7fe ffe7 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800133c:	e021      	b.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d11c      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800134c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d116      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <HAL_ADC_ConfigChannel+0x7e4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d111      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800135e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_ADC_ConfigChannel+0x7dc>)
 800136a:	f7fe ffce 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
 800136e:	e008      	b.n	8001382 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	f043 0220 	orr.w	r2, r3, #32
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800138a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800138e:	4618      	mov	r0, r3
 8001390:	37d8      	adds	r7, #216	; 0xd8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	80080000 	.word	0x80080000
 800139c:	50040300 	.word	0x50040300
 80013a0:	c7520000 	.word	0xc7520000
 80013a4:	50040000 	.word	0x50040000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	053e2d63 	.word	0x053e2d63
 80013b0:	cb840000 	.word	0xcb840000
 80013b4:	80000001 	.word	0x80000001

080013b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f976 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80013d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f997 	bl	800070e <LL_ADC_INJ_IsConversionOngoing>
 80013e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8098 	beq.w	8001520 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d02a      	beq.n	8001454 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7e5b      	ldrb	r3, [r3, #25]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d126      	bne.n	8001454 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7e1b      	ldrb	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d122      	bne.n	8001454 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001412:	e014      	b.n	800143e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	4a45      	ldr	r2, [pc, #276]	; (800152c <ADC_ConversionStop+0x174>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d90d      	bls.n	8001438 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	f043 0201 	orr.w	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e074      	b.n	8001522 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d1e3      	bne.n	8001414 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d014      	beq.n	8001484 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f92e 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00c      	beq.n	8001484 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f8eb 	bl	800064a <LL_ADC_IsDisableOngoing>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f90a 	bl	8000698 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d014      	beq.n	80014b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f93d 	bl	800070e <LL_ADC_INJ_IsConversionOngoing>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f8d3 	bl	800064a <LL_ADC_IsDisableOngoing>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f919 	bl	80006e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d005      	beq.n	80014c6 <ADC_ConversionStop+0x10e>
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d105      	bne.n	80014cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80014c0:	230c      	movs	r3, #12
 80014c2:	617b      	str	r3, [r7, #20]
        break;
 80014c4:	e005      	b.n	80014d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80014c6:	2308      	movs	r3, #8
 80014c8:	617b      	str	r3, [r7, #20]
        break;
 80014ca:	e002      	b.n	80014d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80014cc:	2304      	movs	r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
        break;
 80014d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80014d2:	f7fe fefb 	bl	80002cc <HAL_GetTick>
 80014d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80014d8:	e01b      	b.n	8001512 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014da:	f7fe fef7 	bl	80002cc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d914      	bls.n	8001512 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00d      	beq.n	8001512 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f043 0210 	orr.w	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1dc      	bne.n	80014da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	a33fffff 	.word	0xa33fffff

08001530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f86f 	bl	8000624 <LL_ADC_IsEnabled>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d169      	bne.n	8001620 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <ADC_Enable+0xfc>)
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00d      	beq.n	8001576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e055      	b.n	8001622 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f82a 	bl	80005d4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001580:	482b      	ldr	r0, [pc, #172]	; (8001630 <ADC_Enable+0x100>)
 8001582:	f7fe fed5 	bl	8000330 <LL_ADC_GetCommonPathInternalCh>
 8001586:	4603      	mov	r3, r0
 8001588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <ADC_Enable+0x104>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <ADC_Enable+0x108>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80015aa:	e002      	b.n	80015b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f9      	bne.n	80015ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80015b8:	f7fe fe88 	bl	80002cc <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80015be:	e028      	b.n	8001612 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f82d 	bl	8000624 <LL_ADC_IsEnabled>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fffd 	bl	80005d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015da:	f7fe fe77 	bl	80002cc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d914      	bls.n	8001612 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00d      	beq.n	8001612 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e007      	b.n	8001622 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d1cf      	bne.n	80015c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	8000003f 	.word	0x8000003f
 8001630:	50040300 	.word	0x50040300
 8001634:	20000008 	.word	0x20000008
 8001638:	053e2d63 	.word	0x053e2d63

0800163c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fffe 	bl	800064a <LL_ADC_IsDisableOngoing>
 800164e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ffe5 	bl	8000624 <LL_ADC_IsEnabled>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d047      	beq.n	80016f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d144      	bne.n	80016f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030d 	and.w	r3, r3, #13
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10c      	bne.n	800168e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffbf 	bl	80005fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2203      	movs	r2, #3
 8001684:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001686:	f7fe fe21 	bl	80002cc <HAL_GetTick>
 800168a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800168c:	e029      	b.n	80016e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f043 0210 	orr.w	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e023      	b.n	80016f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016aa:	f7fe fe0f 	bl	80002cc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d914      	bls.n	80016e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e007      	b.n	80016f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1dc      	bne.n	80016aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001710:	2b00      	cmp	r3, #0
 8001712:	d14b      	bne.n	80017ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d021      	beq.n	8001772 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe72 	bl	800041c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d032      	beq.n	80017a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d12b      	bne.n	80017a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11f      	bne.n	80017a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	659a      	str	r2, [r3, #88]	; 0x58
 8001770:	e018      	b.n	80017a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f002 fc07 	bl	8003fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017aa:	e00e      	b.n	80017ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff f9f6 	bl	8000baa <HAL_ADC_ErrorCallback>
}
 80017be:	e004      	b.n	80017ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff f9d8 	bl	8000b96 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	f043 0204 	orr.w	r2, r3, #4
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff f9c8 	bl	8000baa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e08d      	b.n	8001b76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_DMA_Init+0x138>)
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d80f      	bhi.n	8001a86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_DMA_Init+0x13c>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_DMA_Init+0x140>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	009a      	lsls	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a42      	ldr	r2, [pc, #264]	; (8001b8c <HAL_DMA_Init+0x144>)
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
 8001a84:	e00e      	b.n	8001aa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_DMA_Init+0x148>)
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_DMA_Init+0x140>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	009a      	lsls	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <HAL_DMA_Init+0x14c>)
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fa12 	bl	8001f20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b04:	d102      	bne.n	8001b0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b20:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_DMA_Init+0x104>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d80c      	bhi.n	8001b4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fa32 	bl	8001f9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e008      	b.n	8001b5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020407 	.word	0x40020407
 8001b84:	bffdfff8 	.word	0xbffdfff8
 8001b88:	cccccccd 	.word	0xcccccccd
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	bffdfbf8 	.word	0xbffdfbf8
 8001b94:	40020400 	.word	0x40020400

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DMA_Start_IT+0x20>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e066      	b.n	8001c86 <HAL_DMA_Start_IT+0xee>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d155      	bne.n	8001c78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f957 	bl	8001ea4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 020e 	orr.w	r2, r2, #14
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00f      	b.n	8001c30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0204 	bic.w	r2, r2, #4
 8001c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 020a 	orr.w	r2, r2, #10
 8001c2e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c64:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e005      	b.n	8001c84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d008      	beq.n	8001cb8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e040      	b.n	8001d3a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020e 	bic.w	r2, r2, #14
 8001cc6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	f003 021c 	and.w	r2, r3, #28
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d26:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f003 031c 	and.w	r3, r3, #28
 8001d66:	2204      	movs	r2, #4
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d026      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x7a>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d107      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0204 	bic.w	r2, r2, #4
 8001d98:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f003 021c 	and.w	r2, r3, #28
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2104      	movs	r1, #4
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d071      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001dbe:	e06c      	b.n	8001e9a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 031c 	and.w	r3, r3, #28
 8001dc8:	2202      	movs	r2, #2
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02e      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xec>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d029      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10b      	bne.n	8001e04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020a 	bic.w	r2, r2, #10
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f003 021c 	and.w	r2, r3, #28
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2102      	movs	r1, #2
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d038      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e30:	e033      	b.n	8001e9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f003 031c 	and.w	r3, r3, #28
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02a      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x156>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d025      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020e 	bic.w	r2, r2, #14
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f003 021c 	and.w	r2, r3, #28
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
}
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eba:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ecc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 021c 	and.w	r2, r3, #28
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d108      	bne.n	8001f04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f02:	e007      	b.n	8001f14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d80a      	bhi.n	8001f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6493      	str	r3, [r2, #72]	; 0x48
 8001f48:	e007      	b.n	8001f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	009a      	lsls	r2, r3, #2
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f54:	4413      	add	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3b08      	subs	r3, #8
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40020407 	.word	0x40020407
 8001f90:	4002081c 	.word	0x4002081c
 8001f94:	cccccccd 	.word	0xcccccccd
 8001f98:	40020880 	.word	0x40020880

08001f9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	1000823f 	.word	0x1000823f
 8001fe0:	40020940 	.word	0x40020940

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	e166      	b.n	80022c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8158 	beq.w	80022bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x40>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b2 	beq.w	80022bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	4a60      	ldr	r2, [pc, #384]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6613      	str	r3, [r2, #96]	; 0x60
 8002164:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <HAL_GPIO_Init+0x2fc>)
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002170:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800219a:	d02b      	beq.n	80021f4 <HAL_GPIO_Init+0x210>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a52      	ldr	r2, [pc, #328]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d025      	beq.n	80021f0 <HAL_GPIO_Init+0x20c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_GPIO_Init+0x308>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01f      	beq.n	80021ec <HAL_GPIO_Init+0x208>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_GPIO_Init+0x30c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d019      	beq.n	80021e8 <HAL_GPIO_Init+0x204>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_GPIO_Init+0x310>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x200>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_GPIO_Init+0x314>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1fc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x318>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1f8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x31c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1f4>
 80021d4:	2307      	movs	r3, #7
 80021d6:	e00e      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021d8:	2308      	movs	r3, #8
 80021da:	e00c      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021dc:	2306      	movs	r3, #6
 80021de:	e00a      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021e0:	2305      	movs	r3, #5
 80021e2:	e008      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021e4:	2304      	movs	r3, #4
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021e8:	2303      	movs	r3, #3
 80021ea:	e004      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_GPIO_Init+0x212>
 80021f4:	2300      	movs	r3, #0
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002206:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_GPIO_Init+0x300>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002238:	4a32      	ldr	r2, [pc, #200]	; (8002304 <HAL_GPIO_Init+0x320>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002268:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_GPIO_Init+0x320>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_GPIO_Init+0x320>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_GPIO_Init+0x320>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022b6:	4a13      	ldr	r2, [pc, #76]	; (8002304 <HAL_GPIO_Init+0x320>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f ae91 	bne.w	8001ff4 <HAL_GPIO_Init+0x10>
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48001000 	.word	0x48001000
 80022f8:	48001400 	.word	0x48001400
 80022fc:	48001800 	.word	0x48001800
 8002300:	48001c00 	.word	0x48001c00
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002354:	e002      	b.n	800235c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fdec 	bl	8003f64 <HAL_GPIO_EXTI_Callback>
  }
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a8:	d102      	bne.n	80023b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ae:	e00b      	b.n	80023c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023be:	d102      	bne.n	80023c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	e000      	b.n	80023c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40007000 	.word	0x40007000

080023d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d141      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e6:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d131      	bne.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f4:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	4a46      	ldr	r2, [pc, #280]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240c:	4a41      	ldr	r2, [pc, #260]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002414:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2232      	movs	r2, #50	; 0x32
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	4a3f      	ldr	r2, [pc, #252]	; (800251c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	0c9b      	lsrs	r3, r3, #18
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242a:	e002      	b.n	8002432 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3b01      	subs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243e:	d102      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f2      	bne.n	800242c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d158      	bne.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e057      	b.n	8002508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002464:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002468:	e04d      	b.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002470:	d141      	bne.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d131      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002498:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2232      	movs	r2, #50	; 0x32
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b6:	e002      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ca:	d102      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f2      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d112      	bne.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e011      	b.n	8002508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024f4:	e007      	b.n	8002506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002504:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40007000 	.word	0x40007000
 8002518:	20000008 	.word	0x20000008
 800251c:	431bde83 	.word	0x431bde83

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f000 bc08 	b.w	8002d44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002534:	4b96      	ldr	r3, [pc, #600]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800253e:	4b94      	ldr	r3, [pc, #592]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80e4 	beq.w	800271e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_RCC_OscConfig+0x4c>
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	f040 808b 	bne.w	800267a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 8087 	bne.w	800267a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256c:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x64>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e3df      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1a      	ldr	r2, [r3, #32]
 8002588:	4b81      	ldr	r3, [pc, #516]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_RCC_OscConfig+0x7e>
 8002594:	4b7e      	ldr	r3, [pc, #504]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	e005      	b.n	80025aa <HAL_RCC_OscConfig+0x8a>
 800259e:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d223      	bcs.n	80025f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fd94 	bl	80030e0 <RCC_SetFlashLatencyFromMSIRange>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e3c0      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a72      	ldr	r2, [pc, #456]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	496d      	ldr	r1, [pc, #436]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e0:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	4968      	ldr	r1, [pc, #416]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e025      	b.n	8002642 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a65      	ldr	r2, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4960      	ldr	r1, [pc, #384]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b5e      	ldr	r3, [pc, #376]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	495b      	ldr	r1, [pc, #364]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fd54 	bl	80030e0 <RCC_SetFlashLatencyFromMSIRange>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e380      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002642:	f000 fcc1 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4950      	ldr	r1, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_RCC_OscConfig+0x278>)
 8002660:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002662:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_RCC_OscConfig+0x27c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fde0 	bl	800022c <HAL_InitTick>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d052      	beq.n	800271c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	e364      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d032      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002682:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a42      	ldr	r2, [pc, #264]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800268e:	f7fd fe1d 	bl	80002cc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002696:	f7fd fe19 	bl	80002cc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e34d      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b4:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a35      	ldr	r2, [pc, #212]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4930      	ldr	r1, [pc, #192]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d2:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	492b      	ldr	r1, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
 80026e6:	e01a      	b.n	800271e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f4:	f7fd fdea 	bl	80002cc <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026fc:	f7fd fde6 	bl	80002cc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e31a      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1dc>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d073      	beq.n	8002812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x21c>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d10e      	bne.n	8002754 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d10b      	bne.n	8002754 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d063      	beq.n	8002810 <HAL_RCC_OscConfig+0x2f0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d15f      	bne.n	8002810 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e2f7      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x24c>
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e025      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d114      	bne.n	80027a0 <HAL_RCC_OscConfig+0x280>
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b03      	ldr	r3, [pc, #12]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a02      	ldr	r2, [pc, #8]	; (8002790 <HAL_RCC_OscConfig+0x270>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e013      	b.n	80027b8 <HAL_RCC_OscConfig+0x298>
 8002790:	40021000 	.word	0x40021000
 8002794:	08004320 	.word	0x08004320
 8002798:	20000008 	.word	0x20000008
 800279c:	20000000 	.word	0x20000000
 80027a0:	4ba0      	ldr	r3, [pc, #640]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a9f      	ldr	r2, [pc, #636]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b9d      	ldr	r3, [pc, #628]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a9c      	ldr	r2, [pc, #624]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fd fd84 	bl	80002cc <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fd fd80 	bl	80002cc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e2b4      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027da:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2a8>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fd fd70 	bl	80002cc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fd fd6c 	bl	80002cc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e2a0      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2d0>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d060      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x310>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d119      	bne.n	800285e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d116      	bne.n	800285e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_OscConfig+0x328>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e27d      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	4973      	ldr	r1, [pc, #460]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800285c:	e040      	b.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d023      	beq.n	80028ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002866:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fd fd2b 	bl	80002cc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287a:	f7fd fd27 	bl	80002cc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e25b      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288c:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	495f      	ldr	r1, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fd fd07 	bl	80002cc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fd fd03 	bl	80002cc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e237      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d03c      	beq.n	8002966 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01c      	beq.n	800292e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	4a4a      	ldr	r2, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fd fce2 	bl	80002cc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fd fcde 	bl	80002cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e212      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ef      	beq.n	800290c <HAL_RCC_OscConfig+0x3ec>
 800292c:	e01b      	b.n	8002966 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fd fcc5 	bl	80002cc <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002946:	f7fd fcc1 	bl	80002cc <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1f5      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ef      	bne.n	8002946 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80a6 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002978:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 800298a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298e:	6593      	str	r3, [r2, #88]	; 0x58
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_RCC_OscConfig+0x508>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d118      	bne.n	80029de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCC_OscConfig+0x508>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x508>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b8:	f7fd fc88 	bl	80002cc <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7fd fc84 	bl	80002cc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e1b8      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_OscConfig+0x508>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d108      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4d8>
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f6:	e029      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d115      	bne.n	8002a2c <HAL_RCC_OscConfig+0x50c>
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_RCC_OscConfig+0x504>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a20:	e014      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	4a9c      	ldr	r2, [pc, #624]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3c:	4b99      	ldr	r3, [pc, #612]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a98      	ldr	r2, [pc, #608]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d016      	beq.n	8002a82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fd fc3a 	bl	80002cc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fd fc36 	bl	80002cc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e168      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	4b8c      	ldr	r3, [pc, #560]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ed      	beq.n	8002a5c <HAL_RCC_OscConfig+0x53c>
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fd fc23 	bl	80002cc <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fd fc1f 	bl	80002cc <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e151      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ed      	bne.n	8002a8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad4:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ada:	4a72      	ldr	r2, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fd fbf2 	bl	80002cc <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aec:	f7fd fbee 	bl	80002cc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e122      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002afe:	4b69      	ldr	r3, [pc, #420]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCC_OscConfig+0x5cc>
 8002b0c:	e01b      	b.n	8002b46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b0e:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b14:	4a63      	ldr	r2, [pc, #396]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fd fbd5 	bl	80002cc <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b26:	f7fd fbd1 	bl	80002cc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e105      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b38:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ef      	bne.n	8002b26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80f9 	beq.w	8002d42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	f040 80cf 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b5a:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d12c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d123      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d113      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d071      	beq.n	8002cac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d068      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bda:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0ac      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf6:	f7fd fb69 	bl	80002cc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fd fb65 	bl	80002cc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e099      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x788>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	4311      	orrs	r1, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c36:	0212      	lsls	r2, r2, #8
 8002c38:	4311      	orrs	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c3e:	0852      	lsrs	r2, r2, #1
 8002c40:	3a01      	subs	r2, #1
 8002c42:	0552      	lsls	r2, r2, #21
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0652      	lsls	r2, r2, #25
 8002c50:	4311      	orrs	r1, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c56:	06d2      	lsls	r2, r2, #27
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	4912      	ldr	r1, [pc, #72]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c78:	f7fd fb28 	bl	80002cc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fd fb24 	bl	80002cc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e058      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCC_OscConfig+0x784>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c9e:	e050      	b.n	8002d42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e04f      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d144      	bne.n	8002d42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd0:	f7fd fafc 	bl	80002cc <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fd faf8 	bl	80002cc <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e02c      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x7b8>
 8002cf6:	e024      	b.n	8002d42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d01f      	beq.n	8002d3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fd fadf 	bl	80002cc <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fd fadb 	bl	80002cc <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e00f      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4905      	ldr	r1, [pc, #20]	; (8002d4c <HAL_RCC_OscConfig+0x82c>)
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_OscConfig+0x830>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
 8002d3c:	e001      	b.n	8002d42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	feeefffc 	.word	0xfeeefffc

08002d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e11d      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b90      	ldr	r3, [pc, #576]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 020f 	bic.w	r2, r3, #15
 8002d82:	498b      	ldr	r1, [pc, #556]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e105      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d908      	bls.n	8002dca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b7e      	ldr	r3, [pc, #504]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	497b      	ldr	r1, [pc, #492]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d079      	beq.n	8002eca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d11e      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b75      	ldr	r3, [pc, #468]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0dc      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002dee:	f000 f9d1 	bl	8003194 <RCC_GetSysClockFreqFromPLLSource>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a70      	ldr	r2, [pc, #448]	; (8002fb8 <HAL_RCC_ClockConfig+0x264>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d946      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d140      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e06:	4b6b      	ldr	r3, [pc, #428]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e035      	b.n	8002e88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e24:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b9      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3c:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ad      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0a5      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e5c:	f000 f8b4 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4a55      	ldr	r2, [pc, #340]	; (8002fb8 <HAL_RCC_ClockConfig+0x264>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d90f      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e68:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e88:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 0203 	bic.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4947      	ldr	r1, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9a:	f7fd fa17 	bl	80002cc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea2:	f7fd fa13 	bl	80002cc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e077      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 020c 	and.w	r2, r3, #12
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d1eb      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a37      	ldr	r2, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d010      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d208      	bcs.n	8002f0a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	492b      	ldr	r1, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0a:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d210      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 020f 	bic.w	r2, r3, #15
 8002f20:	4923      	ldr	r1, [pc, #140]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCC_ClockConfig+0x25c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e036      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4918      	ldr	r1, [pc, #96]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f78:	f000 f826 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <HAL_RCC_ClockConfig+0x268>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x26c>)
 8002f96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd f945 	bl	800022c <HAL_InitTick>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	04c4b400 	.word	0x04c4b400
 8002fbc:	08004320 	.word	0x08004320
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20000000 	.word	0x20000000

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d121      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11e      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003024:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d102      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e004      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d101      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_RCC_GetSysClockFreq+0x114>)
 800304e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d134      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0xa6>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d003      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xac>
 800306c:	e005      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003070:	617b      	str	r3, [r7, #20]
      break;
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003076:	617b      	str	r3, [r7, #20]
      break;
 8003078:	e002      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3301      	adds	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0e5b      	lsrs	r3, r3, #25
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	3301      	adds	r3, #1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c0:	69bb      	ldr	r3, [r7, #24]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08004330 	.word	0x08004330
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030f8:	f7ff f94e 	bl	8002398 <HAL_PWREx_GetVoltageRange>
 80030fc:	6178      	str	r0, [r7, #20]
 80030fe:	e014      	b.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003118:	f7ff f93e 	bl	8002398 <HAL_PWREx_GetVoltageRange>
 800311c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003130:	d10b      	bne.n	800314a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d913      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2ba0      	cmp	r3, #160	; 0xa0
 800313c:	d902      	bls.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800313e:	2302      	movs	r3, #2
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e00d      	b.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003144:	2301      	movs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	e00a      	b.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b7f      	cmp	r3, #127	; 0x7f
 800314e:	d902      	bls.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003150:	2302      	movs	r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	e004      	b.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b70      	cmp	r3, #112	; 0x70
 800315a:	d101      	bne.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 020f 	bic.w	r2, r3, #15
 8003168:	4909      	ldr	r1, [pc, #36]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	40022000 	.word	0x40022000

08003194 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d00b      	beq.n	80031c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d825      	bhi.n	80031fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d008      	beq.n	80031c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11f      	bne.n	80031fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031be:	613b      	str	r3, [r7, #16]
    break;
 80031c0:	e01f      	b.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031c2:	4b25      	ldr	r3, [pc, #148]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031c4:	613b      	str	r3, [r7, #16]
    break;
 80031c6:	e01c      	b.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e005      	b.n	80031f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80031f0:	4a1a      	ldr	r2, [pc, #104]	; (800325c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	613b      	str	r3, [r7, #16]
    break;
 80031fa:	e002      	b.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
    break;
 8003200:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	3301      	adds	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	fb03 f202 	mul.w	r2, r3, r2
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0e5b      	lsrs	r3, r3, #25
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003242:	683b      	ldr	r3, [r7, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200
 800325c:	08004330 	.word	0x08004330

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003268:	2300      	movs	r3, #0
 800326a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800326c:	2300      	movs	r3, #0
 800326e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	2b00      	cmp	r3, #0
 800327a:	d040      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d02a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d825      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d026      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d821      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d006      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d81d      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d010      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032a0:	e018      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a88      	ldr	r2, [pc, #544]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ae:	e015      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb02 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c0:	e00c      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3320      	adds	r3, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fbed 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	74fb      	strb	r3, [r7, #19]
      break;
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80032da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f0:	4975      	ldr	r1, [pc, #468]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032f8:	e001      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d047      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d030      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d82a      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331e:	d02a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003324:	d824      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800332c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003330:	d81e      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333a:	d010      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800333c:	e018      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800333e:	4b62      	ldr	r3, [pc, #392]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800334a:	e015      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fab4 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800335c:	e00c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3320      	adds	r3, #32
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fb9f 	bl	8003aa8 <RCCEx_PLLSAI2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	74fb      	strb	r3, [r7, #19]
      break;
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	494e      	ldr	r1, [pc, #312]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003394:	e001      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 809f 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ac:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a3a      	ldr	r2, [pc, #232]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ea:	f7fc ff6f 	bl	80002cc <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033f0:	e009      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fc ff6b 	bl	80002cc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
        break;
 8003404:	e005      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003406:	4b31      	ldr	r3, [pc, #196]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ef      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d15b      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01f      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	429a      	cmp	r2, r3
 8003434:	d019      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003462:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fc ff2a 	bl	80002cc <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00b      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fc ff26 	bl	80002cc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d902      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	74fb      	strb	r3, [r7, #19]
            break;
 8003492:	e006      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ec      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034c0:	e008      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	74bb      	strb	r3, [r7, #18]
 80034c6:	e005      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d4:	7c7b      	ldrb	r3, [r7, #17]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	4a9f      	ldr	r2, [pc, #636]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f2:	4b9a      	ldr	r3, [pc, #616]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f023 0203 	bic.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	4996      	ldr	r1, [pc, #600]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003514:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 020c 	bic.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	498e      	ldr	r1, [pc, #568]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003536:	4b89      	ldr	r3, [pc, #548]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	4985      	ldr	r1, [pc, #532]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003558:	4b80      	ldr	r3, [pc, #512]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003566:	497d      	ldr	r1, [pc, #500]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357a:	4b78      	ldr	r3, [pc, #480]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	4974      	ldr	r1, [pc, #464]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	496c      	ldr	r1, [pc, #432]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b67      	ldr	r3, [pc, #412]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035cc:	4963      	ldr	r1, [pc, #396]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e0:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ee:	495b      	ldr	r1, [pc, #364]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003602:	4b56      	ldr	r3, [pc, #344]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	4952      	ldr	r1, [pc, #328]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	494a      	ldr	r1, [pc, #296]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003646:	4b45      	ldr	r3, [pc, #276]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	4941      	ldr	r1, [pc, #260]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003668:	4b3c      	ldr	r3, [pc, #240]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	4939      	ldr	r1, [pc, #228]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d028      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368a:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	4930      	ldr	r1, [pc, #192]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b4:	60d3      	str	r3, [r2, #12]
 80036b6:	e011      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f8f9 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d04d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f0:	d108      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003702:	e012      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003710:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e020      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a02      	ldr	r2, [pc, #8]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	e014      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f8a5 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d028      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379e:	4947      	ldr	r1, [pc, #284]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ae:	d106      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a41      	ldr	r2, [pc, #260]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ba:	60d3      	str	r3, [r2, #12]
 80037bc:	e011      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f876 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ee:	4b33      	ldr	r3, [pc, #204]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fe:	492f      	ldr	r1, [pc, #188]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003810:	d10c      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	2102      	movs	r1, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f851 	bl	80038c0 <RCCEx_PLLSAI1_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383e:	f023 0204 	bic.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	491c      	ldr	r1, [pc, #112]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003862:	f023 0218 	bic.w	r2, r3, #24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	4913      	ldr	r1, [pc, #76]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d017      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a2:	d105      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038da:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d103      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d142      	bne.n	8003978 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	e03f      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d018      	beq.n	8003932 <RCCEx_PLLSAI1_Config+0x72>
 8003900:	2b03      	cmp	r3, #3
 8003902:	d825      	bhi.n	8003950 <RCCEx_PLLSAI1_Config+0x90>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x4e>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d009      	beq.n	8003920 <RCCEx_PLLSAI1_Config+0x60>
 800390c:	e020      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11d      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391e:	e01a      	b.n	8003956 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003920:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	2b00      	cmp	r3, #0
 800392a:	d116      	bne.n	800395a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e013      	b.n	800395a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800393e:	4b56      	ldr	r3, [pc, #344]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800394e:	e006      	b.n	800395e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
      break;
 8003954:	e004      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800395e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003966:	4b4c      	ldr	r3, [pc, #304]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4949      	ldr	r1, [pc, #292]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8086 	bne.w	8003a8c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003980:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a44      	ldr	r2, [pc, #272]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fc fc9e 	bl	80002cc <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fc fc9a 	bl	80002cc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a8:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d168      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	4b35      	ldr	r3, [pc, #212]	; (8003a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6852      	ldr	r2, [r2, #4]
 80039da:	3a01      	subs	r2, #1
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	430a      	orrs	r2, r1
 80039e0:	492d      	ldr	r1, [pc, #180]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
 80039e6:	e02d      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d115      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ee:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	0211      	lsls	r1, r2, #8
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6912      	ldr	r2, [r2, #16]
 8003a00:	0852      	lsrs	r2, r2, #1
 8003a02:	3a01      	subs	r2, #1
 8003a04:	0552      	lsls	r2, r2, #21
 8003a06:	4311      	orrs	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	3a01      	subs	r2, #1
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	430a      	orrs	r2, r1
 8003a12:	4921      	ldr	r1, [pc, #132]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
 8003a18:	e014      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6892      	ldr	r2, [r2, #8]
 8003a26:	0211      	lsls	r1, r2, #8
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6952      	ldr	r2, [r2, #20]
 8003a2c:	0852      	lsrs	r2, r2, #1
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0652      	lsls	r2, r2, #25
 8003a32:	4311      	orrs	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6852      	ldr	r2, [r2, #4]
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	4916      	ldr	r1, [pc, #88]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fc fc3c 	bl	80002cc <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a56:	e009      	b.n	8003a6c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a58:	f7fc fc38 	bl	80002cc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6a:	e005      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	4904      	ldr	r1, [pc, #16]	; (8003a98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	07ff800f 	.word	0x07ff800f
 8003aa0:	ff9f800f 	.word	0xff9f800f
 8003aa4:	f9ff800f 	.word	0xf9ff800f

08003aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ab6:	4b72      	ldr	r3, [pc, #456]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00e      	beq.n	8003ae0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ac2:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d142      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e03f      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d018      	beq.n	8003b1a <RCCEx_PLLSAI2_Config+0x72>
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d825      	bhi.n	8003b38 <RCCEx_PLLSAI2_Config+0x90>
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x4e>
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d009      	beq.n	8003b08 <RCCEx_PLLSAI2_Config+0x60>
 8003af4:	e020      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003af6:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11d      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b06:	e01a      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b08:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b18:	e013      	b.n	8003b42 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b1a:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b36:	e006      	b.n	8003b46 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e004      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b4e:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4949      	ldr	r1, [pc, #292]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 8086 	bne.w	8003c74 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b68:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a44      	ldr	r2, [pc, #272]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fc fbaa 	bl	80002cc <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b7c:	f7fc fba6 	bl	80002cc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d168      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d113      	bne.n	8003bd0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	06d2      	lsls	r2, r2, #27
 8003bbc:	4311      	orrs	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6852      	ldr	r2, [r2, #4]
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0112      	lsls	r2, r2, #4
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	492d      	ldr	r1, [pc, #180]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	614b      	str	r3, [r1, #20]
 8003bce:	e02d      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d115      	bne.n	8003c02 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	0211      	lsls	r1, r2, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6912      	ldr	r2, [r2, #16]
 8003be8:	0852      	lsrs	r2, r2, #1
 8003bea:	3a01      	subs	r2, #1
 8003bec:	0552      	lsls	r2, r2, #21
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6852      	ldr	r2, [r2, #4]
 8003bf4:	3a01      	subs	r2, #1
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	4921      	ldr	r1, [pc, #132]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	614b      	str	r3, [r1, #20]
 8003c00:	e014      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	0211      	lsls	r1, r2, #8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6952      	ldr	r2, [r2, #20]
 8003c14:	0852      	lsrs	r2, r2, #1
 8003c16:	3a01      	subs	r2, #1
 8003c18:	0652      	lsls	r2, r2, #25
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	3a01      	subs	r2, #1
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	430a      	orrs	r2, r1
 8003c26:	4916      	ldr	r1, [pc, #88]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fc fb48 	bl	80002cc <HAL_GetTick>
 8003c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c3e:	e009      	b.n	8003c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c40:	f7fc fb44 	bl	80002cc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d902      	bls.n	8003c54 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	73fb      	strb	r3, [r7, #15]
          break;
 8003c52:	e005      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ef      	beq.n	8003c40 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	4904      	ldr	r1, [pc, #16]	; (8003c80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	07ff800f 	.word	0x07ff800f
 8003c88:	ff9f800f 	.word	0xff9f800f
 8003c8c:	f9ff800f 	.word	0xf9ff800f

08003c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c94:	f7fc fab2 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c98:	f000 f810 	bl	8003cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8003c9c:	f000 f8d4 	bl	8003e48 <MX_DMA_Init>
  MX_GPIO_Init();
 8003ca0:	f000 f8fc 	bl	8003e9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003ca4:	f000 f85c 	bl	8003d60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  data[0] = 0;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <main+0x28>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	801a      	strh	r2, [r3, #0]
  data[1] = 0;
 8003cae:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <main+0x28>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	805a      	strh	r2, [r3, #2]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <main+0x24>
 8003cb6:	bf00      	nop
 8003cb8:	200000f4 	.word	0x200000f4

08003cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	; 0x58
 8003cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	2244      	movs	r2, #68	; 0x44
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fb14 	bl	80042f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003cde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ce2:	f7fe fb79 	bl	80023d8 <HAL_PWREx_ControlVoltageScaling>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003cec:	f000 f9ca 	bl	8004084 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003cfc:	2360      	movs	r3, #96	; 0x60
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d00:	2302      	movs	r3, #2
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003d04:	2301      	movs	r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003d0c:	2328      	movs	r3, #40	; 0x28
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d10:	2302      	movs	r3, #2
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d14:	2302      	movs	r3, #2
 8003d16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fbfd 	bl	8002520 <HAL_RCC_OscConfig>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003d2c:	f000 f9aa 	bl	8004084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d30:	230f      	movs	r3, #15
 8003d32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d34:	2303      	movs	r3, #3
 8003d36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d44:	463b      	mov	r3, r7
 8003d46:	2103      	movs	r1, #3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f803 	bl	8002d54 <HAL_RCC_ClockConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003d54:	f000 f996 	bl	8004084 <Error_Handler>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3758      	adds	r7, #88	; 0x58
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d66:	463b      	mov	r3, r7
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
 8003d74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <MX_ADC1_Init+0xdc>)
 8003d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003d82:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d84:	2208      	movs	r2, #8
 8003d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d94:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d96:	2204      	movs	r2, #4
 8003d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d9a:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003da8:	2202      	movs	r2, #2
 8003daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003dac:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003dd6:	4818      	ldr	r0, [pc, #96]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003dd8:	f7fc fcac 	bl	8000734 <HAL_ADC_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003de2:	f000 f94f 	bl	8004084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <MX_ADC1_Init+0xe0>)
 8003de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003dea:	2306      	movs	r3, #6
 8003dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003dee:	2306      	movs	r3, #6
 8003df0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003df2:	237f      	movs	r3, #127	; 0x7f
 8003df4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003df6:	2304      	movs	r3, #4
 8003df8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4619      	mov	r1, r3
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003e04:	f7fc fedc 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003e0e:	f000 f939 	bl	8004084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <MX_ADC1_Init+0xe4>)
 8003e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003e16:	230c      	movs	r3, #12
 8003e18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <MX_ADC1_Init+0xd8>)
 8003e20:	f7fc fece 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8003e2a:	f000 f92b 	bl	8004084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000002c 	.word	0x2000002c
 8003e3c:	50040000 	.word	0x50040000
 8003e40:	c7520000 	.word	0xc7520000
 8003e44:	80000001 	.word	0x80000001

08003e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6493      	str	r3, [r2, #72]	; 0x48
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6493      	str	r3, [r2, #72]	; 0x48
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <MX_DMA_Init+0x50>)
 8003e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	200b      	movs	r0, #11
 8003e84:	f7fd fda9 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e88:	200b      	movs	r0, #11
 8003e8a:	f7fd fdc2 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000

08003e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003eb8:	f043 0304 	orr.w	r3, r3, #4
 8003ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed6:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <MX_GPIO_Init+0xbc>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003efa:	2200      	movs	r2, #0
 8003efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f00:	4816      	ldr	r0, [pc, #88]	; (8003f5c <MX_GPIO_Init+0xc0>)
 8003f02:	f7fe fa19 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8003f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4810      	ldr	r0, [pc, #64]	; (8003f60 <MX_GPIO_Init+0xc4>)
 8003f1e:	f7fe f861 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4808      	ldr	r0, [pc, #32]	; (8003f5c <MX_GPIO_Init+0xc0>)
 8003f3c:	f7fe f852 	bl	8001fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2028      	movs	r0, #40	; 0x28
 8003f46:	f7fd fd48 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f4a:	2028      	movs	r0, #40	; 0x28
 8003f4c:	f7fd fd61 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	48000400 	.word	0x48000400
 8003f60:	48000800 	.word	0x48000800

08003f64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]

	// 	temperature = ((((float)((float)data[0]/(float)TEMPSENSOR_CAL_VREFANALOG) - 30) * (float)((float)TEMPSENSOR_CAL2_TEMP - (float)TEMPSENSOR_CAL1_TEMP)) / (float)((float)*TEMPSENSOR_CAL2_ADDR - (float)*TEMPSENSOR_CAL1_ADDR) + 30);
//	}


	HAL_ADC_Start_DMA(&hadc1, &data, 2);
 8003f6e:	2202      	movs	r2, #2
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_GPIO_EXTI_Callback+0x48>)
 8003f72:	480f      	ldr	r0, [pc, #60]	; (8003fb0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003f74:	f7fc fd2a 	bl	80009cc <HAL_ADC_Start_DMA>


	if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 8003f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f7c:	480d      	ldr	r0, [pc, #52]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x50>)
 8003f7e:	f7fe f9c3 	bl	8002308 <HAL_GPIO_ReadPin>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f8e:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x50>)
 8003f90:	f7fe f9d2 	bl	8002338 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	}
}
 8003f94:	e005      	b.n	8003fa2 <HAL_GPIO_EXTI_Callback+0x3e>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8003f96:	2201      	movs	r2, #1
 8003f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f9c:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <HAL_GPIO_EXTI_Callback+0x50>)
 8003f9e:	f7fe f9cb 	bl	8002338 <HAL_GPIO_WritePin>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200000f4 	.word	0x200000f4
 8003fb0:	2000002c 	.word	0x2000002c
 8003fb4:	48000400 	.word	0x48000400

08003fb8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA (&hadc1);
 8003fc0:	4829      	ldr	r0, [pc, #164]	; (8004068 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003fc2:	f7fc fd87 	bl	8000ad4 <HAL_ADC_Stop_DMA>
	uint16_t zero = data[0];
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <HAL_ADC_ConvCpltCallback+0xb4>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	82fb      	strh	r3, [r7, #22]
	uint16_t one = data[1];
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_ADC_ConvCpltCallback+0xb4>)
 8003fce:	885b      	ldrh	r3, [r3, #2]
 8003fd0:	82bb      	strh	r3, [r7, #20]

	float vdd = 3.0 * ((float)TEMPSENSOR_CAL_VREFANALOG /(float)one);
 8003fd2:	8abb      	ldrh	r3, [r7, #20]
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fdc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004070 <HAL_ADC_ConvCpltCallback+0xb8>
 8003fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fec:	edc7 7a04 	vstr	s15, [r7, #16]
	vdd = vdd / 3.0;
 8003ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ff4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffc:	edc7 7a04 	vstr	s15, [r7, #16]
	float temperature = 0;
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
	temperature = ((((float)((zero*vdd)/1023) - TEMPSENSOR_CAL1_TEMP) * (float)((float)TEMPSENSOR_CAL2_TEMP - (float)TEMPSENSOR_CAL1_TEMP)) / (float)((float)*TEMPSENSOR_CAL2_ADDR - (float)*TEMPSENSOR_CAL1_ADDR) + TEMPSENSOR_CAL1_TEMP);
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004010:	edd7 7a04 	vldr	s15, [r7, #16]
 8004014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004018:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004074 <HAL_ADC_ConvCpltCallback+0xbc>
 800401c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004020:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004028:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004078 <HAL_ADC_ConvCpltCallback+0xc0>
 800402c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_ADC_ConvCpltCallback+0xc4>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_ADC_ConvCpltCallback+0xc8>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004048:	ee37 7a67 	vsub.f32	s14, s14, s15
 800404c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004050:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004058:	edc7 7a03 	vstr	s15, [r7, #12]
	//temperature = __HAL_ADC_CALC_TEMPERATURE((uint16_t)((zero*vdd)/4095), (uint16_t)vdd, ADC_RESOLUTION_12B);
	int x = 3;
 800405c:	2303      	movs	r3, #3
 800405e:	60bb      	str	r3, [r7, #8]

// 1023 & 4095

}
 8004060:	bf00      	nop
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	2000002c 	.word	0x2000002c
 800406c:	200000f4 	.word	0x200000f4
 8004070:	453b8000 	.word	0x453b8000
 8004074:	447fc000 	.word	0x447fc000
 8004078:	42c80000 	.word	0x42c80000
 800407c:	1fff75ca 	.word	0x1fff75ca
 8004080:	1fff75a8 	.word	0x1fff75a8

08004084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800408c:	e7fe      	b.n	800408c <Error_Handler+0x8>
	...

08004090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_MspInit+0x44>)
 8004098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409a:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <HAL_MspInit+0x44>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6613      	str	r3, [r2, #96]	; 0x60
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_MspInit+0x44>)
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_MspInit+0x44>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <HAL_MspInit+0x44>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6593      	str	r3, [r2, #88]	; 0x58
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_MspInit+0x44>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0a8      	sub	sp, #160	; 0xa0
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2294      	movs	r2, #148	; 0x94
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f905 	bl	80042f8 <memset>
  if(hadc->Instance==ADC1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <HAL_ADC_MspInit+0xd8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d156      	bne.n	80041a6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80040f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80040fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004106:	2301      	movs	r3, #1
 8004108:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800410e:	2318      	movs	r3, #24
 8004110:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004112:	2302      	movs	r3, #2
 8004114:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004116:	2302      	movs	r3, #2
 8004118:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800411a:	2302      	movs	r3, #2
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800411e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff f899 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8004134:	f7ff ffa6 	bl	8004084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <HAL_ADC_MspInit+0xdc>)
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_ADC_MspInit+0xdc>)
 800413e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_ADC_MspInit+0xdc>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_ADC_MspInit+0xe4>)
 8004154:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004158:	2205      	movs	r2, #5
 800415a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004164:	2200      	movs	r2, #0
 8004166:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004174:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800417c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004180:	2200      	movs	r2, #0
 8004182:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 8004186:	2200      	movs	r2, #0
 8004188:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800418a:	480b      	ldr	r0, [pc, #44]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 800418c:	f7fd fc5c 	bl	8001a48 <HAL_DMA_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004196:	f7ff ff75 	bl	8004084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a06      	ldr	r2, [pc, #24]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 800419e:	651a      	str	r2, [r3, #80]	; 0x50
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_ADC_MspInit+0xe0>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041a6:	bf00      	nop
 80041a8:	37a0      	adds	r7, #160	; 0xa0
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	50040000 	.word	0x50040000
 80041b4:	40021000 	.word	0x40021000
 80041b8:	20000094 	.word	0x20000094
 80041bc:	40020008 	.word	0x40020008

080041c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <NMI_Handler+0x4>

080041c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <HardFault_Handler+0x4>

080041cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <MemManage_Handler+0x4>

080041d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d6:	e7fe      	b.n	80041d6 <BusFault_Handler+0x4>

080041d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041dc:	e7fe      	b.n	80041dc <UsageFault_Handler+0x4>

080041de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800420c:	f7fc f84a 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}

08004214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <DMA1_Channel1_IRQHandler+0x10>)
 800421a:	f7fd fd94 	bl	8001d46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000094 	.word	0x20000094

08004228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_Pin);
 800422c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004230:	f7fe f89a 	bl	8002368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <SystemInit+0x20>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	4a05      	ldr	r2, [pc, #20]	; (8004258 <SystemInit+0x20>)
 8004244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800425c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004294 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004260:	f7ff ffea 	bl	8004238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004264:	480c      	ldr	r0, [pc, #48]	; (8004298 <LoopForever+0x6>)
  ldr r1, =_edata
 8004266:	490d      	ldr	r1, [pc, #52]	; (800429c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <LoopForever+0xe>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800426c:	e002      	b.n	8004274 <LoopCopyDataInit>

0800426e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004272:	3304      	adds	r3, #4

08004274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004278:	d3f9      	bcc.n	800426e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800427c:	4c0a      	ldr	r4, [pc, #40]	; (80042a8 <LoopForever+0x16>)
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004280:	e001      	b.n	8004286 <LoopFillZerobss>

08004282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004284:	3204      	adds	r2, #4

08004286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004288:	d3fb      	bcc.n	8004282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800428a:	f000 f811 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800428e:	f7ff fcff 	bl	8003c90 <main>

08004292 <LoopForever>:

LoopForever:
    b LoopForever
 8004292:	e7fe      	b.n	8004292 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004294:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800429c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80042a0:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 80042a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80042a8:	200000f8 	.word	0x200000f8

080042ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC1_IRQHandler>
	...

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4d0d      	ldr	r5, [pc, #52]	; (80042e8 <__libc_init_array+0x38>)
 80042b4:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <__libc_init_array+0x3c>)
 80042b6:	1b64      	subs	r4, r4, r5
 80042b8:	10a4      	asrs	r4, r4, #2
 80042ba:	2600      	movs	r6, #0
 80042bc:	42a6      	cmp	r6, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	4d0b      	ldr	r5, [pc, #44]	; (80042f0 <__libc_init_array+0x40>)
 80042c2:	4c0c      	ldr	r4, [pc, #48]	; (80042f4 <__libc_init_array+0x44>)
 80042c4:	f000 f820 	bl	8004308 <_init>
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	2600      	movs	r6, #0
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d8:	4798      	blx	r3
 80042da:	3601      	adds	r6, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e2:	4798      	blx	r3
 80042e4:	3601      	adds	r6, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	08004360 	.word	0x08004360
 80042ec:	08004360 	.word	0x08004360
 80042f0:	08004360 	.word	0x08004360
 80042f4:	08004364 	.word	0x08004364

080042f8 <memset>:
 80042f8:	4402      	add	r2, r0
 80042fa:	4603      	mov	r3, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d100      	bne.n	8004302 <memset+0xa>
 8004300:	4770      	bx	lr
 8004302:	f803 1b01 	strb.w	r1, [r3], #1
 8004306:	e7f9      	b.n	80042fc <memset+0x4>

08004308 <_init>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr

08004314 <_fini>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

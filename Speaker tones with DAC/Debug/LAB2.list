
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de0  08002de0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de0  08002de0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de0  08002de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08002df4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002df4  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009897  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001768  00000000  00000000  000298d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294c8  00000000  00000000  0002bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007086  00000000  00000000  000551b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd618  00000000  00000000  0005c23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00159856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a2c  00000000  00000000  0015991c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0015b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08002584 	.word	0x08002584

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08002584 	.word	0x08002584

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__gedf2>:
 8000578:	f04f 3cff 	mov.w	ip, #4294967295
 800057c:	e006      	b.n	800058c <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__ledf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	e002      	b.n	800058c <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__cmpdf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800059c:	bf18      	it	ne
 800059e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a2:	d01b      	beq.n	80005dc <__cmpdf2+0x54>
 80005a4:	b001      	add	sp, #4
 80005a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005aa:	bf0c      	ite	eq
 80005ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b0:	ea91 0f03 	teqne	r1, r3
 80005b4:	bf02      	ittt	eq
 80005b6:	ea90 0f02 	teqeq	r0, r2
 80005ba:	2000      	moveq	r0, #0
 80005bc:	4770      	bxeq	lr
 80005be:	f110 0f00 	cmn.w	r0, #0
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf58      	it	pl
 80005c8:	4299      	cmppl	r1, r3
 80005ca:	bf08      	it	eq
 80005cc:	4290      	cmpeq	r0, r2
 80005ce:	bf2c      	ite	cs
 80005d0:	17d8      	asrcs	r0, r3, #31
 80005d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d6:	f040 0001 	orr.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e4:	d102      	bne.n	80005ec <__cmpdf2+0x64>
 80005e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ea:	d107      	bne.n	80005fc <__cmpdf2+0x74>
 80005ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f4:	d1d6      	bne.n	80005a4 <__cmpdf2+0x1c>
 80005f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fa:	d0d3      	beq.n	80005a4 <__cmpdf2+0x1c>
 80005fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__aeabi_cdrcmple>:
 8000604:	4684      	mov	ip, r0
 8000606:	4610      	mov	r0, r2
 8000608:	4662      	mov	r2, ip
 800060a:	468c      	mov	ip, r1
 800060c:	4619      	mov	r1, r3
 800060e:	4663      	mov	r3, ip
 8000610:	e000      	b.n	8000614 <__aeabi_cdcmpeq>
 8000612:	bf00      	nop

08000614 <__aeabi_cdcmpeq>:
 8000614:	b501      	push	{r0, lr}
 8000616:	f7ff ffb7 	bl	8000588 <__cmpdf2>
 800061a:	2800      	cmp	r0, #0
 800061c:	bf48      	it	mi
 800061e:	f110 0f00 	cmnmi.w	r0, #0
 8000622:	bd01      	pop	{r0, pc}

08000624 <__aeabi_dcmpeq>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff fff4 	bl	8000614 <__aeabi_cdcmpeq>
 800062c:	bf0c      	ite	eq
 800062e:	2001      	moveq	r0, #1
 8000630:	2000      	movne	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmplt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffea 	bl	8000614 <__aeabi_cdcmpeq>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmple>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffe0 	bl	8000614 <__aeabi_cdcmpeq>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpge>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffce 	bl	8000604 <__aeabi_cdrcmple>
 8000668:	bf94      	ite	ls
 800066a:	2001      	movls	r0, #1
 800066c:	2000      	movhi	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmpgt>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffc4 	bl	8000604 <__aeabi_cdrcmple>
 800067c:	bf34      	ite	cc
 800067e:	2001      	movcc	r0, #1
 8000680:	2000      	movcs	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000692:	2003      	movs	r0, #3
 8000694:	f000 f942 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f80d 	bl	80006b8 <HAL_InitTick>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	e001      	b.n	80006ae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006aa:	f001 fe31 	bl	8002310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_InitTick+0x6c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d023      	beq.n	8000714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_InitTick+0x70>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_InitTick+0x6c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f941 	bl	800096a <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10f      	bne.n	800070e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d809      	bhi.n	8000708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f919 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_InitTick+0x74>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e007      	b.n	8000718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e004      	b.n	8000718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e001      	b.n	8000718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000004 	.word	0x20000004
 8000728:	20000008 	.word	0x20000008
 800072c:	20000000 	.word	0x20000000

08000730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000004 	.word	0x20000004
 8000754:	20000028 	.word	0x20000028

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000028 	.word	0x20000028

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffee 	bl	8000758 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffde 	bl	8000758 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000004 	.word	0x20000004

080007b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <__NVIC_GetPriorityGrouping+0x18>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	f003 0307 	and.w	r3, r3, #7
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e8:	d301      	bcc.n	80008ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00f      	b.n	800090e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <SysTick_Config+0x40>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f6:	210f      	movs	r1, #15
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f7ff ff8e 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SysTick_Config+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SysTick_Config+0x40>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff47 	bl	80007b8 <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff5c 	bl	8000800 <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ff8e 	bl	8000870 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff5d 	bl	800081c <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffb0 	bl	80008d8 <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e014      	b.n	80009be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f001 fcd7 	bl	8002358 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2202      	movs	r2, #2
 80009ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2201      	movs	r2, #1
 80009ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	795b      	ldrb	r3, [r3, #5]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d101      	bne.n	80009dc <HAL_DAC_Start+0x16>
 80009d8:	2302      	movs	r3, #2
 80009da:	e040      	b.n	8000a5e <HAL_DAC_Start+0x98>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2202      	movs	r2, #2
 80009e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	2201      	movs	r2, #1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10f      	bne.n	8000a26 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d11d      	bne.n	8000a50 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	e014      	b.n	8000a50 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	2102      	movs	r1, #2
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d107      	bne.n	8000a50 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0202 	orr.w	r2, r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2201      	movs	r2, #1
 8000a54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b087      	sub	sp, #28
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3308      	adds	r3, #8
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e004      	b.n	8000a9e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	3314      	adds	r3, #20
 8000a9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	795b      	ldrb	r3, [r3, #5]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d101      	bne.n	8000ad0 <HAL_DAC_ConfigChannel+0x1c>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e12a      	b.n	8000d26 <HAL_DAC_ConfigChannel+0x272>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2202      	movs	r2, #2
 8000ada:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d174      	bne.n	8000bce <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000ae4:	f7ff fe38 	bl	8000758 <HAL_GetTick>
 8000ae8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d134      	bne.n	8000b5a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000af0:	e011      	b.n	8000b16 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000af2:	f7ff fe31 	bl	8000758 <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d90a      	bls.n	8000b16 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f043 0208 	orr.w	r2, r3, #8
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2203      	movs	r2, #3
 8000b10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e107      	b.n	8000d26 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1e6      	bne.n	8000af2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f7ff fe23 	bl	8000770 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	69d2      	ldr	r2, [r2, #28]
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
 8000b34:	e01e      	b.n	8000b74 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b36:	f7ff fe0f 	bl	8000758 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d90a      	bls.n	8000b5a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	f043 0208 	orr.w	r2, r3, #8
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2203      	movs	r2, #3
 8000b54:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e0e5      	b.n	8000d26 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dbe8      	blt.n	8000b36 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fe03 	bl	8000770 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	69d2      	ldr	r2, [r2, #28]
 8000b72:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	ea02 0103 	and.w	r1, r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	6a1a      	ldr	r2, [r3, #32]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	ea02 0103 	and.w	r1, r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d11d      	bne.n	8000c12 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bdc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	221f      	movs	r2, #31
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c18:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	2207      	movs	r2, #7
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cb6:	d104      	bne.n	8000cc2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	e018      	b.n	8000cf4 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d104      	bne.n	8000cd4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e00f      	b.n	8000cf4 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000cd4:	f001 f894 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8000cd8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_DAC_ConfigChannel+0x27c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d904      	bls.n	8000cec <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e003      	b.n	8000cf4 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cf2:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6819      	ldr	r1, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	22c0      	movs	r2, #192	; 0xc0
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	400a      	ands	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	04c4b400 	.word	0x04c4b400

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e166      	b.n	8001012 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 8158 	beq.w	800100c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0203 	and.w	r2, r3, #3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80b2 	beq.w	800100c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	4b61      	ldr	r3, [pc, #388]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eac:	4a60      	ldr	r2, [pc, #384]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb4:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec0:	4a5c      	ldr	r2, [pc, #368]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eea:	d02b      	beq.n	8000f44 <HAL_GPIO_Init+0x210>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d025      	beq.n	8000f40 <HAL_GPIO_Init+0x20c>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a51      	ldr	r2, [pc, #324]	; (800103c <HAL_GPIO_Init+0x308>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d01f      	beq.n	8000f3c <HAL_GPIO_Init+0x208>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a50      	ldr	r2, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x30c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d019      	beq.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x310>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_GPIO_Init+0x200>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <HAL_GPIO_Init+0x314>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1fc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4d      	ldr	r2, [pc, #308]	; (800104c <HAL_GPIO_Init+0x318>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1f8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <HAL_GPIO_Init+0x31c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1f4>
 8000f24:	2307      	movs	r3, #7
 8000f26:	e00e      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f28:	2308      	movs	r3, #8
 8000f2a:	e00c      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	e00a      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f30:	2305      	movs	r3, #5
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f34:	2304      	movs	r3, #4
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f44:	2300      	movs	r3, #0
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f56:	4937      	ldr	r1, [pc, #220]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_GPIO_Init+0x320>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_GPIO_Init+0x320>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f ae91 	bne.w	8000d44 <HAL_GPIO_Init+0x10>
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48001000 	.word	0x48001000
 8001048:	48001400 	.word	0x48001400
 800104c:	48001800 	.word	0x48001800
 8001050:	48001c00 	.word	0x48001c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d102      	bne.n	80010d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	e00b      	b.n	80010e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010de:	d102      	bne.n	80010e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80010e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e4:	e000      	b.n	80010e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80010e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40007000 	.word	0x40007000

080010f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d141      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001106:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800110e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001112:	d131      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001114:	4b47      	ldr	r3, [pc, #284]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800111a:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	4b43      	ldr	r3, [pc, #268]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112c:	4a41      	ldr	r2, [pc, #260]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2232      	movs	r2, #50	; 0x32
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a3f      	ldr	r2, [pc, #252]	; (800123c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	0c9b      	lsrs	r3, r3, #18
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114a:	e002      	b.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d102      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f2      	bne.n	800114c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d158      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e057      	b.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001188:	e04d      	b.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001190:	d141      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119e:	d131      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2232      	movs	r2, #50	; 0x32
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d6:	e002      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ea:	d102      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f2      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d112      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e011      	b.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001214:	e007      	b.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001224:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40007000 	.word	0x40007000
 8001238:	20000008 	.word	0x20000008
 800123c:	431bde83 	.word	0x431bde83

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 bc08 	b.w	8001a64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4b96      	ldr	r3, [pc, #600]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	4b94      	ldr	r3, [pc, #592]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80e4 	beq.w	800143e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	f040 808b 	bne.w	800139a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8087 	bne.w	800139a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x64>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e3df      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_RCC_OscConfig+0x7e>
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012bc:	e005      	b.n	80012ca <HAL_RCC_OscConfig+0x8a>
 80012be:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d223      	bcs.n	8001316 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fda0 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e3c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	496d      	ldr	r1, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4968      	ldr	r1, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e025      	b.n	8001362 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4960      	ldr	r1, [pc, #384]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001334:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	495b      	ldr	r1, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd60 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e380      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001362:	f000 fcc1 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	4950      	ldr	r1, [pc, #320]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_RCC_OscConfig+0x278>)
 8001380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x27c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f996 	bl	80006b8 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d052      	beq.n	800143c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	e364      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d032      	beq.n	8001408 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ae:	f7ff f9d3 	bl	8000758 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b6:	f7ff f9cf 	bl	8000758 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e34d      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a35      	ldr	r2, [pc, #212]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4930      	ldr	r1, [pc, #192]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	492b      	ldr	r1, [pc, #172]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
 8001406:	e01a      	b.n	800143e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001414:	f7ff f9a0 	bl	8000758 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141c:	f7ff f99c 	bl	8000758 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e31a      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1dc>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d073      	beq.n	8001532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b08      	cmp	r3, #8
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x21c>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d10e      	bne.n	8001474 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d063      	beq.n	8001530 <HAL_RCC_OscConfig+0x2f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d15f      	bne.n	8001530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2f7      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x24c>
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d114      	bne.n	80014c0 <HAL_RCC_OscConfig+0x280>
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a02      	ldr	r2, [pc, #8]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 80014b0:	40021000 	.word	0x40021000
 80014b4:	0800259c 	.word	0x0800259c
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000000 	.word	0x20000000
 80014c0:	4ba0      	ldr	r3, [pc, #640]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a9f      	ldr	r2, [pc, #636]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b9d      	ldr	r3, [pc, #628]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a9c      	ldr	r2, [pc, #624]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff f93a 	bl	8000758 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff f936 	bl	8000758 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2b4      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2a8>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff f926 	bl	8000758 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff f922 	bl	8000758 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e2a0      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d0>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d060      	beq.n	8001600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x310>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d119      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d116      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x328>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e27d      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4973      	ldr	r1, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157c:	e040      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d023      	beq.n	80015ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001586:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff f8e1 	bl	8000758 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff f8dd 	bl	8000758 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e25b      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	495f      	ldr	r1, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5c      	ldr	r2, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff f8bd 	bl	8000758 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff f8b9 	bl	8000758 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e237      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03c      	beq.n	8001686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01c      	beq.n	800164e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161a:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff f898 	bl	8000758 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff f894 	bl	8000758 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e212      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ef      	beq.n	800162c <HAL_RCC_OscConfig+0x3ec>
 800164c:	e01b      	b.n	8001686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001654:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff f87b 	bl	8000758 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff f877 	bl	8000758 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1f5      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ef      	bne.n	8001666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a6 	beq.w	80017e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d118      	bne.n	80016fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d8:	f7ff f83e 	bl	8000758 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff f83a 	bl	8000758 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1b8      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x4d8>
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001716:	e029      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d115      	bne.n	800174c <HAL_RCC_OscConfig+0x50c>
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175c:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d016      	beq.n	80017a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7fe fff0 	bl	8000758 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7fe ffec 	bl	8000758 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e168      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ed      	beq.n	800177c <HAL_RCC_OscConfig+0x53c>
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7fe ffd9 	bl	8000758 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7fe ffd5 	bl	8000758 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e151      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	4b80      	ldr	r3, [pc, #512]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ed      	bne.n	80017aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	4a7a      	ldr	r2, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f4:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fa:	4a72      	ldr	r2, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7fe ffa8 	bl	8000758 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180c:	f7fe ffa4 	bl	8000758 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e122      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x5cc>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7fe ff8b 	bl	8000758 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001846:	f7fe ff87 	bl	8000758 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e105      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001858:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800185a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80f9 	beq.w	8001a62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 80cf 	bne.w	8001a18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	429a      	cmp	r2, r3
 800188c:	d12c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	3b01      	subs	r3, #1
 800189a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d123      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d113      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d109      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d071      	beq.n	80019cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d068      	beq.n	80019c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0ac      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001914:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001916:	f7fe ff1f 	bl	8000758 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7fe ff1b 	bl	8000758 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e099      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x788>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800194c:	3a01      	subs	r2, #1
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001956:	0212      	lsls	r2, r2, #8
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800195e:	0852      	lsrs	r2, r2, #1
 8001960:	3a01      	subs	r2, #1
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800196a:	0852      	lsrs	r2, r2, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	0652      	lsls	r2, r2, #25
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001976:	06d2      	lsls	r2, r2, #27
 8001978:	430a      	orrs	r2, r1
 800197a:	4912      	ldr	r1, [pc, #72]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001998:	f7fe fede 	bl	8000758 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7fe feda 	bl	8000758 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e058      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019be:	e050      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e04f      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d144      	bne.n	8001a62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f0:	f7fe feb2 	bl	8000758 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe feae 	bl	8000758 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e02c      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x7b8>
 8001a16:	e024      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d01f      	beq.n	8001a5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7fe fe95 	bl	8000758 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe fe91 	bl	8000758 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e00f      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	4905      	ldr	r1, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x830>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
 8001a5c:	e001      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	feeefffc 	.word	0xfeeefffc

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e11d      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b90      	ldr	r3, [pc, #576]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	498b      	ldr	r1, [pc, #556]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e105      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d908      	bls.n	8001aea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	497b      	ldr	r1, [pc, #492]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d079      	beq.n	8001bea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d11e      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0dc      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001b0e:	f000 f9dd 	bl	8001ecc <RCC_GetSysClockFreqFromPLLSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a70      	ldr	r2, [pc, #448]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d946      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d140      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2e:	4a69      	ldr	r2, [pc, #420]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e035      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b9      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0ad      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0a5      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b7c:	f000 f8b4 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d90f      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b88:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b9c:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 0203 	bic.w	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4947      	ldr	r1, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bba:	f7fe fdcd 	bl	8000758 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7fe fdc9 	bl	8000758 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e077      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 020c 	and.w	r2, r3, #12
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d1eb      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a37      	ldr	r2, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d208      	bcs.n	8001c2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	492b      	ldr	r1, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d210      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 020f 	bic.w	r2, r3, #15
 8001c40:	4923      	ldr	r1, [pc, #140]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_RCC_ClockConfig+0x25c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e036      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4918      	ldr	r1, [pc, #96]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4910      	ldr	r1, [pc, #64]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c98:	f000 f826 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <HAL_RCC_ClockConfig+0x268>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_RCC_ClockConfig+0x26c>)
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fcfb 	bl	80006b8 <HAL_InitTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	04c4b400 	.word	0x04c4b400
 8001cdc:	0800259c 	.word	0x0800259c
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x34>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11e      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e004      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d134      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xac>
 8001d8c:	e005      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d96:	617b      	str	r3, [r7, #20]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	617b      	str	r3, [r7, #20]
      break;
 8001d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de0:	69bb      	ldr	r3, [r7, #24]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	080025ac 	.word	0x080025ac
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f942 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
 8001e36:	e014      	b.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	; 0x58
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff f932 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e68:	d10b      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d913      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2ba0      	cmp	r3, #160	; 0xa0
 8001e74:	d902      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e00d      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b7f      	cmp	r3, #127	; 0x7f
 8001e86:	d902      	bls.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 020f 	bic.w	r2, r3, #15
 8001ea0:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d00b      	beq.n	8001efa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d825      	bhi.n	8001f34 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d008      	beq.n	8001f00 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d11f      	bne.n	8001f34 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ef6:	613b      	str	r3, [r7, #16]
    break;
 8001ef8:	e01f      	b.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001efc:	613b      	str	r3, [r7, #16]
    break;
 8001efe:	e01c      	b.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e005      	b.n	8001f28 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
    break;
 8001f32:	e002      	b.n	8001f3a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
    break;
 8001f38:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	3301      	adds	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	fb03 f202 	mul.w	r2, r3, r2
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0e5b      	lsrs	r3, r3, #25
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f7a:	683b      	ldr	r3, [r7, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	080025ac 	.word	0x080025ac

08001f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9e:	f7fe fb73 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa2:	f000 f8c1 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa6:	f000 f951 	bl	800224c <MX_GPIO_Init>
  MX_DAC1_Init();
 8001faa:	f000 f90f 	bl	80021cc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4857      	ldr	r0, [pc, #348]	; (8002110 <main+0x178>)
 8001fb2:	f7fe fd08 	bl	80009c6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	4855      	ldr	r0, [pc, #340]	; (8002110 <main+0x178>)
 8001fba:	f7fe fd04 	bl	80009c6 <HAL_DAC_Start>

  int triangleValue = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int triangleIncrement = 45;
 8001fc2:	232d      	movs	r3, #45	; 0x2d
 8001fc4:	61bb      	str	r3, [r7, #24]
  int triangleFlag = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28

  int sawValue = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  int sawIncrement = 19;
 8001fce:	2313      	movs	r3, #19
 8001fd0:	617b      	str	r3, [r7, #20]

  int zeroFlag = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]

  float32_t temp = 0;
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  float32_t radian = 0;
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  float32_t radianIncrement = 0.2;
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <main+0x17c>)
 8001fe4:	60fb      	str	r3, [r7, #12]

  uint8_t conv = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	72fb      	strb	r3, [r7, #11]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // ---------------------------- LIGHT -----------------
	  if(HAL_GPIO_ReadPin(GPIOC, BLUE_Pin) == GPIO_PIN_RESET) {
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	484a      	ldr	r0, [pc, #296]	; (8002118 <main+0x180>)
 8001ff0:	f7ff f832 	bl	8001058 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <main+0x70>
		  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002000:	4846      	ldr	r0, [pc, #280]	; (800211c <main+0x184>)
 8002002:	f7ff f841 	bl	8001088 <HAL_GPIO_WritePin>
 8002006:	e005      	b.n	8002014 <main+0x7c>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200e:	4843      	ldr	r0, [pc, #268]	; (800211c <main+0x184>)
 8002010:	f7ff f83a 	bl	8001088 <HAL_GPIO_WritePin>
	  }
	  // ----------------------------------------------------


	  // -----------------------TRIANGLE---------------
	  if(triangleValue > 254) {
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	2bfe      	cmp	r3, #254	; 0xfe
 8002018:	dd02      	ble.n	8002020 <main+0x88>
		  triangleFlag = 1; // go down
 800201a:	2301      	movs	r3, #1
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
 800201e:	e004      	b.n	800202a <main+0x92>
	  } else if (triangleValue < 0.5) {
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	2b00      	cmp	r3, #0
 8002024:	dc01      	bgt.n	800202a <main+0x92>
		  triangleFlag = 0; // go up
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
	  }

	  if(triangleFlag == 1) {
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10b      	bne.n	8002048 <main+0xb0>
		  triangleValue -= triangleIncrement;
 8002030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if(triangleValue > 60000) {
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800203e:	4293      	cmp	r3, r2
 8002040:	dd09      	ble.n	8002056 <main+0xbe>
			  triangleValue = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	e006      	b.n	8002056 <main+0xbe>
		  }
	  } else {
		  if(zeroFlag == 0) {
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <main+0xbe>
			  triangleValue += 0;
		  } else {
			  triangleValue += triangleIncrement;
 800204e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	4413      	add	r3, r2
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
	  }
	  // --------------------------- SAW ----------------


	  if(zeroFlag == 0) {
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <main+0xcc>
		  sawValue += 0;
	  } else {
		  sawValue += sawIncrement;
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4413      	add	r3, r2
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
	  }
	  if(sawValue > 255) {
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	dd01      	ble.n	800206e <main+0xd6>
		  sawValue = 0; // go down
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24


	  // --------------------------- SINE ---------------


	  if(zeroFlag == 0) {
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <main+0xee>
		  radian += 0;
 8002074:	edd7 7a07 	vldr	s15, [r7, #28]
 8002078:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002120 <main+0x188>
 800207c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002080:	edc7 7a07 	vstr	s15, [r7, #28]
 8002084:	e007      	b.n	8002096 <main+0xfe>
	  } else {
		  radian += radianIncrement;
 8002086:	ed97 7a07 	vldr	s14, [r7, #28]
 800208a:	edd7 7a03 	vldr	s15, [r7, #12]
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	edc7 7a07 	vstr	s15, [r7, #28]
	  }
	  if(radian > 6.284) {
 8002096:	69f8      	ldr	r0, [r7, #28]
 8002098:	f7fe fa16 	bl	80004c8 <__aeabi_f2d>
 800209c:	a31a      	add	r3, pc, #104	; (adr r3, 8002108 <main+0x170>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fae7 	bl	8000674 <__aeabi_dcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <main+0x11a>
		  radian = 0; // reset
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
	  }


	  // ------------------------------------------------

	  temp = arm_sin_f32(radian);
 80020b2:	ed97 0a07 	vldr	s0, [r7, #28]
 80020b6:	f000 f9f3 	bl	80024a0 <arm_sin_f32>
 80020ba:	ed87 0a04 	vstr	s0, [r7, #16]
	  conv = (uint8_t) ((int)((temp * 100) + 100));
 80020be:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002124 <main+0x18c>
 80020c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002124 <main+0x18c>
 80020ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80020da:	793b      	ldrb	r3, [r7, #4]
 80020dc:	72fb      	strb	r3, [r7, #11]

	  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, (uint8_t) triangleValue);

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, conv);
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	2208      	movs	r2, #8
 80020e2:	2100      	movs	r1, #0
 80020e4:	480a      	ldr	r0, [pc, #40]	; (8002110 <main+0x178>)
 80020e6:	f7fe fcc0 	bl	8000a6a <HAL_DAC_SetValue>

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, (uint8_t) sawValue);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2208      	movs	r2, #8
 80020f0:	2110      	movs	r1, #16
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <main+0x178>)
 80020f4:	f7fe fcb9 	bl	8000a6a <HAL_DAC_SetValue>


	  zeroFlag = 1;
 80020f8:	2301      	movs	r3, #1
 80020fa:	623b      	str	r3, [r7, #32]


	  HAL_Delay(0.5);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe fb37 	bl	8000770 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC, BLUE_Pin) == GPIO_PIN_RESET) {
 8002102:	e772      	b.n	8001fea <main+0x52>
 8002104:	f3af 8000 	nop.w
 8002108:	e5604189 	.word	0xe5604189
 800210c:	401922d0 	.word	0x401922d0
 8002110:	2000002c 	.word	0x2000002c
 8002114:	3e4ccccd 	.word	0x3e4ccccd
 8002118:	48000800 	.word	0x48000800
 800211c:	48000400 	.word	0x48000400
 8002120:	00000000 	.word	0x00000000
 8002124:	42c80000 	.word	0x42c80000

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b096      	sub	sp, #88	; 0x58
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	2244      	movs	r2, #68	; 0x44
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fa1c 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800214a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800214e:	f7fe ffd3 	bl	80010f8 <HAL_PWREx_ControlVoltageScaling>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002158:	f000 f8d4 	bl	8002304 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800215c:	2310      	movs	r3, #16
 800215e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002160:	2301      	movs	r3, #1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002168:	2360      	movs	r3, #96	; 0x60
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216c:	2302      	movs	r3, #2
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002170:	2301      	movs	r3, #1
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002174:	2301      	movs	r3, #1
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002178:	2328      	movs	r3, #40	; 0x28
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800217c:	2302      	movs	r3, #2
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002180:	2302      	movs	r3, #2
 8002182:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002184:	2302      	movs	r3, #2
 8002186:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff f857 	bl	8001240 <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002198:	f000 f8b4 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2303      	movs	r3, #3
 80021a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021b0:	463b      	mov	r3, r7
 80021b2:	2103      	movs	r1, #3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fc5d 	bl	8001a74 <HAL_RCC_ClockConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021c0:	f000 f8a0 	bl	8002304 <Error_Handler>
  }
}
 80021c4:	bf00      	nop
 80021c6:	3758      	adds	r7, #88	; 0x58
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021d2:	463b      	mov	r3, r7
 80021d4:	2228      	movs	r2, #40	; 0x28
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f9cb 	bl	8002574 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_DAC1_Init+0x78>)
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <MX_DAC1_Init+0x7c>)
 80021e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80021e4:	4817      	ldr	r0, [pc, #92]	; (8002244 <MX_DAC1_Init+0x78>)
 80021e6:	f7fe fbcc 	bl	8000982 <HAL_DAC_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80021f0:	f000 f888 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80021fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002200:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <MX_DAC1_Init+0x78>)
 8002216:	f7fe fc4d 	bl	8000ab4 <HAL_DAC_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8002220:	f000 f870 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2210      	movs	r2, #16
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <MX_DAC1_Init+0x78>)
 800222c:	f7fe fc42 	bl	8000ab4 <HAL_DAC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8002236:	f000 f865 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000002c 	.word	0x2000002c
 8002248:	40007400 	.word	0x40007400

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <MX_GPIO_Init+0xac>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <MX_GPIO_Init+0xac>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_GPIO_Init+0xac>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022b0:	4812      	ldr	r0, [pc, #72]	; (80022fc <MX_GPIO_Init+0xb0>)
 80022b2:	f7fe fee9 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 80022b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <MX_GPIO_Init+0xb4>)
 80022ce:	f7fe fd31 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80022d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_GPIO_Init+0xb0>)
 80022ec:	f7fe fd22 	bl	8000d34 <HAL_GPIO_Init>

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400
 8002300:	48000800 	.word	0x48000800

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	e7fe      	b.n	800230c <Error_Handler+0x8>
	...

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_MspInit+0x44>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_MspInit+0x44>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6613      	str	r3, [r2, #96]	; 0x60
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_MspInit+0x44>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_MspInit+0x44>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_MspInit+0x44>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	; 0x58
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_MspInit+0x44>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a15      	ldr	r2, [pc, #84]	; (80023cc <HAL_DAC_MspInit+0x74>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d124      	bne.n	80023c4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 8002380:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_DAC_MspInit+0x78>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023aa:	2330      	movs	r3, #48	; 0x30
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f7fe fcb8 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40007400 	.word	0x40007400
 80023d0:	40021000 	.word	0x40021000

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <NMI_Handler+0x4>

080023da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <HardFault_Handler+0x4>

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <MemManage_Handler+0x4>

080023e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <BusFault_Handler+0x4>

080023ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <UsageFault_Handler+0x4>

080023f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002420:	f7fe f986 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002450:	f7ff ffea 	bl	8002428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <LoopForever+0x6>)
  ldr r1, =_edata
 8002456:	490d      	ldr	r1, [pc, #52]	; (800248c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <LoopForever+0xe>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800245c:	e002      	b.n	8002464 <LoopCopyDataInit>

0800245e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002462:	3304      	adds	r3, #4

08002464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002468:	d3f9      	bcc.n	800245e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800246c:	4c0a      	ldr	r4, [pc, #40]	; (8002498 <LoopForever+0x16>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002470:	e001      	b.n	8002476 <LoopFillZerobss>

08002472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002474:	3204      	adds	r2, #4

08002476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002478:	d3fb      	bcc.n	8002472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247a:	f000 f857 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247e:	f7ff fd8b 	bl	8001f98 <main>

08002482 <LoopForever>:

LoopForever:
    b LoopForever
 8002482:	e7fe      	b.n	8002482 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002484:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002490:	08002de8 	.word	0x08002de8
  ldr r2, =_sbss
 8002494:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002498:	20000040 	.word	0x20000040

0800249c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_IRQHandler>
	...

080024a0 <arm_sin_f32>:
 80024a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002520 <arm_sin_f32+0x80>
 80024a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80024b4:	d504      	bpl.n	80024c0 <arm_sin_f32+0x20>
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	3b01      	subs	r3, #1
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002524 <arm_sin_f32+0x84>
 80024c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80024cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80024d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80024d4:	ee17 3a90 	vmov	r3, s15
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d21a      	bcs.n	8002516 <arm_sin_f32+0x76>
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <arm_sin_f32+0x88>)
 80024f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80024f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80024f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	edd2 6a00 	vldr	s13, [r2]
 8002504:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002508:	ee20 0a26 	vmul.f32	s0, s0, s13
 800250c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002510:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002514:	4770      	bx	lr
 8002516:	ee30 0a47 	vsub.f32	s0, s0, s14
 800251a:	2101      	movs	r1, #1
 800251c:	2300      	movs	r3, #0
 800251e:	e7e6      	b.n	80024ee <arm_sin_f32+0x4e>
 8002520:	3e22f983 	.word	0x3e22f983
 8002524:	44000000 	.word	0x44000000
 8002528:	080025dc 	.word	0x080025dc

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	4d0d      	ldr	r5, [pc, #52]	; (8002564 <__libc_init_array+0x38>)
 8002530:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	2600      	movs	r6, #0
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	4d0b      	ldr	r5, [pc, #44]	; (800256c <__libc_init_array+0x40>)
 800253e:	4c0c      	ldr	r4, [pc, #48]	; (8002570 <__libc_init_array+0x44>)
 8002540:	f000 f820 	bl	8002584 <_init>
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	2600      	movs	r6, #0
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	08002de0 	.word	0x08002de0
 8002568:	08002de0 	.word	0x08002de0
 800256c:	08002de0 	.word	0x08002de0
 8002570:	08002de4 	.word	0x08002de4

08002574 <memset>:
 8002574:	4402      	add	r2, r0
 8002576:	4603      	mov	r3, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr

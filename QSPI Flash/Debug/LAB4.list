
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006440  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e44  08006e44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006e44  08006e44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e44  08006e44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00050aac  20000010  08006e5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20050abc  08006e5c  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159ba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b52  00000000  00000000  000359fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00039628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6e1  00000000  00000000  0003a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127f7  00000000  00000000  00065ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d123  00000000  00000000  00078498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001855bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  00185680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00189dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080065e8 	.word	0x080065e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080065e8 	.word	0x080065e8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__gedf2>:
 8000578:	f04f 3cff 	mov.w	ip, #4294967295
 800057c:	e006      	b.n	800058c <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__ledf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	e002      	b.n	800058c <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__cmpdf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800059c:	bf18      	it	ne
 800059e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a2:	d01b      	beq.n	80005dc <__cmpdf2+0x54>
 80005a4:	b001      	add	sp, #4
 80005a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005aa:	bf0c      	ite	eq
 80005ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b0:	ea91 0f03 	teqne	r1, r3
 80005b4:	bf02      	ittt	eq
 80005b6:	ea90 0f02 	teqeq	r0, r2
 80005ba:	2000      	moveq	r0, #0
 80005bc:	4770      	bxeq	lr
 80005be:	f110 0f00 	cmn.w	r0, #0
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf58      	it	pl
 80005c8:	4299      	cmppl	r1, r3
 80005ca:	bf08      	it	eq
 80005cc:	4290      	cmpeq	r0, r2
 80005ce:	bf2c      	ite	cs
 80005d0:	17d8      	asrcs	r0, r3, #31
 80005d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d6:	f040 0001 	orr.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e4:	d102      	bne.n	80005ec <__cmpdf2+0x64>
 80005e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ea:	d107      	bne.n	80005fc <__cmpdf2+0x74>
 80005ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f4:	d1d6      	bne.n	80005a4 <__cmpdf2+0x1c>
 80005f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fa:	d0d3      	beq.n	80005a4 <__cmpdf2+0x1c>
 80005fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__aeabi_cdrcmple>:
 8000604:	4684      	mov	ip, r0
 8000606:	4610      	mov	r0, r2
 8000608:	4662      	mov	r2, ip
 800060a:	468c      	mov	ip, r1
 800060c:	4619      	mov	r1, r3
 800060e:	4663      	mov	r3, ip
 8000610:	e000      	b.n	8000614 <__aeabi_cdcmpeq>
 8000612:	bf00      	nop

08000614 <__aeabi_cdcmpeq>:
 8000614:	b501      	push	{r0, lr}
 8000616:	f7ff ffb7 	bl	8000588 <__cmpdf2>
 800061a:	2800      	cmp	r0, #0
 800061c:	bf48      	it	mi
 800061e:	f110 0f00 	cmnmi.w	r0, #0
 8000622:	bd01      	pop	{r0, pc}

08000624 <__aeabi_dcmpeq>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff fff4 	bl	8000614 <__aeabi_cdcmpeq>
 800062c:	bf0c      	ite	eq
 800062e:	2001      	moveq	r0, #1
 8000630:	2000      	movne	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmplt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffea 	bl	8000614 <__aeabi_cdcmpeq>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmple>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffe0 	bl	8000614 <__aeabi_cdcmpeq>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpge>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffce 	bl	8000604 <__aeabi_cdrcmple>
 8000668:	bf94      	ite	ls
 800066a:	2001      	movls	r0, #1
 800066c:	2000      	movhi	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmpgt>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffc4 	bl	8000604 <__aeabi_cdrcmple>
 800067c:	bf34      	ite	cc
 800067e:	2001      	movcc	r0, #1
 8000680:	2000      	movcs	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <__aeabi_d2f>:
 8000688:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800068c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000690:	bf24      	itt	cs
 8000692:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000696:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800069a:	d90d      	bls.n	80006b8 <__aeabi_d2f+0x30>
 800069c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80006a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80006a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80006ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80006b0:	bf08      	it	eq
 80006b2:	f020 0001 	biceq.w	r0, r0, #1
 80006b6:	4770      	bx	lr
 80006b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80006bc:	d121      	bne.n	8000702 <__aeabi_d2f+0x7a>
 80006be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80006c2:	bfbc      	itt	lt
 80006c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006c8:	4770      	bxlt	lr
 80006ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006d2:	f1c2 0218 	rsb	r2, r2, #24
 80006d6:	f1c2 0c20 	rsb	ip, r2, #32
 80006da:	fa10 f30c 	lsls.w	r3, r0, ip
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	bf18      	it	ne
 80006e4:	f040 0001 	orrne.w	r0, r0, #1
 80006e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006f4:	ea40 000c 	orr.w	r0, r0, ip
 80006f8:	fa23 f302 	lsr.w	r3, r3, r2
 80006fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000700:	e7cc      	b.n	800069c <__aeabi_d2f+0x14>
 8000702:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000706:	d107      	bne.n	8000718 <__aeabi_d2f+0x90>
 8000708:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800070c:	bf1e      	ittt	ne
 800070e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000712:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000716:	4770      	bxne	lr
 8000718:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800071c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000720:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000732:	2003      	movs	r0, #3
 8000734:	f000 f960 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f80d 	bl	8000758 <HAL_InitTick>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	e001      	b.n	800074e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074a:	f005 fced 	bl	8006128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074e:	79fb      	ldrb	r3, [r7, #7]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_InitTick+0x6c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d023      	beq.n	80007b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_InitTick+0x70>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x6c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f96d 	bl	8000a62 <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10f      	bne.n	80007ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d809      	bhi.n	80007a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f937 	bl	8000a0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_InitTick+0x74>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e007      	b.n	80007b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e004      	b.n	80007b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e001      	b.n	80007b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000004 	.word	0x20000004
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000000 	.word	0x20000000

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000004 	.word	0x20000004
 80007f4:	2000002c 	.word	0x2000002c

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000002c 	.word	0x2000002c

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff ffee 	bl	80007f8 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000836:	bf00      	nop
 8000838:	f7ff ffde 	bl	80007f8 <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000004 	.word	0x20000004

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <__NVIC_EnableIRQ+0x38>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff29 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff3e 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff31 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa2 	bl	80009b4 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e014      	b.n	8000ab6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d105      	bne.n	8000aa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f005 fb67 	bl	8006170 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	795b      	ldrb	r3, [r3, #5]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d101      	bne.n	8000ade <HAL_DAC_Start_DMA+0x1e>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e0ab      	b.n	8000c36 <HAL_DAC_Start_DMA+0x176>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d12f      	bne.n	8000b50 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a52      	ldr	r2, [pc, #328]	; (8000c40 <HAL_DAC_Start_DMA+0x180>)
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <HAL_DAC_Start_DMA+0x184>)
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4a50      	ldr	r2, [pc, #320]	; (8000c48 <HAL_DAC_Start_DMA+0x188>)
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b16:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d013      	beq.n	8000b46 <HAL_DAC_Start_DMA+0x86>
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d845      	bhi.n	8000bb0 <HAL_DAC_Start_DMA+0xf0>
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_DAC_Start_DMA+0x72>
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d005      	beq.n	8000b3c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000b30:	e03e      	b.n	8000bb0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3308      	adds	r3, #8
 8000b38:	613b      	str	r3, [r7, #16]
        break;
 8000b3a:	e03c      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	330c      	adds	r3, #12
 8000b42:	613b      	str	r3, [r7, #16]
        break;
 8000b44:	e037      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	613b      	str	r3, [r7, #16]
        break;
 8000b4e:	e032      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <HAL_DAC_Start_DMA+0x18c>)
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a3c      	ldr	r2, [pc, #240]	; (8000c50 <HAL_DAC_Start_DMA+0x190>)
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <HAL_DAC_Start_DMA+0x194>)
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b76:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d013      	beq.n	8000ba6 <HAL_DAC_Start_DMA+0xe6>
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d817      	bhi.n	8000bb4 <HAL_DAC_Start_DMA+0xf4>
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_DAC_Start_DMA+0xd2>
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d005      	beq.n	8000b9c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000b90:	e010      	b.n	8000bb4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3314      	adds	r3, #20
 8000b98:	613b      	str	r3, [r7, #16]
        break;
 8000b9a:	e00c      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3318      	adds	r3, #24
 8000ba2:	613b      	str	r3, [r7, #16]
        break;
 8000ba4:	e007      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	331c      	adds	r3, #28
 8000bac:	613b      	str	r3, [r7, #16]
        break;
 8000bae:	e002      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000bb0:	bf00      	nop
 8000bb2:	e000      	b.n	8000bb6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000bb4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6898      	ldr	r0, [r3, #8]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	f000 fac5 	bl	8001164 <HAL_DMA_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	e010      	b.n	8000c02 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000bee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	68d8      	ldr	r0, [r3, #12]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	f000 fab3 	bl	8001164 <HAL_DMA_Start_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e005      	b.n	8000c34 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f043 0204 	orr.w	r2, r3, #4
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08000f01 	.word	0x08000f01
 8000c44:	08000f23 	.word	0x08000f23
 8000c48:	08000f3f 	.word	0x08000f3f
 8000c4c:	08000fa9 	.word	0x08000fa9
 8000c50:	08000fcb 	.word	0x08000fcb
 8000c54:	08000fe7 	.word	0x08000fe7

08000c58 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_DAC_ConfigChannel+0x1c>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e12a      	b.n	8000ef2 <HAL_DAC_ConfigChannel+0x272>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d174      	bne.n	8000d9a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000cb0:	f7ff fda2 	bl	80007f8 <HAL_GetTick>
 8000cb4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d134      	bne.n	8000d26 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000cbc:	e011      	b.n	8000ce2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000cbe:	f7ff fd9b 	bl	80007f8 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d90a      	bls.n	8000ce2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	f043 0208 	orr.w	r2, r3, #8
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e107      	b.n	8000ef2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1e6      	bne.n	8000cbe <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fd8d 	bl	8000810 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	69d2      	ldr	r2, [r2, #28]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000d00:	e01e      	b.n	8000d40 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d02:	f7ff fd79 	bl	80007f8 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d90a      	bls.n	8000d26 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	f043 0208 	orr.w	r2, r3, #8
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2203      	movs	r2, #3
 8000d20:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e0e5      	b.n	8000ef2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dbe8      	blt.n	8000d02 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fd6d 	bl	8000810 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	69d2      	ldr	r2, [r2, #28]
 8000d3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	ea02 0103 	and.w	r1, r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	6a1a      	ldr	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	409a      	lsls	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	21ff      	movs	r1, #255	; 0xff
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	ea02 0103 	and.w	r1, r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	409a      	lsls	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d11d      	bne.n	8000dde <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	221f      	movs	r2, #31
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2207      	movs	r2, #7
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6819      	ldr	r1, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	400a      	ands	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e82:	d104      	bne.n	8000e8e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e018      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e00f      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000ea0:	f002 fd16 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8000ea4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_DAC_ConfigChannel+0x27c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d904      	bls.n	8000eb8 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e003      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ebe:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	22c0      	movs	r2, #192	; 0xc0
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	04c4b400 	.word	0x04c4b400

08000f00 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f004 fbde 	bl	80056d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2201      	movs	r2, #1
 8000f18:	711a      	strb	r2, [r3, #4]
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff fe91 	bl	8000c58 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	f043 0204 	orr.w	r2, r3, #4
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fe87 	bl	8000c6c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	711a      	strb	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f7ff ffd8 	bl	8000f6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	711a      	strb	r2, [r3, #4]
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ffd1 	bl	8000f80 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	f043 0204 	orr.w	r2, r3, #4
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff ffc7 	bl	8000f94 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e08d      	b.n	8001142 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_DMA_Init+0x138>)
 800102e:	429a      	cmp	r2, r3
 8001030:	d80f      	bhi.n	8001052 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_DMA_Init+0x13c>)
 800103a:	4413      	add	r3, r2
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_DMA_Init+0x140>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	009a      	lsls	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a42      	ldr	r2, [pc, #264]	; (8001158 <HAL_DMA_Init+0x144>)
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
 8001050:	e00e      	b.n	8001070 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_DMA_Init+0x148>)
 800105a:	4413      	add	r3, r2
 800105c:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <HAL_DMA_Init+0x140>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	009a      	lsls	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <HAL_DMA_Init+0x14c>)
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800108a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f9b6 	bl	8001434 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010d0:	d102      	bne.n	80010d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <HAL_DMA_Init+0x104>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d80c      	bhi.n	8001118 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f9d6 	bl	80014b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	e008      	b.n	800112a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020407 	.word	0x40020407
 8001150:	bffdfff8 	.word	0xbffdfff8
 8001154:	cccccccd 	.word	0xcccccccd
 8001158:	40020000 	.word	0x40020000
 800115c:	bffdfbf8 	.word	0xbffdfbf8
 8001160:	40020400 	.word	0x40020400

08001164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_DMA_Start_IT+0x20>
 8001180:	2302      	movs	r3, #2
 8001182:	e066      	b.n	8001252 <HAL_DMA_Start_IT+0xee>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d155      	bne.n	8001244 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f8fb 	bl	80013b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 020e 	orr.w	r2, r2, #14
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00f      	b.n	80011fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 020a 	orr.w	r2, r2, #10
 80011fa:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001218:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001230:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e005      	b.n	8001250 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800124c:	2302      	movs	r3, #2
 800124e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f003 031c 	and.w	r3, r3, #28
 800127a:	2204      	movs	r2, #4
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d026      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x7a>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d021      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0204 	bic.w	r2, r2, #4
 80012ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2104      	movs	r1, #4
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d071      	beq.n	80013ae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012d2:	e06c      	b.n	80013ae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 031c 	and.w	r3, r3, #28
 80012dc:	2202      	movs	r2, #2
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02e      	beq.n	8001346 <HAL_DMA_IRQHandler+0xec>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d029      	beq.n	8001346 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10b      	bne.n	8001318 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020a 	bic.w	r2, r2, #10
 800130e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f003 021c 	and.w	r2, r3, #28
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2102      	movs	r1, #2
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d038      	beq.n	80013ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001344:	e033      	b.n	80013ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 031c 	and.w	r3, r3, #28
 800134e:	2208      	movs	r2, #8
 8001350:	409a      	lsls	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d02a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d025      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 020e 	bic.w	r2, r2, #14
 8001372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	f003 021c 	and.w	r2, r3, #28
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
}
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013ce:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 021c 	and.w	r2, r3, #28
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d108      	bne.n	8001418 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001416:	e007      	b.n	8001428 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001444:	429a      	cmp	r2, r3
 8001446:	d80a      	bhi.n	800145e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001454:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6493      	str	r3, [r2, #72]	; 0x48
 800145c:	e007      	b.n	800146e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001468:	4413      	add	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b08      	subs	r3, #8
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001484:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2201      	movs	r2, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40020407 	.word	0x40020407
 80014a4:	4002081c 	.word	0x4002081c
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40020880 	.word	0x40020880

080014b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	1000823f 	.word	0x1000823f
 80014f4:	40020940 	.word	0x40020940

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e166      	b.n	80017d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8158 	beq.w	80017d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d005      	beq.n	8001538 <HAL_GPIO_Init+0x40>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d130      	bne.n	800159a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156e:	2201      	movs	r2, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f003 0201 	and.w	r2, r3, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d017      	beq.n	80015d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d123      	bne.n	800162a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	6939      	ldr	r1, [r7, #16]
 8001626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0203 	and.w	r2, r3, #3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80b2 	beq.w	80017d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6613      	str	r3, [r2, #96]	; 0x60
 8001678:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001684:	4a5c      	ldr	r2, [pc, #368]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ae:	d02b      	beq.n	8001708 <HAL_GPIO_Init+0x210>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_GPIO_Init+0x304>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d025      	beq.n	8001704 <HAL_GPIO_Init+0x20c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_GPIO_Init+0x308>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_Init+0x208>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a50      	ldr	r2, [pc, #320]	; (8001804 <HAL_GPIO_Init+0x30c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_GPIO_Init+0x204>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <HAL_GPIO_Init+0x310>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x200>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4e      	ldr	r2, [pc, #312]	; (800180c <HAL_GPIO_Init+0x314>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1fc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <HAL_GPIO_Init+0x318>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1f8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <HAL_GPIO_Init+0x31c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1f4>
 80016e8:	2307      	movs	r3, #7
 80016ea:	e00e      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016ec:	2308      	movs	r3, #8
 80016ee:	e00c      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f0:	2306      	movs	r3, #6
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f4:	2305      	movs	r3, #5
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x212>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x212>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_GPIO_Init+0x320>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_GPIO_Init+0x320>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_GPIO_Init+0x320>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_GPIO_Init+0x320>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <HAL_GPIO_Init+0x320>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae91 	bne.w	8001508 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	48001400 	.word	0x48001400
 8001810:	48001800 	.word	0x48001800
 8001814:	48001c00 	.word	0x48001c00
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800182a:	e0c9      	b.n	80019c0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800182c:	2201      	movs	r2, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80bc 	beq.w	80019ba <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001842:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_GPIO_DeInit+0x1c0>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186a:	d02b      	beq.n	80018c4 <HAL_GPIO_DeInit+0xa8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a5c      	ldr	r2, [pc, #368]	; (80019e0 <HAL_GPIO_DeInit+0x1c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d025      	beq.n	80018c0 <HAL_GPIO_DeInit+0xa4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a5b      	ldr	r2, [pc, #364]	; (80019e4 <HAL_GPIO_DeInit+0x1c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d01f      	beq.n	80018bc <HAL_GPIO_DeInit+0xa0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_GPIO_DeInit+0x1cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d019      	beq.n	80018b8 <HAL_GPIO_DeInit+0x9c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_GPIO_DeInit+0x1d0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d013      	beq.n	80018b4 <HAL_GPIO_DeInit+0x98>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_GPIO_DeInit+0x1d4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00d      	beq.n	80018b0 <HAL_GPIO_DeInit+0x94>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_GPIO_DeInit+0x1d8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_GPIO_DeInit+0x90>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a56      	ldr	r2, [pc, #344]	; (80019f8 <HAL_GPIO_DeInit+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_GPIO_DeInit+0x8c>
 80018a4:	2307      	movs	r3, #7
 80018a6:	e00e      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018a8:	2308      	movs	r3, #8
 80018aa:	e00c      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018ac:	2306      	movs	r3, #6
 80018ae:	e00a      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e008      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_DeInit+0xaa>
 80018c4:	2300      	movs	r3, #0
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d132      	bne.n	800193c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4947      	ldr	r1, [pc, #284]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4943      	ldr	r1, [pc, #268]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4940      	ldr	r1, [pc, #256]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	493c      	ldr	r1, [pc, #240]	; (80019fc <HAL_GPIO_DeInit+0x1e0>)
 800190a:	4013      	ands	r3, r2
 800190c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <HAL_GPIO_DeInit+0x1c0>)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43da      	mvns	r2, r3
 800192e:	482b      	ldr	r0, [pc, #172]	; (80019dc <HAL_GPIO_DeInit+0x1c0>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	400a      	ands	r2, r1
 8001936:	3302      	adds	r3, #2
 8001938:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2103      	movs	r1, #3
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	08d2      	lsrs	r2, r2, #3
 8001970:	4019      	ands	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2103      	movs	r1, #3
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2101      	movs	r1, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2103      	movs	r1, #3
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f af2f 	bne.w	800182c <HAL_GPIO_DeInit+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40010000 	.word	0x40010000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800
 80019e8:	48000c00 	.word	0x48000c00
 80019ec:	48001000 	.word	0x48001000
 80019f0:	48001400 	.word	0x48001400
 80019f4:	48001800 	.word	0x48001800
 80019f8:	48001c00 	.word	0x48001c00
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fbba 	bl	80051f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7fe feac 	bl	80007f8 <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e092      	b.n	8001bd4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 808b 	bne.w	8001bd4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f004 fbc2 	bl	8006248 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001ac4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fad0 	bl	800206e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_OSPI_Init+0x150>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68d1      	ldr	r1, [r2, #12]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6912      	ldr	r2, [r2, #16]
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0412      	lsls	r2, r2, #16
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6952      	ldr	r2, [r2, #20]
 8001aea:	3a01      	subs	r2, #1
 8001aec:	0212      	lsls	r2, r2, #8
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	69d2      	ldr	r2, [r2, #28]
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0412      	lsls	r2, r2, #16
 8001b0e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	021a      	lsls	r2, r3, #8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fddc 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d146      	bne.n	8001bd4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b7c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d107      	bne.n	8001bbc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0202 	orr.w	r2, r2, #2
 8001bba:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bc4:	d103      	bne.n	8001bce <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
 8001bcc:	e002      	b.n	8001bd4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	f8e0f8f4 	.word	0xf8e0f8f4

08001be4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e015      	b.n	8001c28 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0202 	bic.w	r2, r2, #2
 8001c1a:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f004 fba1 	bl	8006364 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08a      	sub	sp, #40	; 0x28
 8001c36:	af02      	add	r7, sp, #8
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001c3e:	f7fe fddb 	bl	80007f8 <HAL_GetTick>
 8001c42:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d104      	bne.n	8001c60 <HAL_OSPI_Command+0x2e>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c5e:	d10d      	bne.n	8001c7c <HAL_OSPI_Command+0x4a>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b14      	cmp	r3, #20
 8001c64:	d103      	bne.n	8001c6e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d006      	beq.n	8001c7c <HAL_OSPI_Command+0x4a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b24      	cmp	r3, #36	; 0x24
 8001c72:	d153      	bne.n	8001d1c <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d14f      	bne.n	8001d1c <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2200      	movs	r2, #0
 8001c84:	2120      	movs	r1, #32
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fd34 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d148      	bne.n	8001d28 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fd60 	bl	8002764 <OSPI_ConfigCmd>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13c      	bne.n	8001d28 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fd17 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001cd2:	e029      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001ce2:	e021      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10b      	bne.n	8001d04 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	2b24      	cmp	r3, #36	; 0x24
 8001cf2:	d103      	bne.n	8001cfc <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001cfa:	e015      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2214      	movs	r2, #20
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001d02:	e011      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	2b14      	cmp	r3, #20
 8001d0a:	d103      	bne.n	8001d14 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001d12:	e009      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001d1a:	e005      	b.n	8001d28 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2210      	movs	r2, #16
 8001d24:	649a      	str	r2, [r3, #72]	; 0x48
 8001d26:	e000      	b.n	8001d2a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8001d28:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7fe fd5a 	bl	80007f8 <HAL_GetTick>
 8001d44:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3350      	adds	r3, #80	; 0x50
 8001d4c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	649a      	str	r2, [r3, #72]	; 0x48
 8001d5e:	e057      	b.n	8001e10 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d14e      	bne.n	8001e06 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d90:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fca9 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1df      	bne.n	8001d92 <HAL_OSPI_Transmit+0x5e>
 8001dd2:	e000      	b.n	8001dd6 <HAL_OSPI_Transmit+0xa2>
          break;
 8001dd4:	bf00      	nop

      if (status == HAL_OK)
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d119      	bne.n	8001e10 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2201      	movs	r2, #1
 8001de4:	2102      	movs	r1, #2
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fc84 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2202      	movs	r2, #2
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
 8001e04:	e004      	b.n	8001e10 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8001e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b08c      	sub	sp, #48	; 0x30
 8001e1e:	af02      	add	r7, sp, #8
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001e26:	f7fe fce7 	bl	80007f8 <HAL_GetTick>
 8001e2a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3350      	adds	r3, #80	; 0x50
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e44:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2208      	movs	r2, #8
 8001e56:	649a      	str	r2, [r3, #72]	; 0x48
 8001e58:	e07c      	b.n	8001f54 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d172      	bne.n	8001f48 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e98:	d104      	bne.n	8001ea4 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	649a      	str	r2, [r3, #72]	; 0x48
 8001ea2:	e011      	b.n	8001ec8 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001eac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	649a      	str	r2, [r3, #72]	; 0x48
 8001ebc:	e004      	b.n	8001ec8 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2106      	movs	r1, #6
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fc0e 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8001ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d114      	bne.n	8001f10 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1dc      	bne.n	8001ec8 <HAL_OSPI_Receive+0xae>
 8001f0e:	e000      	b.n	8001f12 <HAL_OSPI_Receive+0xf8>
          break;
 8001f10:	bf00      	nop

      if (status == HAL_OK)
 8001f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11c      	bne.n	8001f54 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2201      	movs	r2, #1
 8001f22:	2102      	movs	r1, #2
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fbe5 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8001f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2202      	movs	r2, #2
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
 8001f46:	e005      	b.n	8001f54 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8001f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7fe fc44 	bl	80007f8 <HAL_GetTick>
 8001f70:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001f82:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d164      	bne.n	8002056 <HAL_OSPI_AutoPolling+0xf6>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f94:	d15f      	bne.n	8002056 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fba7 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d158      	bne.n	8002062 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	6852      	ldr	r2, [r2, #4]
 8001fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	6912      	ldr	r2, [r2, #16]
 8001fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6899      	ldr	r1, [r3, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ff2:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ffc:	d104      	bne.n	8002008 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	649a      	str	r2, [r3, #72]	; 0x48
 8002006:	e011      	b.n	800202c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	649a      	str	r2, [r3, #72]	; 0x48
 8002020:	e004      	b.n	800202c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2201      	movs	r2, #1
 8002034:	2108      	movs	r1, #8
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fb5c 	bl	80026f4 <OSPI_WaitFlagStateUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002040:	7ffb      	ldrb	r3, [r7, #31]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2208      	movs	r2, #8
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002054:	e005      	b.n	8002062 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	649a      	str	r2, [r3, #72]	; 0x48
 8002060:	e000      	b.n	8002064 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8002062:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002064:	7ffb      	ldrb	r3, [r7, #31]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	; 0x48
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_OSPIM_Config+0x40>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d105      	bne.n	80020ba <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80020b8:	e004      	b.n	80020c4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80020ba:	2301      	movs	r3, #1
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80020ca:	e01f      	b.n	800210c <HAL_OSPIM_Config+0x80>
 80020cc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80020d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020d4:	3301      	adds	r3, #1
 80020d6:	b2d8      	uxtb	r0, r3
 80020d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80020dc:	f107 0114 	add.w	r1, r7, #20
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	4619      	mov	r1, r3
 80020ec:	f000 fc9c 	bl	8002a28 <OSPIM_GetConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2208      	movs	r2, #8
 8002100:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002106:	3301      	adds	r3, #1
 8002108:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800210c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002110:	2b01      	cmp	r3, #1
 8002112:	d9dd      	bls.n	80020d0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 82de 	bne.w	80026da <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800211e:	4bc6      	ldr	r3, [pc, #792]	; (8002438 <HAL_OSPIM_Config+0x3ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800212a:	4bc3      	ldr	r3, [pc, #780]	; (8002438 <HAL_OSPIM_Config+0x3ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4ac2      	ldr	r2, [pc, #776]	; (8002438 <HAL_OSPIM_Config+0x3ac>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002136:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002142:	4bbe      	ldr	r3, [pc, #760]	; (800243c <HAL_OSPIM_Config+0x3b0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800214e:	4bbb      	ldr	r3, [pc, #748]	; (800243c <HAL_OSPIM_Config+0x3b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4aba      	ldr	r2, [pc, #744]	; (800243c <HAL_OSPIM_Config+0x3b0>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800215a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002166:	49b6      	ldr	r1, [pc, #728]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	443b      	add	r3, r7
 8002176:	3b2c      	subs	r3, #44	; 0x2c
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3b01      	subs	r3, #1
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	48af      	ldr	r0, [pc, #700]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3348      	adds	r3, #72	; 0x48
 8002190:	443b      	add	r3, r7
 8002192:	3b2c      	subs	r3, #44	; 0x2c
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4403      	add	r3, r0
 80021a0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80021a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3348      	adds	r3, #72	; 0x48
 80021ae:	443b      	add	r3, r7
 80021b0:	3b34      	subs	r3, #52	; 0x34
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a1 	beq.w	80022fc <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80021ba:	49a1      	ldr	r1, [pc, #644]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80021bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	3348      	adds	r3, #72	; 0x48
 80021c8:	443b      	add	r3, r7
 80021ca:	3b34      	subs	r3, #52	; 0x34
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	489a      	ldr	r0, [pc, #616]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80021d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	3348      	adds	r3, #72	; 0x48
 80021e4:	443b      	add	r3, r7
 80021e6:	3b34      	subs	r3, #52	; 0x34
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f021 0201 	bic.w	r2, r1, #1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4403      	add	r3, r0
 80021f4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80021f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3348      	adds	r3, #72	; 0x48
 8002202:	443b      	add	r3, r7
 8002204:	3b30      	subs	r3, #48	; 0x30
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01d      	beq.n	8002248 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800220c:	498c      	ldr	r1, [pc, #560]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 800220e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3348      	adds	r3, #72	; 0x48
 800221a:	443b      	add	r3, r7
 800221c:	3b30      	subs	r3, #48	; 0x30
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3b01      	subs	r3, #1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	4885      	ldr	r0, [pc, #532]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 800222a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	3348      	adds	r3, #72	; 0x48
 8002236:	443b      	add	r3, r7
 8002238:	3b30      	subs	r3, #48	; 0x30
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3b01      	subs	r3, #1
 800223e:	f021 0210 	bic.w	r2, r1, #16
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4403      	add	r3, r0
 8002246:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3348      	adds	r3, #72	; 0x48
 8002254:	443b      	add	r3, r7
 8002256:	3b28      	subs	r3, #40	; 0x28
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d021      	beq.n	80022a2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800225e:	4978      	ldr	r1, [pc, #480]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	3348      	adds	r3, #72	; 0x48
 800226c:	443b      	add	r3, r7
 800226e:	3b28      	subs	r3, #40	; 0x28
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	4870      	ldr	r0, [pc, #448]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	443b      	add	r3, r7
 800228e:	3b28      	subs	r3, #40	; 0x28
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4403      	add	r3, r0
 80022a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80022a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3348      	adds	r3, #72	; 0x48
 80022ae:	443b      	add	r3, r7
 80022b0:	3b24      	subs	r3, #36	; 0x24
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d021      	beq.n	80022fc <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80022b8:	4961      	ldr	r1, [pc, #388]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80022ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3348      	adds	r3, #72	; 0x48
 80022c6:	443b      	add	r3, r7
 80022c8:	3b24      	subs	r3, #36	; 0x24
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	4859      	ldr	r0, [pc, #356]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80022da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3348      	adds	r3, #72	; 0x48
 80022e6:	443b      	add	r3, r7
 80022e8:	3b24      	subs	r3, #36	; 0x24
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	3348      	adds	r3, #72	; 0x48
 800230e:	443b      	add	r3, r7
 8002310:	3b34      	subs	r3, #52	; 0x34
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4299      	cmp	r1, r3
 8002316:	d038      	beq.n	800238a <HAL_OSPIM_Config+0x2fe>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3348      	adds	r3, #72	; 0x48
 800232a:	443b      	add	r3, r7
 800232c:	3b30      	subs	r3, #48	; 0x30
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4299      	cmp	r1, r3
 8002332:	d02a      	beq.n	800238a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3348      	adds	r3, #72	; 0x48
 8002346:	443b      	add	r3, r7
 8002348:	3b2c      	subs	r3, #44	; 0x2c
 800234a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800234c:	4299      	cmp	r1, r3
 800234e:	d01c      	beq.n	800238a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	3348      	adds	r3, #72	; 0x48
 8002362:	443b      	add	r3, r7
 8002364:	3b28      	subs	r3, #40	; 0x28
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4299      	cmp	r1, r3
 800236a:	d00e      	beq.n	800238a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6919      	ldr	r1, [r3, #16]
 8002370:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3348      	adds	r3, #72	; 0x48
 800237e:	443b      	add	r3, r7
 8002380:	3b24      	subs	r3, #36	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002384:	4299      	cmp	r1, r3
 8002386:	f040 80d3 	bne.w	8002530 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800238a:	492d      	ldr	r1, [pc, #180]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 800238c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	3348      	adds	r3, #72	; 0x48
 800239a:	443b      	add	r3, r7
 800239c:	3b34      	subs	r3, #52	; 0x34
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	4825      	ldr	r0, [pc, #148]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80023aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3348      	adds	r3, #72	; 0x48
 80023b8:	443b      	add	r3, r7
 80023ba:	3b34      	subs	r3, #52	; 0x34
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f021 0201 	bic.w	r2, r1, #1
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4403      	add	r3, r0
 80023c8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80023ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	443b      	add	r3, r7
 80023da:	3b30      	subs	r3, #48	; 0x30
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01f      	beq.n	8002422 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80023e2:	4917      	ldr	r1, [pc, #92]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 80023e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3348      	adds	r3, #72	; 0x48
 80023f2:	443b      	add	r3, r7
 80023f4:	3b30      	subs	r3, #48	; 0x30
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002402:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	3348      	adds	r3, #72	; 0x48
 8002410:	443b      	add	r3, r7
 8002412:	3b30      	subs	r3, #48	; 0x30
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3b01      	subs	r3, #1
 8002418:	f021 0210 	bic.w	r2, r1, #16
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002422:	4907      	ldr	r1, [pc, #28]	; (8002440 <HAL_OSPIM_Config+0x3b4>)
 8002424:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	3348      	adds	r3, #72	; 0x48
 8002432:	443b      	add	r3, r7
 8002434:	3b2c      	subs	r3, #44	; 0x2c
 8002436:	e005      	b.n	8002444 <HAL_OSPIM_Config+0x3b8>
 8002438:	a0001000 	.word	0xa0001000
 800243c:	a0001400 	.word	0xa0001400
 8002440:	50061c00 	.word	0x50061c00
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	48a6      	ldr	r0, [pc, #664]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 8002450:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3348      	adds	r3, #72	; 0x48
 800245e:	443b      	add	r3, r7
 8002460:	3b2c      	subs	r3, #44	; 0x2c
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3b01      	subs	r3, #1
 8002466:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4403      	add	r3, r0
 800246e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002470:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	443b      	add	r3, r7
 8002480:	3b28      	subs	r3, #40	; 0x28
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d023      	beq.n	80024d0 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002488:	4997      	ldr	r1, [pc, #604]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800248a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3348      	adds	r3, #72	; 0x48
 8002498:	443b      	add	r3, r7
 800249a:	3b28      	subs	r3, #40	; 0x28
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	488f      	ldr	r0, [pc, #572]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 80024ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3348      	adds	r3, #72	; 0x48
 80024ba:	443b      	add	r3, r7
 80024bc:	3b28      	subs	r3, #40	; 0x28
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80024d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	3348      	adds	r3, #72	; 0x48
 80024de:	443b      	add	r3, r7
 80024e0:	3b24      	subs	r3, #36	; 0x24
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80024e8:	497f      	ldr	r1, [pc, #508]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 80024ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3348      	adds	r3, #72	; 0x48
 80024f8:	443b      	add	r3, r7
 80024fa:	3b24      	subs	r3, #36	; 0x24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	4877      	ldr	r0, [pc, #476]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800250c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	3348      	adds	r3, #72	; 0x48
 800251a:	443b      	add	r3, r7
 800251c:	3b24      	subs	r3, #36	; 0x24
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4403      	add	r3, r0
 800252e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002530:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	3b01      	subs	r3, #1
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002544:	025b      	lsls	r3, r3, #9
 8002546:	431a      	orrs	r2, r3
 8002548:	4967      	ldr	r1, [pc, #412]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	3b01      	subs	r3, #1
 8002550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800255a:	4a63      	ldr	r2, [pc, #396]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 0203 	bic.w	r2, r3, #3
 800256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	431a      	orrs	r2, r3
 8002572:	495d      	ldr	r1, [pc, #372]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800258c:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	431a      	orrs	r2, r3
 80025a4:	4950      	ldr	r1, [pc, #320]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	f042 0210 	orr.w	r2, r2, #16
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80025c2:	4a49      	ldr	r2, [pc, #292]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80025d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	431a      	orrs	r2, r3
 80025de:	4942      	ldr	r1, [pc, #264]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e01c      	b.n	8002630 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80025fe:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	431a      	orrs	r2, r3
 800261a:	4933      	ldr	r1, [pc, #204]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	3b01      	subs	r3, #1
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d019      	beq.n	8002670 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800263c:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	3b01      	subs	r3, #1
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	431a      	orrs	r2, r3
 8002658:	4923      	ldr	r1, [pc, #140]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	3b01      	subs	r3, #1
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e01c      	b.n	80026aa <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	3b01      	subs	r3, #1
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002690:	069b      	lsls	r3, r3, #26
 8002692:	431a      	orrs	r2, r3
 8002694:	4914      	ldr	r1, [pc, #80]	; (80026e8 <HAL_OSPIM_Config+0x65c>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	3b01      	subs	r3, #1
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80026aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_OSPIM_Config+0x660>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_OSPIM_Config+0x660>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80026c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_OSPIM_Config+0x664>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_OSPIM_Config+0x664>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80026da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3748      	adds	r7, #72	; 0x48
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	50061c00 	.word	0x50061c00
 80026ec:	a0001000 	.word	0xa0001000
 80026f0:	a0001400 	.word	0xa0001400

080026f4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002704:	e01a      	b.n	800273c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d016      	beq.n	800273c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7fe f873 	bl	80007f8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e00e      	b.n	800275a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1d6      	bne.n	8002706 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002780:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d114      	bne.n	80027d2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027b0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027ba:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80027c4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e013      	b.n	80027fa <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027da:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80027e4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027ee:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	431a      	orrs	r2, r3
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	4319      	orrs	r1, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	430b      	orrs	r3, r1
 8002830:	431a      	orrs	r2, r3
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 021f 	bic.w	r2, r3, #31
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	431a      	orrs	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3a01      	subs	r2, #1
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8099 	beq.w	80029a0 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d055      	beq.n	8002922 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01e      	beq.n	80028bc <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <OSPI_ConfigCmd+0x2c0>)
 8002884:	4013      	ands	r3, r2
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68d1      	ldr	r1, [r2, #12]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6952      	ldr	r2, [r2, #20]
 800288e:	4311      	orrs	r1, r2
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	6912      	ldr	r2, [r2, #16]
 8002894:	4311      	orrs	r1, r2
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	69d2      	ldr	r2, [r2, #28]
 800289a:	4311      	orrs	r1, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a0:	4311      	orrs	r1, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6a12      	ldr	r2, [r2, #32]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028ac:	4311      	orrs	r1, r2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b2:	430a      	orrs	r2, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e028      	b.n	800290e <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	68d1      	ldr	r1, [r2, #12]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	6952      	ldr	r2, [r2, #20]
 80028d0:	4311      	orrs	r1, r2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6912      	ldr	r2, [r2, #16]
 80028d6:	4311      	orrs	r1, r2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	69d2      	ldr	r2, [r2, #28]
 80028dc:	4311      	orrs	r1, r2
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e2:	4311      	orrs	r1, r2
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6a12      	ldr	r2, [r2, #32]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f8:	d109      	bne.n	800290e <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d105      	bne.n	800290e <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	6992      	ldr	r2, [r2, #24]
 800291e:	649a      	str	r2, [r3, #72]	; 0x48
 8002920:	e078      	b.n	8002a14 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002932:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68d1      	ldr	r1, [r2, #12]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	6952      	ldr	r2, [r2, #20]
 800293e:	4311      	orrs	r1, r2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	6912      	ldr	r2, [r2, #16]
 8002944:	4311      	orrs	r1, r2
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294a:	4311      	orrs	r1, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002950:	430a      	orrs	r2, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e01d      	b.n	8002996 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4319      	orrs	r1, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	430b      	orrs	r3, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002980:	d109      	bne.n	8002996 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002986:	2b08      	cmp	r3, #8
 8002988:	d105      	bne.n	8002996 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e039      	b.n	8002a14 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d030      	beq.n	8002a0a <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d017      	beq.n	80029e0 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	69d1      	ldr	r1, [r2, #28]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029c4:	4311      	orrs	r1, r2
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	6a12      	ldr	r2, [r2, #32]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d0:	4311      	orrs	r1, r2
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00e      	b.n	80029fe <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	69d9      	ldr	r1, [r3, #28]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	4319      	orrs	r1, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	430b      	orrs	r3, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	6992      	ldr	r2, [r2, #24]
 8002a06:	649a      	str	r2, [r3, #72]	; 0x48
 8002a08:	e004      	b.n	8002a14 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	f0ffc0c0 	.word	0xf0ffc0c0

08002a28 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <OSPIM_GetConfig+0x26>
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d802      	bhi.n	8002a4e <OSPIM_GetConfig+0x26>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
 8002a52:	e08e      	b.n	8002b72 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d101      	bne.n	8002a7c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <OSPIM_GetConfig+0x158>)
 8002a7a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e074      	b.n	8002b6c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8002a82:	4a40      	ldr	r2, [pc, #256]	; (8002b84 <OSPIM_GetConfig+0x15c>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4053      	eors	r3, r2
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4053      	eors	r3, r2
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4053      	eors	r3, r2
 8002ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d018      	beq.n	8002b2a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4053      	eors	r3, r2
 8002afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d111      	bne.n	8002b2a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3301      	adds	r3, #1
 8002b14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	e005      	b.n	8002b2a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3301      	adds	r3, #1
 8002b22:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d018      	beq.n	8002b66 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4053      	eors	r3, r2
 8002b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d111      	bne.n	8002b66 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	611a      	str	r2, [r3, #16]
 8002b58:	e005      	b.n	8002b66 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d987      	bls.n	8002a82 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	04040222 	.word	0x04040222
 8002b84:	50061c00 	.word	0x50061c00

08002b88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d102      	bne.n	8002ba0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9e:	e00b      	b.n	8002bb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d102      	bne.n	8002bb6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb4:	e000      	b.n	8002bb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bb6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d141      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d131      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be4:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf4:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfc:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c04:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2232      	movs	r2, #50	; 0x32
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1a:	e002      	b.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d102      	bne.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f2      	bne.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d158      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e057      	b.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c58:	e04d      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d141      	bne.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d131      	bne.n	8002cd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c70:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c88:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2232      	movs	r2, #50	; 0x32
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca6:	e002      	b.n	8002cae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d102      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f2      	bne.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d112      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e011      	b.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ce4:	e007      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40007000 	.word	0x40007000
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	431bde83 	.word	0x431bde83

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f000 bc08 	b.w	8003534 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d24:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2e:	4b94      	ldr	r3, [pc, #592]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80e4 	beq.w	8002f0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4c>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	f040 808b 	bne.w	8002e6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 8087 	bne.w	8002e6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d5c:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x64>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e3df      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_RCC_OscConfig+0x7e>
 8002d84:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8c:	e005      	b.n	8002d9a <HAL_RCC_OscConfig+0x8a>
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d223      	bcs.n	8002de6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fda0 	bl	80038e8 <RCC_SetFlashLatencyFromMSIRange>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e3c0      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a72      	ldr	r2, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	496d      	ldr	r1, [pc, #436]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd0:	4b6b      	ldr	r3, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	4968      	ldr	r1, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e025      	b.n	8002e32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de6:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a65      	ldr	r2, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4960      	ldr	r1, [pc, #384]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e04:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	495b      	ldr	r1, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fd60 	bl	80038e8 <RCC_SetFlashLatencyFromMSIRange>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e380      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e32:	f000 fcc1 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	4950      	ldr	r1, [pc, #320]	; (8002f84 <HAL_RCC_OscConfig+0x274>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a4e      	ldr	r2, [pc, #312]	; (8002f88 <HAL_RCC_OscConfig+0x278>)
 8002e50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e52:	4b4e      	ldr	r3, [pc, #312]	; (8002f8c <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fc7e 	bl	8000758 <HAL_InitTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d052      	beq.n	8002f0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	e364      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d032      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd fcbb 	bl	80007f8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e86:	f7fd fcb7 	bl	80007f8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e34d      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4930      	ldr	r1, [pc, #192]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	492b      	ldr	r1, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
 8002ed6:	e01a      	b.n	8002f0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee4:	f7fd fc88 	bl	80007f8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eec:	f7fd fc84 	bl	80007f8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e31a      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x1dc>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d073      	beq.n	8003002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x21c>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d10e      	bne.n	8002f44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d063      	beq.n	8003000 <HAL_RCC_OscConfig+0x2f0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d15f      	bne.n	8003000 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e2f7      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x24c>
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e025      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d114      	bne.n	8002f90 <HAL_RCC_OscConfig+0x280>
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a02      	ldr	r2, [pc, #8]	; (8002f80 <HAL_RCC_OscConfig+0x270>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x298>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	08006600 	.word	0x08006600
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	4ba0      	ldr	r3, [pc, #640]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a9f      	ldr	r2, [pc, #636]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b9d      	ldr	r3, [pc, #628]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a9c      	ldr	r2, [pc, #624]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fc22 	bl	80007f8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fd fc1e 	bl	80007f8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e2b4      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fca:	4b92      	ldr	r3, [pc, #584]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x2a8>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fc0e 	bl	80007f8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fd fc0a 	bl	80007f8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2a0      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2d0>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d060      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x310>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d119      	bne.n	800304e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d116      	bne.n	800304e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	4b7c      	ldr	r3, [pc, #496]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_OscConfig+0x328>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e27d      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	4973      	ldr	r1, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800304c:	e040      	b.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d023      	beq.n	800309e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003056:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fd fbc9 	bl	80007f8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306a:	f7fd fbc5 	bl	80007f8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e25b      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307c:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	495f      	ldr	r1, [pc, #380]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	e018      	b.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309e:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5c      	ldr	r2, [pc, #368]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fd fba5 	bl	80007f8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fd fba1 	bl	80007f8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e237      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d03c      	beq.n	8003156 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01c      	beq.n	800311e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fd fb80 	bl	80007f8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fd fb7c 	bl	80007f8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e212      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ef      	beq.n	80030fc <HAL_RCC_OscConfig+0x3ec>
 800311c:	e01b      	b.n	8003156 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003124:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fd fb63 	bl	80007f8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fd fb5f 	bl	80007f8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1f5      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ef      	bne.n	8003136 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a6 	beq.w	80032b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	6593      	str	r3, [r2, #88]	; 0x58
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318c:	2301      	movs	r3, #1
 800318e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x508>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d118      	bne.n	80031ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_OscConfig+0x508>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_RCC_OscConfig+0x508>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a8:	f7fd fb26 	bl	80007f8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b0:	f7fd fb22 	bl	80007f8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1b8      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCC_OscConfig+0x508>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4d8>
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e6:	e029      	b.n	800323c <HAL_RCC_OscConfig+0x52c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d115      	bne.n	800321c <HAL_RCC_OscConfig+0x50c>
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_RCC_OscConfig+0x504>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x52c>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	4b9d      	ldr	r3, [pc, #628]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	4a9c      	ldr	r2, [pc, #624]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322c:	4b99      	ldr	r3, [pc, #612]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	4a98      	ldr	r2, [pc, #608]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d016      	beq.n	8003272 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fd fad8 	bl	80007f8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fd fad4 	bl	80007f8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e168      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003262:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ed      	beq.n	800324c <HAL_RCC_OscConfig+0x53c>
 8003270:	e015      	b.n	800329e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fd fac1 	bl	80007f8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fabd 	bl	80007f8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e151      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003290:	4b80      	ldr	r3, [pc, #512]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ed      	bne.n	800327a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329e:	7ffb      	ldrb	r3, [r7, #31]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a7a      	ldr	r2, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03c      	beq.n	8003336 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032c4:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80032c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ca:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fd fa90 	bl	80007f8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032dc:	f7fd fa8c 	bl	80007f8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e122      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ee:	4b69      	ldr	r3, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80032f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCC_OscConfig+0x5cc>
 80032fc:	e01b      	b.n	8003336 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003304:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fd fa73 	bl	80007f8 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003316:	f7fd fa6f 	bl	80007f8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e105      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800332a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80f9 	beq.w	8003532 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 80cf 	bne.w	80034e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800334a:	4b52      	ldr	r3, [pc, #328]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	429a      	cmp	r2, r3
 800335c:	d12c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	3b01      	subs	r3, #1
 800336a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d123      	bne.n	80033b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d11b      	bne.n	80033b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d113      	bne.n	80033b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d109      	bne.n	80033b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d071      	beq.n	800349c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d068      	beq.n	8003490 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033be:	4b35      	ldr	r3, [pc, #212]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ca:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0ac      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 80033e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e6:	f7fd fa07 	bl	80007f8 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fd fa03 	bl	80007f8 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e099      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340c:	4b21      	ldr	r3, [pc, #132]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x788>)
 8003412:	4013      	ands	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341c:	3a01      	subs	r2, #1
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003426:	0212      	lsls	r2, r2, #8
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
 8003432:	0552      	lsls	r2, r2, #21
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343a:	0852      	lsrs	r2, r2, #1
 800343c:	3a01      	subs	r2, #1
 800343e:	0652      	lsls	r2, r2, #25
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003446:	06d2      	lsls	r2, r2, #27
 8003448:	430a      	orrs	r2, r1
 800344a:	4912      	ldr	r1, [pc, #72]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800344c:	4313      	orrs	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003468:	f7fd f9c6 	bl	80007f8 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd f9c2 	bl	80007f8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e058      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RCC_OscConfig+0x784>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800348e:	e050      	b.n	8003532 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04f      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
 8003494:	40021000 	.word	0x40021000
 8003498:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d144      	bne.n	8003532 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c0:	f7fd f99a 	bl	80007f8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fd f996 	bl	80007f8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e02c      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x7b8>
 80034e6:	e024      	b.n	8003532 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d01f      	beq.n	800352e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 80034f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fd f97d 	bl	80007f8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fd f979 	bl	80007f8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e00f      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4905      	ldr	r1, [pc, #20]	; (800353c <HAL_RCC_OscConfig+0x82c>)
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x830>)
 8003528:	4013      	ands	r3, r2
 800352a:	60cb      	str	r3, [r1, #12]
 800352c:	e001      	b.n	8003532 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	feeefffc 	.word	0xfeeefffc

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e11d      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b90      	ldr	r3, [pc, #576]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b8d      	ldr	r3, [pc, #564]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	498b      	ldr	r1, [pc, #556]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e105      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b81      	ldr	r3, [pc, #516]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	497b      	ldr	r1, [pc, #492]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d079      	beq.n	80036ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d11e      	bne.n	800360c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b75      	ldr	r3, [pc, #468]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0dc      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035de:	f000 f9dd 	bl	800399c <RCC_GetSysClockFreqFromPLLSource>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a70      	ldr	r2, [pc, #448]	; (80037a8 <HAL_RCC_ClockConfig+0x264>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d946      	bls.n	8003678 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035ea:	4b6e      	ldr	r3, [pc, #440]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d140      	bne.n	8003678 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	4a69      	ldr	r2, [pc, #420]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e035      	b.n	8003678 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d107      	bne.n	8003624 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d115      	bne.n	800364c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b9      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362c:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0ad      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0a5      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800364c:	f000 f8b4 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003650:	4603      	mov	r3, r0
 8003652:	4a55      	ldr	r2, [pc, #340]	; (80037a8 <HAL_RCC_ClockConfig+0x264>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d90f      	bls.n	8003678 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003658:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800366e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003672:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003678:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 0203 	bic.w	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4947      	ldr	r1, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368a:	f7fd f8b5 	bl	80007f8 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7fd f8b1 	bl	80007f8 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e077      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 020c 	and.w	r2, r3, #12
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d1eb      	bne.n	8003692 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d105      	bne.n	80036cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036c0:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	492b      	ldr	r1, [pc, #172]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d210      	bcs.n	800372a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 020f 	bic.w	r2, r3, #15
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_ClockConfig+0x25c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e036      	b.n	8003798 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 f826 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCC_ClockConfig+0x260>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	490c      	ldr	r1, [pc, #48]	; (80037ac <HAL_RCC_ClockConfig+0x268>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x26c>)
 8003786:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc ffe3 	bl	8000758 <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]

  return status;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	04c4b400 	.word	0x04c4b400
 80037ac:	08006600 	.word	0x08006600
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x34>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d121      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d11e      	bne.n	800382a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	e005      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003814:	4a2b      	ldr	r2, [pc, #172]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10d      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d102      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003830:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e004      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d101      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800383c:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_RCC_GetSysClockFreq+0x114>)
 800383e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d134      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d003      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0xa6>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d003      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0xac>
 800385c:	e005      	b.n	800386a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003860:	617b      	str	r3, [r7, #20]
      break;
 8003862:	e005      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003866:	617b      	str	r3, [r7, #20]
      break;
 8003868:	e002      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	617b      	str	r3, [r7, #20]
      break;
 800386e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3301      	adds	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	fb03 f202 	mul.w	r2, r3, r2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	0e5b      	lsrs	r3, r3, #25
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	3301      	adds	r3, #1
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038b0:	69bb      	ldr	r3, [r7, #24]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08006610 	.word	0x08006610
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003900:	f7ff f942 	bl	8002b88 <HAL_PWREx_GetVoltageRange>
 8003904:	6178      	str	r0, [r7, #20]
 8003906:	e014      	b.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a21      	ldr	r2, [pc, #132]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003920:	f7ff f932 	bl	8002b88 <HAL_PWREx_GetVoltageRange>
 8003924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d10b      	bne.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b80      	cmp	r3, #128	; 0x80
 800393e:	d913      	bls.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2ba0      	cmp	r3, #160	; 0xa0
 8003944:	d902      	bls.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003946:	2302      	movs	r3, #2
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e00d      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800394c:	2301      	movs	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e00a      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b7f      	cmp	r3, #127	; 0x7f
 8003956:	d902      	bls.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003958:	2302      	movs	r3, #2
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e004      	b.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d101      	bne.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 020f 	bic.w	r2, r3, #15
 8003970:	4909      	ldr	r1, [pc, #36]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	40022000 	.word	0x40022000

0800399c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d00b      	beq.n	80039ca <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d825      	bhi.n	8003a04 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d008      	beq.n	80039d0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d11f      	bne.n	8003a04 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039c6:	613b      	str	r3, [r7, #16]
    break;
 80039c8:	e01f      	b.n	8003a0a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80039ca:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80039cc:	613b      	str	r3, [r7, #16]
    break;
 80039ce:	e01c      	b.n	8003a0a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e005      	b.n	80039f8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	613b      	str	r3, [r7, #16]
    break;
 8003a02:	e002      	b.n	8003a0a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
    break;
 8003a08:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	fb03 f202 	mul.w	r2, r3, r2
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	0e5b      	lsrs	r3, r3, #25
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a4a:	683b      	ldr	r3, [r7, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	007a1200 	.word	0x007a1200
 8003a64:	08006610 	.word	0x08006610

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a70:	2300      	movs	r3, #0
 8003a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a74:	2300      	movs	r3, #0
 8003a76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d040      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d02a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a8c:	2b80      	cmp	r3, #128	; 0x80
 8003a8e:	d825      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a90:	2b60      	cmp	r3, #96	; 0x60
 8003a92:	d026      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d821      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d006      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d81d      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d010      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003aa8:	e018      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aaa:	4b89      	ldr	r3, [pc, #548]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a88      	ldr	r2, [pc, #544]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ab6:	e015      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fb02 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac8:	e00c      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3320      	adds	r3, #32
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fbed 	bl	80042b0 <RCCEx_PLLSAI2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ada:	e003      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aea:	4b79      	ldr	r3, [pc, #484]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af8:	4975      	ldr	r1, [pc, #468]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b00:	e001      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d047      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d030      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d82a      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b26:	d02a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2c:	d824      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b38:	d81e      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	d010      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b44:	e018      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4a61      	ldr	r2, [pc, #388]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b52:	e015      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fab4 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b64:	e00c      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3320      	adds	r3, #32
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb9f 	bl	80042b0 <RCCEx_PLLSAI2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	74fb      	strb	r3, [r7, #19]
      break;
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	494e      	ldr	r1, [pc, #312]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b9c:	e001      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 809f 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be6:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf2:	f7fc fe01 	bl	80007f8 <HAL_GetTick>
 8003bf6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fc fdfd 	bl	80007f8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ef      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d15b      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d019      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c6a:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d016      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fc fdbc 	bl	80007f8 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c82:	e00b      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fc fdb8 	bl	80007f8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d902      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	74fb      	strb	r3, [r7, #19]
            break;
 8003c9a:	e006      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ec      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10c      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc8:	e008      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	74bb      	strb	r3, [r7, #18]
 8003cce:	e005      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cdc:	7c7b      	ldrb	r3, [r7, #17]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4ba0      	ldr	r3, [pc, #640]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	4a9f      	ldr	r2, [pc, #636]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cfa:	4b9a      	ldr	r3, [pc, #616]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 0203 	bic.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	4996      	ldr	r1, [pc, #600]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d1c:	4b91      	ldr	r3, [pc, #580]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 020c 	bic.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	498e      	ldr	r1, [pc, #568]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3e:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	4985      	ldr	r1, [pc, #532]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d60:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	497d      	ldr	r1, [pc, #500]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d82:	4b78      	ldr	r3, [pc, #480]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d90:	4974      	ldr	r1, [pc, #464]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	496c      	ldr	r1, [pc, #432]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc6:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd4:	4963      	ldr	r1, [pc, #396]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de8:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df6:	495b      	ldr	r1, [pc, #364]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e0a:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	4952      	ldr	r1, [pc, #328]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e2c:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	494a      	ldr	r1, [pc, #296]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	4941      	ldr	r1, [pc, #260]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e70:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	4939      	ldr	r1, [pc, #228]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	4930      	ldr	r1, [pc, #192]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ebc:	60d3      	str	r3, [r2, #12]
 8003ebe:	e011      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f8f9 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d04d      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef8:	d108      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f06:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f0a:	e012      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f0c:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	490e      	ldr	r1, [pc, #56]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3a:	d106      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f46:	60d3      	str	r3, [r2, #12]
 8003f48:	e020      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f52:	d109      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a02      	ldr	r2, [pc, #8]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	60d3      	str	r3, [r2, #12]
 8003f60:	e014      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f8a5 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d028      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f98:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa6:	4947      	ldr	r1, [pc, #284]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb8:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a41      	ldr	r2, [pc, #260]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc2:	60d3      	str	r3, [r2, #12]
 8003fc4:	e011      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fce:	d10c      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f876 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01e      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	492f      	ldr	r1, [pc, #188]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2102      	movs	r1, #2
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f851 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004040:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004046:	f023 0204 	bic.w	r2, r3, #4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	491c      	ldr	r1, [pc, #112]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800406a:	f023 0218 	bic.w	r2, r3, #24
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	4913      	ldr	r1, [pc, #76]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040aa:	d105      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000

080040c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040d6:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00e      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040e2:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0203 	and.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d103      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
       ||
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d142      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e03f      	b.n	8004180 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d018      	beq.n	800413a <RCCEx_PLLSAI1_Config+0x72>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d825      	bhi.n	8004158 <RCCEx_PLLSAI1_Config+0x90>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x4e>
 8004110:	2b02      	cmp	r3, #2
 8004112:	d009      	beq.n	8004128 <RCCEx_PLLSAI1_Config+0x60>
 8004114:	e020      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004116:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11d      	bne.n	800415e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004126:	e01a      	b.n	800415e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004128:	4b5d      	ldr	r3, [pc, #372]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d116      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e013      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413a:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004146:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004156:	e006      	b.n	8004166 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e004      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800415e:	bf00      	nop
 8004160:	e002      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004166:	bf00      	nop
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800416e:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4949      	ldr	r1, [pc, #292]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 8086 	bne.w	8004294 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004188:	4b45      	ldr	r3, [pc, #276]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a44      	ldr	r2, [pc, #272]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800418e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fc fb30 	bl	80007f8 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419a:	e009      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419c:	f7fc fb2c 	bl	80007f8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	73fb      	strb	r3, [r7, #15]
        break;
 80041ae:	e005      	b.n	80041bc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b0:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ef      	bne.n	800419c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d168      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d113      	bne.n	80041f0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	0211      	lsls	r1, r2, #8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	06d2      	lsls	r2, r2, #27
 80041dc:	4311      	orrs	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6852      	ldr	r2, [r2, #4]
 80041e2:	3a01      	subs	r2, #1
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	430a      	orrs	r2, r1
 80041e8:	492d      	ldr	r1, [pc, #180]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	610b      	str	r3, [r1, #16]
 80041ee:	e02d      	b.n	800424c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d115      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	0211      	lsls	r1, r2, #8
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6912      	ldr	r2, [r2, #16]
 8004208:	0852      	lsrs	r2, r2, #1
 800420a:	3a01      	subs	r2, #1
 800420c:	0552      	lsls	r2, r2, #21
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6852      	ldr	r2, [r2, #4]
 8004214:	3a01      	subs	r2, #1
 8004216:	0112      	lsls	r2, r2, #4
 8004218:	430a      	orrs	r2, r1
 800421a:	4921      	ldr	r1, [pc, #132]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]
 8004220:	e014      	b.n	800424c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004222:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6952      	ldr	r2, [r2, #20]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0652      	lsls	r2, r2, #25
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6852      	ldr	r2, [r2, #4]
 8004240:	3a01      	subs	r2, #1
 8004242:	0112      	lsls	r2, r2, #4
 8004244:	430a      	orrs	r2, r1
 8004246:	4916      	ldr	r1, [pc, #88]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004256:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fc face 	bl	80007f8 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004260:	f7fc faca 	bl	80007f8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
          break;
 8004272:	e005      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ef      	beq.n	8004260 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	4904      	ldr	r1, [pc, #16]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	07ff800f 	.word	0x07ff800f
 80042a8:	ff9f800f 	.word	0xff9f800f
 80042ac:	f9ff800f 	.word	0xf9ff800f

080042b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ca:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d103      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
       ||
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d142      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e03f      	b.n	8004368 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d018      	beq.n	8004322 <RCCEx_PLLSAI2_Config+0x72>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d825      	bhi.n	8004340 <RCCEx_PLLSAI2_Config+0x90>
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0x4e>
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d009      	beq.n	8004310 <RCCEx_PLLSAI2_Config+0x60>
 80042fc:	e020      	b.n	8004340 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042fe:	4b62      	ldr	r3, [pc, #392]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11d      	bne.n	8004346 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430e:	e01a      	b.n	8004346 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004310:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d116      	bne.n	800434a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004320:	e013      	b.n	800434a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004322:	4b59      	ldr	r3, [pc, #356]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800432e:	4b56      	ldr	r3, [pc, #344]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800433e:	e006      	b.n	800434e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e004      	b.n	8004350 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800434e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004356:	4b4c      	ldr	r3, [pc, #304]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4949      	ldr	r1, [pc, #292]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8086 	bne.w	800447c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004370:	4b45      	ldr	r3, [pc, #276]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a44      	ldr	r2, [pc, #272]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437c:	f7fc fa3c 	bl	80007f8 <HAL_GetTick>
 8004380:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004382:	e009      	b.n	8004398 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004384:	f7fc fa38 	bl	80007f8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d902      	bls.n	8004398 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	73fb      	strb	r3, [r7, #15]
        break;
 8004396:	e005      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ef      	bne.n	8004384 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d168      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d113      	bne.n	80043d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <RCCEx_PLLSAI2_Config+0x1dc>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	0211      	lsls	r1, r2, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	06d2      	lsls	r2, r2, #27
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6852      	ldr	r2, [r2, #4]
 80043ca:	3a01      	subs	r2, #1
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	430a      	orrs	r2, r1
 80043d0:	492d      	ldr	r1, [pc, #180]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	614b      	str	r3, [r1, #20]
 80043d6:	e02d      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d115      	bne.n	800440a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043de:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <RCCEx_PLLSAI2_Config+0x1e0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	0211      	lsls	r1, r2, #8
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6912      	ldr	r2, [r2, #16]
 80043f0:	0852      	lsrs	r2, r2, #1
 80043f2:	3a01      	subs	r2, #1
 80043f4:	0552      	lsls	r2, r2, #21
 80043f6:	4311      	orrs	r1, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6852      	ldr	r2, [r2, #4]
 80043fc:	3a01      	subs	r2, #1
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	430a      	orrs	r2, r1
 8004402:	4921      	ldr	r1, [pc, #132]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004404:	4313      	orrs	r3, r2
 8004406:	614b      	str	r3, [r1, #20]
 8004408:	e014      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800440a:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6892      	ldr	r2, [r2, #8]
 8004416:	0211      	lsls	r1, r2, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6952      	ldr	r2, [r2, #20]
 800441c:	0852      	lsrs	r2, r2, #1
 800441e:	3a01      	subs	r2, #1
 8004420:	0652      	lsls	r2, r2, #25
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6852      	ldr	r2, [r2, #4]
 8004428:	3a01      	subs	r2, #1
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	430a      	orrs	r2, r1
 800442e:	4916      	ldr	r1, [pc, #88]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fc f9da 	bl	80007f8 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004448:	f7fc f9d6 	bl	80007f8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
          break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	07ff800f 	.word	0x07ff800f
 8004490:	ff9f800f 	.word	0xff9f800f
 8004494:	f9ff800f 	.word	0xf9ff800f

08004498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e049      	b.n	800453e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 ff7a 	bl	80063b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f000 fac0 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e04f      	b.n	8004600 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a23      	ldr	r2, [pc, #140]	; (800460c <HAL_TIM_Base_Start_IT+0xc4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01d      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d018      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_TIM_Base_Start_IT+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_TIM_Base_Start_IT+0xcc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <HAL_TIM_Base_Start_IT+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_TIM_Base_Start_IT+0xd4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_TIM_Base_Start_IT+0x76>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d115      	bne.n	80045ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <HAL_TIM_Base_Start_IT+0xdc>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b06      	cmp	r3, #6
 80045ce:	d015      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0xb4>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d011      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e8:	e008      	b.n	80045fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e000      	b.n	80045fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40013400 	.word	0x40013400
 8004620:	40014000 	.word	0x40014000
 8004624:	00010007 	.word	0x00010007

08004628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9d8 	bl	8004a20 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9ca 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f9db 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0204 	mvn.w	r2, #4
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9ae 	bl	8004a20 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9a0 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9b1 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f984 	bl	8004a20 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f976 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f987 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0210 	mvn.w	r2, #16
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2208      	movs	r2, #8
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f95a 	bl	8004a20 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f94c 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f95d 	bl	8004a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10e      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0201 	mvn.w	r2, #1
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f926 	bl	80049f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fb08 	bl	8004de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	d10e      	bne.n	8004806 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fafb 	bl	8004dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d10e      	bne.n	8004832 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d107      	bne.n	8004832 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f90b 	bl	8004a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d10e      	bne.n	800485e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b20      	cmp	r3, #32
 800484c:	d107      	bne.n	800485e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f06f 0220 	mvn.w	r2, #32
 8004856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fabb 	bl	8004dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_TIM_ConfigClockSource+0x1c>
 800487e:	2302      	movs	r3, #2
 8004880:	e0b6      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x18a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d03e      	beq.n	800493e <HAL_TIM_ConfigClockSource+0xd8>
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	f200 8087 	bhi.w	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048cc:	f000 8086 	beq.w	80049dc <HAL_TIM_ConfigClockSource+0x176>
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d4:	d87f      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048d6:	2b70      	cmp	r3, #112	; 0x70
 80048d8:	d01a      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xaa>
 80048da:	2b70      	cmp	r3, #112	; 0x70
 80048dc:	d87b      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048de:	2b60      	cmp	r3, #96	; 0x60
 80048e0:	d050      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x11e>
 80048e2:	2b60      	cmp	r3, #96	; 0x60
 80048e4:	d877      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048e6:	2b50      	cmp	r3, #80	; 0x50
 80048e8:	d03c      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0xfe>
 80048ea:	2b50      	cmp	r3, #80	; 0x50
 80048ec:	d873      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d058      	beq.n	80049a4 <HAL_TIM_ConfigClockSource+0x13e>
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d86f      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d064      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x15e>
 80048fa:	2b30      	cmp	r3, #48	; 0x30
 80048fc:	d86b      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d060      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x15e>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d867      	bhi.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d05c      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x15e>
 800490a:	2b10      	cmp	r3, #16
 800490c:	d05a      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0x15e>
 800490e:	e062      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 f9b0 	bl	8004c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004932:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]
      break;
 800493c:	e04f      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f000 f999 	bl	8004c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004960:	609a      	str	r2, [r3, #8]
      break;
 8004962:	e03c      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	461a      	mov	r2, r3
 8004972:	f000 f90d 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2150      	movs	r1, #80	; 0x50
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f966 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004982:	e02c      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	461a      	mov	r2, r3
 8004992:	f000 f92c 	bl	8004bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2160      	movs	r1, #96	; 0x60
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f956 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 80049a2:	e01c      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f000 f8ed 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f946 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 80049c2:	e00c      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 f93d 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 80049d4:	e003      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
      break;
 80049da:	e000      	b.n	80049de <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a3c      	ldr	r2, [pc, #240]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01f      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <TIM_Base_SetConfig+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <TIM_Base_SetConfig+0x11c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <TIM_Base_SetConfig+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <TIM_Base_SetConfig+0x128>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <TIM_Base_SetConfig+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <TIM_Base_SetConfig+0x114>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00f      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a12      	ldr	r2, [pc, #72]	; (8004b80 <TIM_Base_SetConfig+0x124>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <TIM_Base_SetConfig+0x128>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <TIM_Base_SetConfig+0x130>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800

08004b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 030a 	bic.w	r3, r3, #10
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0210 	bic.w	r2, r3, #16
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f043 0307 	orr.w	r3, r3, #7
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	021a      	lsls	r2, r3, #8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	609a      	str	r2, [r3, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e068      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d018      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014000 	.word	0x40014000

08004dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e14:	f7fb fc88 	bl	8000728 <HAL_Init>
  //HAL_GPIO_EXTI_Callback (BLUE_Pin);			// WORKS WITHOUT CALLING

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e18:	f000 f812 	bl	8004e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e1c:	f000 f964 	bl	80050e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e20:	f000 f938 	bl	8005094 <MX_DMA_Init>
  MX_DAC1_Init();
 8004e24:	f000 f85e 	bl	8004ee4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8004e28:	f000 f8e6 	bl	8004ff8 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 8004e2c:	f000 f88e 	bl	8004f4c <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 8004e30:	f000 fd30 	bl	8005894 <BSP_QSPI_Init>


  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <main+0x2c>)
 8004e36:	f7ff fb87 	bl	8004548 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004e3a:	e7fe      	b.n	8004e3a <main+0x2a>
 8004e3c:	200000f4 	.word	0x200000f4

08004e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b096      	sub	sp, #88	; 0x58
 8004e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e46:	f107 0314 	add.w	r3, r7, #20
 8004e4a:	2244      	movs	r2, #68	; 0x44
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fbc2 	bl	80065d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e54:	463b      	mov	r3, r7
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004e62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e66:	f7fd feaf 	bl	8002bc8 <HAL_PWREx_ControlVoltageScaling>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004e70:	f000 fd0a 	bl	8005888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004e74:	2310      	movs	r3, #16
 8004e76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004e80:	2360      	movs	r3, #96	; 0x60
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e84:	2302      	movs	r3, #2
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004e90:	2328      	movs	r3, #40	; 0x28
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e94:	2302      	movs	r3, #2
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fd ff33 	bl	8002d10 <HAL_RCC_OscConfig>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004eb0:	f000 fcea 	bl	8005888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eb4:	230f      	movs	r3, #15
 8004eb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004ec8:	463b      	mov	r3, r7
 8004eca:	2103      	movs	r1, #3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fb39 	bl	8003544 <HAL_RCC_ClockConfig>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004ed8:	f000 fcd6 	bl	8005888 <Error_Handler>
  }
}
 8004edc:	bf00      	nop
 8004ede:	3758      	adds	r7, #88	; 0x58
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004eea:	463b      	mov	r3, r7
 8004eec:	2228      	movs	r2, #40	; 0x28
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 fb71 	bl	80065d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <MX_DAC1_Init+0x60>)
 8004ef8:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <MX_DAC1_Init+0x64>)
 8004efa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004efc:	4811      	ldr	r0, [pc, #68]	; (8004f44 <MX_DAC1_Init+0x60>)
 8004efe:	f7fb fdbc 	bl	8000a7a <HAL_DAC_Init>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004f08:	f000 fcbe 	bl	8005888 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004f10:	230a      	movs	r3, #10
 8004f12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f18:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004f26:	463b      	mov	r3, r7
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4805      	ldr	r0, [pc, #20]	; (8004f44 <MX_DAC1_Init+0x60>)
 8004f2e:	f7fb fea7 	bl	8000c80 <HAL_DAC_ConfigChannel>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8004f38:	f000 fca6 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004f3c:	bf00      	nop
 8004f3e:	3728      	adds	r7, #40	; 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000030 	.word	0x20000030
 8004f48:	40007400 	.word	0x40007400

08004f4c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8004f52:	1d3b      	adds	r3, r7, #4
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	60da      	str	r2, [r3, #12]
 8004f5e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8004f60:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <MX_OCTOSPI1_Init+0xa8>)
 8004f64:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f78:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8004f92:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004fac:	2208      	movs	r2, #8
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8004fb0:	480f      	ldr	r0, [pc, #60]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004fb2:	f7fc fd6d 	bl	8001a90 <HAL_OSPI_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8004fbc:	f000 fc64 	bl	8005888 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8004fc8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004fcc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4806      	ldr	r0, [pc, #24]	; (8004ff0 <MX_OCTOSPI1_Init+0xa4>)
 8004fd8:	f7fd f858 	bl	800208c <HAL_OSPIM_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8004fe2:	f000 fc51 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8004fe6:	bf00      	nop
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200000a4 	.word	0x200000a4
 8004ff4:	a0001000 	.word	0xa0001000

08004ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <MX_TIM2_Init+0x98>)
 8005018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800501c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800501e:	4b1c      	ldr	r3, [pc, #112]	; (8005090 <MX_TIM2_Init+0x98>)
 8005020:	2200      	movs	r2, #0
 8005022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <MX_TIM2_Init+0x98>)
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800502a:	4b19      	ldr	r3, [pc, #100]	; (8005090 <MX_TIM2_Init+0x98>)
 800502c:	f240 7216 	movw	r2, #1814	; 0x716
 8005030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <MX_TIM2_Init+0x98>)
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <MX_TIM2_Init+0x98>)
 800503a:	2200      	movs	r2, #0
 800503c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800503e:	4814      	ldr	r0, [pc, #80]	; (8005090 <MX_TIM2_Init+0x98>)
 8005040:	f7ff fa2a 	bl	8004498 <HAL_TIM_Base_Init>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800504a:	f000 fc1d 	bl	8005888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800504e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	4619      	mov	r1, r3
 800505a:	480d      	ldr	r0, [pc, #52]	; (8005090 <MX_TIM2_Init+0x98>)
 800505c:	f7ff fc03 	bl	8004866 <HAL_TIM_ConfigClockSource>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005066:	f000 fc0f 	bl	8005888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800506a:	2320      	movs	r3, #32
 800506c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4806      	ldr	r0, [pc, #24]	; (8005090 <MX_TIM2_Init+0x98>)
 8005078:	f7ff fe24 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005082:	f000 fc01 	bl	8005888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005086:	bf00      	nop
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	200000f4 	.word	0x200000f4

08005094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <MX_DMA_Init+0x50>)
 800509c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <MX_DMA_Init+0x50>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	6493      	str	r3, [r2, #72]	; 0x48
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <MX_DMA_Init+0x50>)
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050b2:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <MX_DMA_Init+0x50>)
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <MX_DMA_Init+0x50>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6493      	str	r3, [r2, #72]	; 0x48
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <MX_DMA_Init+0x50>)
 80050c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	200b      	movs	r0, #11
 80050d0:	f7fb fc9d 	bl	8000a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80050d4:	200b      	movs	r0, #11
 80050d6:	f7fb fcb6 	bl	8000a46 <HAL_NVIC_EnableIRQ>

}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000

080050e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ee:	f107 0314 	add.w	r3, r7, #20
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	605a      	str	r2, [r3, #4]
 80050f8:	609a      	str	r2, [r3, #8]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050fe:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005104:	f043 0310 	orr.w	r3, r3, #16
 8005108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800510a:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <MX_GPIO_Init+0xfc>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005116:	4b33      	ldr	r3, [pc, #204]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511a:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <MX_GPIO_Init+0xfc>)
 800511c:	f043 0304 	orr.w	r3, r3, #4
 8005120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005122:	4b30      	ldr	r3, [pc, #192]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <MX_GPIO_Init+0xfc>)
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <MX_GPIO_Init+0xfc>)
 800514c:	f043 0302 	orr.w	r3, r3, #2
 8005150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <MX_GPIO_Init+0xfc>)
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800515e:	2200      	movs	r2, #0
 8005160:	2108      	movs	r1, #8
 8005162:	4821      	ldr	r0, [pc, #132]	; (80051e8 <MX_GPIO_Init+0x100>)
 8005164:	f7fc fc64 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800516e:	481f      	ldr	r0, [pc, #124]	; (80051ec <MX_GPIO_Init+0x104>)
 8005170:	f7fc fc5e 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8005174:	2308      	movs	r3, #8
 8005176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005178:	2301      	movs	r3, #1
 800517a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005180:	2300      	movs	r3, #0
 8005182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4619      	mov	r1, r3
 800518a:	4817      	ldr	r0, [pc, #92]	; (80051e8 <MX_GPIO_Init+0x100>)
 800518c:	f7fc f9b4 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8005190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005196:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800519a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	4619      	mov	r1, r3
 80051a6:	4812      	ldr	r0, [pc, #72]	; (80051f0 <MX_GPIO_Init+0x108>)
 80051a8:	f7fc f9a6 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80051ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ba:	2300      	movs	r3, #0
 80051bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80051be:	f107 0314 	add.w	r3, r7, #20
 80051c2:	4619      	mov	r1, r3
 80051c4:	4809      	ldr	r0, [pc, #36]	; (80051ec <MX_GPIO_Init+0x104>)
 80051c6:	f7fc f997 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	2028      	movs	r0, #40	; 0x28
 80051d0:	f7fb fc1d 	bl	8000a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051d4:	2028      	movs	r0, #40	; 0x28
 80051d6:	f7fb fc36 	bl	8000a46 <HAL_NVIC_EnableIRQ>

}
 80051da:	bf00      	nop
 80051dc:	3728      	adds	r7, #40	; 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000
 80051e8:	48001000 	.word	0x48001000
 80051ec:	48000400 	.word	0x48000400
 80051f0:	48000800 	.word	0x48000800
 80051f4:	00000000 	.word	0x00000000

080051f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	4603      	mov	r3, r0
 8005200:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BLUE_Pin) {
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005208:	f040 8238 	bne.w	800567c <HAL_GPIO_EXTI_Callback+0x484>

		for (int i = 0; i < 33000 ; i++){
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	e042      	b.n	8005298 <HAL_GPIO_EXTI_Callback+0xa0>

			if(arrayOneRad > 6.284) {
 8005212:	4b99      	ldr	r3, [pc, #612]	; (8005478 <HAL_GPIO_EXTI_Callback+0x280>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb f956 	bl	80004c8 <__aeabi_f2d>
 800521c:	a38e      	add	r3, pc, #568	; (adr r3, 8005458 <HAL_GPIO_EXTI_Callback+0x260>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb fa27 	bl	8000674 <__aeabi_dcmpgt>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_EXTI_Callback+0x3c>
				arrayOneRad = 0;
 800522c:	4b92      	ldr	r3, [pc, #584]	; (8005478 <HAL_GPIO_EXTI_Callback+0x280>)
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
			}
			uint8_t conv = (uint8_t)((arm_sin_f32(arrayOneRad) * 127) + 127);
 8005234:	4b90      	ldr	r3, [pc, #576]	; (8005478 <HAL_GPIO_EXTI_Callback+0x280>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	eeb0 0a67 	vmov.f32	s0, s15
 800523e:	f001 f961 	bl	8006504 <arm_sin_f32>
 8005242:	eef0 7a40 	vmov.f32	s15, s0
 8005246:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 800524a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 8005252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	edc7 7a00 	vstr	s15, [r7]
 800525e:	783b      	ldrb	r3, [r7, #0]
 8005260:	73fb      	strb	r3, [r7, #15]
			arrayOne[i] = conv;
 8005262:	4a87      	ldr	r2, [pc, #540]	; (8005480 <HAL_GPIO_EXTI_Callback+0x288>)
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	4413      	add	r3, r2
 8005268:	7bfa      	ldrb	r2, [r7, #15]
 800526a:	701a      	strb	r2, [r3, #0]
			arrayOneRad += 0.286;
 800526c:	4b82      	ldr	r3, [pc, #520]	; (8005478 <HAL_GPIO_EXTI_Callback+0x280>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fb f929 	bl	80004c8 <__aeabi_f2d>
 8005276:	a37a      	add	r3, pc, #488	; (adr r3, 8005460 <HAL_GPIO_EXTI_Callback+0x268>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fa ffc6 	bl	800020c <__adddf3>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7fb f9fe 	bl	8000688 <__aeabi_d2f>
 800528c:	4603      	mov	r3, r0
 800528e:	4a7a      	ldr	r2, [pc, #488]	; (8005478 <HAL_GPIO_EXTI_Callback+0x280>)
 8005290:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 33000 ; i++){
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	3301      	adds	r3, #1
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	f248 02e7 	movw	r2, #32999	; 0x80e7
 800529e:	4293      	cmp	r3, r2
 80052a0:	ddb7      	ble.n	8005212 <HAL_GPIO_EXTI_Callback+0x1a>
			//indexCounterOne++;
		}
		if(BSP_QSPI_Erase_Block(0) == QSPI_OK) {		// 0 0xD8 65000 130000 195000 260000 work
 80052a2:	2000      	movs	r0, #0
 80052a4:	f000 fc4c 	bl	8005b40 <BSP_QSPI_Erase_Block>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <HAL_GPIO_EXTI_Callback+0xd2>
			if(BSP_QSPI_Write(&arrayOne, 0, 33000) != QSPI_OK) {
 80052ae:	f248 02e8 	movw	r2, #33000	; 0x80e8
 80052b2:	2100      	movs	r1, #0
 80052b4:	4872      	ldr	r0, [pc, #456]	; (8005480 <HAL_GPIO_EXTI_Callback+0x288>)
 80052b6:	f000 fbbd 	bl	8005a34 <BSP_QSPI_Write>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_GPIO_EXTI_Callback+0xcc>
				Error_Handler();
 80052c0:	f000 fae2 	bl	8005888 <Error_Handler>
			}
			int i = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e001      	b.n	80052ce <HAL_GPIO_EXTI_Callback+0xd6>
		} else {
			Error_Handler();
 80052ca:	f000 fadd 	bl	8005888 <Error_Handler>
		}

		for (int i = 0; i < 33000 ; i++){
 80052ce:	2300      	movs	r3, #0
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	e042      	b.n	800535a <HAL_GPIO_EXTI_Callback+0x162>
			if(arrayTwoRad > 6.284) {
 80052d4:	4b6b      	ldr	r3, [pc, #428]	; (8005484 <HAL_GPIO_EXTI_Callback+0x28c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fb f8f5 	bl	80004c8 <__aeabi_f2d>
 80052de:	a35e      	add	r3, pc, #376	; (adr r3, 8005458 <HAL_GPIO_EXTI_Callback+0x260>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fb f9c6 	bl	8000674 <__aeabi_dcmpgt>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_EXTI_Callback+0xfe>
				arrayTwoRad = 0;
 80052ee:	4b65      	ldr	r3, [pc, #404]	; (8005484 <HAL_GPIO_EXTI_Callback+0x28c>)
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
			}
			uint8_t conv = (uint8_t)((arm_sin_f32(arrayTwoRad) * 127) + 127);
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_GPIO_EXTI_Callback+0x28c>)
 80052f8:	edd3 7a00 	vldr	s15, [r3]
 80052fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005300:	f001 f900 	bl	8006504 <arm_sin_f32>
 8005304:	eef0 7a40 	vmov.f32	s15, s0
 8005308:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 800530c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005310:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 8005314:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531c:	edc7 7a00 	vstr	s15, [r7]
 8005320:	783b      	ldrb	r3, [r7, #0]
 8005322:	743b      	strb	r3, [r7, #16]
			arrayTwo[i] = conv;
 8005324:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_GPIO_EXTI_Callback+0x290>)
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	4413      	add	r3, r2
 800532a:	7c3a      	ldrb	r2, [r7, #16]
 800532c:	701a      	strb	r2, [r3, #0]
			arrayTwoRad += 0.143;
 800532e:	4b55      	ldr	r3, [pc, #340]	; (8005484 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fb f8c8 	bl	80004c8 <__aeabi_f2d>
 8005338:	a34b      	add	r3, pc, #300	; (adr r3, 8005468 <HAL_GPIO_EXTI_Callback+0x270>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fa ff65 	bl	800020c <__adddf3>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	f7fb f99d 	bl	8000688 <__aeabi_d2f>
 800534e:	4603      	mov	r3, r0
 8005350:	4a4c      	ldr	r2, [pc, #304]	; (8005484 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005352:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 33000 ; i++){
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	3301      	adds	r3, #1
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	f248 02e7 	movw	r2, #32999	; 0x80e7
 8005360:	4293      	cmp	r3, r2
 8005362:	ddb7      	ble.n	80052d4 <HAL_GPIO_EXTI_Callback+0xdc>
			//indexCounterOne++;
		}
		if(BSP_QSPI_Erase_Block(65537) == QSPI_OK) {		// 0 0xD8 65000 130000 195000 260000 work
 8005364:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 8005368:	f000 fbea 	bl	8005b40 <BSP_QSPI_Erase_Block>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_GPIO_EXTI_Callback+0x194>
			if(BSP_QSPI_Write(&arrayTwo, 65537, 33000) != QSPI_OK) {
 8005372:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8005376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537a:	4843      	ldr	r0, [pc, #268]	; (8005488 <HAL_GPIO_EXTI_Callback+0x290>)
 800537c:	f000 fb5a 	bl	8005a34 <BSP_QSPI_Write>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_GPIO_EXTI_Callback+0x198>
				Error_Handler();
 8005386:	f000 fa7f 	bl	8005888 <Error_Handler>
 800538a:	e001      	b.n	8005390 <HAL_GPIO_EXTI_Callback+0x198>
			}
		} else {
			Error_Handler();
 800538c:	f000 fa7c 	bl	8005888 <Error_Handler>
		}

		for (int i = 0; i < 33000 ; i++){
 8005390:	2300      	movs	r3, #0
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
 8005394:	e042      	b.n	800541c <HAL_GPIO_EXTI_Callback+0x224>
			if(arrayThreeRad > 6.284) {
 8005396:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_GPIO_EXTI_Callback+0x294>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb f894 	bl	80004c8 <__aeabi_f2d>
 80053a0:	a32d      	add	r3, pc, #180	; (adr r3, 8005458 <HAL_GPIO_EXTI_Callback+0x260>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f965 	bl	8000674 <__aeabi_dcmpgt>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_EXTI_Callback+0x1c0>
				arrayThreeRad = 0;
 80053b0:	4b36      	ldr	r3, [pc, #216]	; (800548c <HAL_GPIO_EXTI_Callback+0x294>)
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
			}
			uint8_t conv = (uint8_t)((arm_sin_f32(arrayThreeRad) * 127) + 127);
 80053b8:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_GPIO_EXTI_Callback+0x294>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	eeb0 0a67 	vmov.f32	s0, s15
 80053c2:	f001 f89f 	bl	8006504 <arm_sin_f32>
 80053c6:	eef0 7a40 	vmov.f32	s15, s0
 80053ca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 80053ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800547c <HAL_GPIO_EXTI_Callback+0x284>
 80053d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053de:	edc7 7a00 	vstr	s15, [r7]
 80053e2:	783b      	ldrb	r3, [r7, #0]
 80053e4:	747b      	strb	r3, [r7, #17]
			arrayThree[i] = conv;
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_GPIO_EXTI_Callback+0x298>)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	4413      	add	r3, r2
 80053ec:	7c7a      	ldrb	r2, [r7, #17]
 80053ee:	701a      	strb	r2, [r3, #0]
			arrayThreeRad += 0.209;
 80053f0:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_GPIO_EXTI_Callback+0x294>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fb f867 	bl	80004c8 <__aeabi_f2d>
 80053fa:	a31d      	add	r3, pc, #116	; (adr r3, 8005470 <HAL_GPIO_EXTI_Callback+0x278>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fa ff04 	bl	800020c <__adddf3>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	f7fb f93c 	bl	8000688 <__aeabi_d2f>
 8005410:	4603      	mov	r3, r0
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_GPIO_EXTI_Callback+0x294>)
 8005414:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 33000 ; i++){
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	f248 02e7 	movw	r2, #32999	; 0x80e7
 8005422:	4293      	cmp	r3, r2
 8005424:	ddb7      	ble.n	8005396 <HAL_GPIO_EXTI_Callback+0x19e>
			//indexCounterOne++;
		}
		if(BSP_QSPI_Erase_Block(131074) == QSPI_OK) {		// 0 0xD8 65000 130000 195000 260000 work
 8005426:	f04f 1002 	mov.w	r0, #131074	; 0x20002
 800542a:	f000 fb89 	bl	8005b40 <BSP_QSPI_Erase_Block>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10c      	bne.n	800544e <HAL_GPIO_EXTI_Callback+0x256>
			if(BSP_QSPI_Write(&arrayThree, 131074, 33000) != QSPI_OK) {
 8005434:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8005438:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 800543c:	4814      	ldr	r0, [pc, #80]	; (8005490 <HAL_GPIO_EXTI_Callback+0x298>)
 800543e:	f000 faf9 	bl	8005a34 <BSP_QSPI_Write>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_GPIO_EXTI_Callback+0x25a>
				Error_Handler();
 8005448:	f000 fa1e 	bl	8005888 <Error_Handler>
 800544c:	e001      	b.n	8005452 <HAL_GPIO_EXTI_Callback+0x25a>
			}
		} else {
			Error_Handler();
 800544e:	f000 fa1b 	bl	8005888 <Error_Handler>
		}

		for (int i = 0; i < 33000 ; i++){
 8005452:	2300      	movs	r3, #0
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	e060      	b.n	800551a <HAL_GPIO_EXTI_Callback+0x322>
 8005458:	e5604189 	.word	0xe5604189
 800545c:	401922d0 	.word	0x401922d0
 8005460:	f1a9fbe7 	.word	0xf1a9fbe7
 8005464:	3fd24dd2 	.word	0x3fd24dd2
 8005468:	f1a9fbe7 	.word	0xf1a9fbe7
 800546c:	3fc24dd2 	.word	0x3fc24dd2
 8005470:	126e978d 	.word	0x126e978d
 8005474:	3fcac083 	.word	0x3fcac083
 8005478:	20008228 	.word	0x20008228
 800547c:	42fe0000 	.word	0x42fe0000
 8005480:	20000140 	.word	0x20000140
 8005484:	20010314 	.word	0x20010314
 8005488:	2000822c 	.word	0x2000822c
 800548c:	20018400 	.word	0x20018400
 8005490:	20010318 	.word	0x20010318
			if(arrayFourRad > 6.284) {
 8005494:	4b82      	ldr	r3, [pc, #520]	; (80056a0 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fb f815 	bl	80004c8 <__aeabi_f2d>
 800549e:	a37a      	add	r3, pc, #488	; (adr r3, 8005688 <HAL_GPIO_EXTI_Callback+0x490>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fb f8e6 	bl	8000674 <__aeabi_dcmpgt>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_GPIO_EXTI_Callback+0x2be>
				arrayFourRad = 0;
 80054ae:	4b7c      	ldr	r3, [pc, #496]	; (80056a0 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
			}
			uint8_t conv = (uint8_t)((arm_sin_f32(arrayFourRad) * 127) + 127);
 80054b6:	4b7a      	ldr	r3, [pc, #488]	; (80056a0 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80054b8:	edd3 7a00 	vldr	s15, [r3]
 80054bc:	eeb0 0a67 	vmov.f32	s0, s15
 80054c0:	f001 f820 	bl	8006504 <arm_sin_f32>
 80054c4:	eef0 7a40 	vmov.f32	s15, s0
 80054c8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80056a4 <HAL_GPIO_EXTI_Callback+0x4ac>
 80054cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054d0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80056a4 <HAL_GPIO_EXTI_Callback+0x4ac>
 80054d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054dc:	edc7 7a00 	vstr	s15, [r7]
 80054e0:	783b      	ldrb	r3, [r7, #0]
 80054e2:	74bb      	strb	r3, [r7, #18]
			arrayFour[i] = conv;
 80054e4:	4a70      	ldr	r2, [pc, #448]	; (80056a8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	4413      	add	r3, r2
 80054ea:	7cba      	ldrb	r2, [r7, #18]
 80054ec:	701a      	strb	r2, [r3, #0]
			arrayFourRad += 0.418;
 80054ee:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <HAL_GPIO_EXTI_Callback+0x4a8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fa ffe8 	bl	80004c8 <__aeabi_f2d>
 80054f8:	a365      	add	r3, pc, #404	; (adr r3, 8005690 <HAL_GPIO_EXTI_Callback+0x498>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe85 	bl	800020c <__adddf3>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb f8bd 	bl	8000688 <__aeabi_d2f>
 800550e:	4603      	mov	r3, r0
 8005510:	4a63      	ldr	r2, [pc, #396]	; (80056a0 <HAL_GPIO_EXTI_Callback+0x4a8>)
 8005512:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 33000 ; i++){
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	3301      	adds	r3, #1
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f248 02e7 	movw	r2, #32999	; 0x80e7
 8005520:	4293      	cmp	r3, r2
 8005522:	ddb7      	ble.n	8005494 <HAL_GPIO_EXTI_Callback+0x29c>
			//indexCounterOne++;
		}
		if(BSP_QSPI_Erase_Block(196610) == QSPI_OK) {		// 0 0xD8 65000 130000 195000 260000 work
 8005524:	4861      	ldr	r0, [pc, #388]	; (80056ac <HAL_GPIO_EXTI_Callback+0x4b4>)
 8005526:	f000 fb0b 	bl	8005b40 <BSP_QSPI_Erase_Block>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_GPIO_EXTI_Callback+0x350>
			if(BSP_QSPI_Write(&arrayFour, 196610, 33000) != QSPI_OK) {
 8005530:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8005534:	495d      	ldr	r1, [pc, #372]	; (80056ac <HAL_GPIO_EXTI_Callback+0x4b4>)
 8005536:	485c      	ldr	r0, [pc, #368]	; (80056a8 <HAL_GPIO_EXTI_Callback+0x4b0>)
 8005538:	f000 fa7c 	bl	8005a34 <BSP_QSPI_Write>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <HAL_GPIO_EXTI_Callback+0x354>
				Error_Handler();
 8005542:	f000 f9a1 	bl	8005888 <Error_Handler>
 8005546:	e001      	b.n	800554c <HAL_GPIO_EXTI_Callback+0x354>
			}
		} else {
			Error_Handler();
 8005548:	f000 f99e 	bl	8005888 <Error_Handler>
		}

		for (int i = 0; i < 33000 ; i++){
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	e042      	b.n	80055d8 <HAL_GPIO_EXTI_Callback+0x3e0>
			if(arrayFiveRad > 6.284) {
 8005552:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa ffb6 	bl	80004c8 <__aeabi_f2d>
 800555c:	a34a      	add	r3, pc, #296	; (adr r3, 8005688 <HAL_GPIO_EXTI_Callback+0x490>)
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f7fb f887 	bl	8000674 <__aeabi_dcmpgt>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_GPIO_EXTI_Callback+0x37c>
				arrayFiveRad = 0;
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
			}
			uint8_t conv = (uint8_t)((arm_sin_f32(arrayFiveRad) * 127) + 127);
 8005574:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8005576:	edd3 7a00 	vldr	s15, [r3]
 800557a:	eeb0 0a67 	vmov.f32	s0, s15
 800557e:	f000 ffc1 	bl	8006504 <arm_sin_f32>
 8005582:	eef0 7a40 	vmov.f32	s15, s0
 8005586:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80056a4 <HAL_GPIO_EXTI_Callback+0x4ac>
 800558a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80056a4 <HAL_GPIO_EXTI_Callback+0x4ac>
 8005592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559a:	edc7 7a00 	vstr	s15, [r7]
 800559e:	783b      	ldrb	r3, [r7, #0]
 80055a0:	74fb      	strb	r3, [r7, #19]
			arrayFive[i] = conv;
 80055a2:	4a44      	ldr	r2, [pc, #272]	; (80056b4 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	7cfa      	ldrb	r2, [r7, #19]
 80055aa:	701a      	strb	r2, [r3, #0]
			arrayFiveRad += 0.698;
 80055ac:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fa ff89 	bl	80004c8 <__aeabi_f2d>
 80055b6:	a338      	add	r3, pc, #224	; (adr r3, 8005698 <HAL_GPIO_EXTI_Callback+0x4a0>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fa fe26 	bl	800020c <__adddf3>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	f7fb f85e 	bl	8000688 <__aeabi_d2f>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80055d0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 33000 ; i++){
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3301      	adds	r3, #1
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f248 02e7 	movw	r2, #32999	; 0x80e7
 80055de:	4293      	cmp	r3, r2
 80055e0:	ddb7      	ble.n	8005552 <HAL_GPIO_EXTI_Callback+0x35a>
			//indexCounterOne++;
		}
		if(BSP_QSPI_Erase_Block(262146) == QSPI_OK) {		// 0 0xD8 65000 130000 195000 260000 work
 80055e2:	4835      	ldr	r0, [pc, #212]	; (80056b8 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80055e4:	f000 faac 	bl	8005b40 <BSP_QSPI_Erase_Block>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <HAL_GPIO_EXTI_Callback+0x40e>
			if(BSP_QSPI_Write(&arrayFive, 262146, 33000) != QSPI_OK) {
 80055ee:	f248 02e8 	movw	r2, #33000	; 0x80e8
 80055f2:	4931      	ldr	r1, [pc, #196]	; (80056b8 <HAL_GPIO_EXTI_Callback+0x4c0>)
 80055f4:	482f      	ldr	r0, [pc, #188]	; (80056b4 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80055f6:	f000 fa1d 	bl	8005a34 <BSP_QSPI_Write>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_GPIO_EXTI_Callback+0x412>
				Error_Handler();
 8005600:	f000 f942 	bl	8005888 <Error_Handler>
 8005604:	e001      	b.n	800560a <HAL_GPIO_EXTI_Callback+0x412>
			}
		} else {
			Error_Handler();
 8005606:	f000 f93f 	bl	8005888 <Error_Handler>
		}

		// LIGHTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTUPPPPPPPPPPPPPPPPPPP
		if(HAL_GPIO_ReadPin(GPIOB, LED1_Pin) == GPIO_PIN_SET) {
 800560a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800560e:	482b      	ldr	r0, [pc, #172]	; (80056bc <HAL_GPIO_EXTI_Callback+0x4c4>)
 8005610:	f7fc f9f6 	bl	8001a00 <HAL_GPIO_ReadPin>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10b      	bne.n	8005632 <HAL_GPIO_EXTI_Callback+0x43a>
			HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_RESET);
 800561a:	2200      	movs	r2, #0
 800561c:	2108      	movs	r1, #8
 800561e:	4828      	ldr	r0, [pc, #160]	; (80056c0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8005620:	f7fc fa06 	bl	8001a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8005624:	2200      	movs	r2, #0
 8005626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800562a:	4824      	ldr	r0, [pc, #144]	; (80056bc <HAL_GPIO_EXTI_Callback+0x4c4>)
 800562c:	f7fc fa00 	bl	8001a30 <HAL_GPIO_WritePin>
 8005630:	e00a      	b.n	8005648 <HAL_GPIO_EXTI_Callback+0x450>
		} else {
			HAL_GPIO_WritePin(GPIOE, LED2_Pin, GPIO_PIN_SET);
 8005632:	2201      	movs	r2, #1
 8005634:	2108      	movs	r1, #8
 8005636:	4822      	ldr	r0, [pc, #136]	; (80056c0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8005638:	f7fc f9fa 	bl	8001a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800563c:	2201      	movs	r2, #1
 800563e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005642:	481e      	ldr	r0, [pc, #120]	; (80056bc <HAL_GPIO_EXTI_Callback+0x4c4>)
 8005644:	f7fc f9f4 	bl	8001a30 <HAL_GPIO_WritePin>
		}



		if(BSP_QSPI_Read(&readArrayOne, 0, 33000) == QSPI_OK) {
 8005648:	f248 02e8 	movw	r2, #33000	; 0x80e8
 800564c:	2100      	movs	r1, #0
 800564e:	481d      	ldr	r0, [pc, #116]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8005650:	f000 f99e 	bl	8005990 <BSP_QSPI_Read>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_GPIO_EXTI_Callback+0x480>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayOne, 33000, DAC_ALIGN_12B_R);
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8005664:	2100      	movs	r1, #0
 8005666:	4818      	ldr	r0, [pc, #96]	; (80056c8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8005668:	f7fb fa2a 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
			callbackCounter = 0;
 8005670:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
			Error_Handler();
		}
	}


}
 8005676:	e001      	b.n	800567c <HAL_GPIO_EXTI_Callback+0x484>
			Error_Handler();
 8005678:	f000 f906 	bl	8005888 <Error_Handler>
}
 800567c:	bf00      	nop
 800567e:	3730      	adds	r7, #48	; 0x30
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	f3af 8000 	nop.w
 8005688:	e5604189 	.word	0xe5604189
 800568c:	401922d0 	.word	0x401922d0
 8005690:	126e978d 	.word	0x126e978d
 8005694:	3fdac083 	.word	0x3fdac083
 8005698:	189374bc 	.word	0x189374bc
 800569c:	3fe65604 	.word	0x3fe65604
 80056a0:	200204ec 	.word	0x200204ec
 80056a4:	42fe0000 	.word	0x42fe0000
 80056a8:	20018404 	.word	0x20018404
 80056ac:	00030002 	.word	0x00030002
 80056b0:	200285d8 	.word	0x200285d8
 80056b4:	200204f0 	.word	0x200204f0
 80056b8:	00040002 	.word	0x00040002
 80056bc:	48000400 	.word	0x48000400
 80056c0:	48001000 	.word	0x48001000
 80056c4:	200285e0 	.word	0x200285e0
 80056c8:	20000030 	.word	0x20000030
 80056cc:	200285dc 	.word	0x200285dc

080056d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac){
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	6078      	str	r0, [r7, #4]
	callbackCounter++;
 80056d8:	4b60      	ldr	r3, [pc, #384]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	4a5f      	ldr	r2, [pc, #380]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80056e0:	6013      	str	r3, [r2, #0]
	if(callbackCounter > 4) {
 80056e2:	4b5e      	ldr	r3, [pc, #376]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	dd02      	ble.n	80056f0 <HAL_DAC_ConvCpltCallbackCh1+0x20>
		callbackCounter = 0;
 80056ea:	4b5c      	ldr	r3, [pc, #368]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
	}



	if(callbackCounter == 0) {
 80056f0:	4b5a      	ldr	r3, [pc, #360]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11e      	bne.n	8005736 <HAL_DAC_ConvCpltCallbackCh1+0x66>
		readBuffer = &readArrayOne;
 80056f8:	4b59      	ldr	r3, [pc, #356]	; (8005860 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 80056fa:	4a5a      	ldr	r2, [pc, #360]	; (8005864 <HAL_DAC_ConvCpltCallbackCh1+0x194>)
 80056fc:	601a      	str	r2, [r3, #0]
		memoryOffset = 0;
 80056fe:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
		if(BSP_QSPI_Read(&readArrayOne, memoryOffset, 33000) == QSPI_OK) {
 8005704:	4b58      	ldr	r3, [pc, #352]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f248 02e8 	movw	r2, #33000	; 0x80e8
 800570c:	4619      	mov	r1, r3
 800570e:	4855      	ldr	r0, [pc, #340]	; (8005864 <HAL_DAC_ConvCpltCallbackCh1+0x194>)
 8005710:	f000 f93e 	bl	8005990 <BSP_QSPI_Read>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_DAC_ConvCpltCallbackCh1+0x62>
			//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayOne, 33000, DAC_ALIGN_12B_R);
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8005722:	4a50      	ldr	r2, [pc, #320]	; (8005864 <HAL_DAC_ConvCpltCallbackCh1+0x194>)
 8005724:	2100      	movs	r1, #0
 8005726:	4851      	ldr	r0, [pc, #324]	; (800586c <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8005728:	f7fb f9ca 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e001      	b.n	8005736 <HAL_DAC_ConvCpltCallbackCh1+0x66>
		} else {
			Error_Handler();
 8005732:	f000 f8a9 	bl	8005888 <Error_Handler>
		}
	}
	if(callbackCounter == 1) {
 8005736:	4b49      	ldr	r3, [pc, #292]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d11f      	bne.n	800577e <HAL_DAC_ConvCpltCallbackCh1+0xae>
		readBuffer = &readArrayTwo;
 800573e:	4b48      	ldr	r3, [pc, #288]	; (8005860 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 8005740:	4a4b      	ldr	r2, [pc, #300]	; (8005870 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8005742:	601a      	str	r2, [r3, #0]
		memoryOffset = 65537;
 8005744:	4b48      	ldr	r3, [pc, #288]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 8005746:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800574a:	601a      	str	r2, [r3, #0]

		if(BSP_QSPI_Read(&readArrayTwo, memoryOffset, 33000) == QSPI_OK) {
 800574c:	4b46      	ldr	r3, [pc, #280]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8005754:	4619      	mov	r1, r3
 8005756:	4846      	ldr	r0, [pc, #280]	; (8005870 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 8005758:	f000 f91a 	bl	8005990 <BSP_QSPI_Read>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_DAC_ConvCpltCallbackCh1+0xaa>
			//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayTwo, 33000, DAC_ALIGN_12B_R);
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800576a:	4a41      	ldr	r2, [pc, #260]	; (8005870 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>)
 800576c:	2100      	movs	r1, #0
 800576e:	483f      	ldr	r0, [pc, #252]	; (800586c <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8005770:	f7fb f9a6 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e001      	b.n	800577e <HAL_DAC_ConvCpltCallbackCh1+0xae>
		} else {
			Error_Handler();
 800577a:	f000 f885 	bl	8005888 <Error_Handler>
		}
	}
	if(callbackCounter == 2) {
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d11f      	bne.n	80057c6 <HAL_DAC_ConvCpltCallbackCh1+0xf6>
		readBuffer = &readArrayThree;
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 8005788:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 800578a:	601a      	str	r2, [r3, #0]
		memoryOffset = 131074;
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 800578e:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 8005792:	601a      	str	r2, [r3, #0]

		if(BSP_QSPI_Read(&readArrayThree, memoryOffset, 33000) == QSPI_OK) {
 8005794:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f248 02e8 	movw	r2, #33000	; 0x80e8
 800579c:	4619      	mov	r1, r3
 800579e:	4835      	ldr	r0, [pc, #212]	; (8005874 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 80057a0:	f000 f8f6 	bl	8005990 <BSP_QSPI_Read>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <HAL_DAC_ConvCpltCallbackCh1+0xf2>
			//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayThree, 33000, DAC_ALIGN_12B_R);
 80057aa:	2300      	movs	r3, #0
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80057b2:	4a30      	ldr	r2, [pc, #192]	; (8005874 <HAL_DAC_ConvCpltCallbackCh1+0x1a4>)
 80057b4:	2100      	movs	r1, #0
 80057b6:	482d      	ldr	r0, [pc, #180]	; (800586c <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 80057b8:	f7fb f982 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e001      	b.n	80057c6 <HAL_DAC_ConvCpltCallbackCh1+0xf6>
		} else {
			Error_Handler();
 80057c2:	f000 f861 	bl	8005888 <Error_Handler>
		}
	}
	if(callbackCounter == 3) {
 80057c6:	4b25      	ldr	r3, [pc, #148]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d11e      	bne.n	800580c <HAL_DAC_ConvCpltCallbackCh1+0x13c>
		readBuffer = &readArrayFour;
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 80057d0:	4a29      	ldr	r2, [pc, #164]	; (8005878 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 80057d2:	601a      	str	r2, [r3, #0]
		memoryOffset = 196610;
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 80057d6:	4a29      	ldr	r2, [pc, #164]	; (800587c <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 80057d8:	601a      	str	r2, [r3, #0]

		if(BSP_QSPI_Read(&readArrayFour, memoryOffset, 33000) == QSPI_OK) {
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f248 02e8 	movw	r2, #33000	; 0x80e8
 80057e2:	4619      	mov	r1, r3
 80057e4:	4824      	ldr	r0, [pc, #144]	; (8005878 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 80057e6:	f000 f8d3 	bl	8005990 <BSP_QSPI_Read>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <HAL_DAC_ConvCpltCallbackCh1+0x138>
			//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayFour, 33000, DAC_ALIGN_12B_R);
 80057f0:	2300      	movs	r3, #0
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 80057fa:	2100      	movs	r1, #0
 80057fc:	481b      	ldr	r0, [pc, #108]	; (800586c <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 80057fe:	f7fb f95f 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e001      	b.n	800580c <HAL_DAC_ConvCpltCallbackCh1+0x13c>
		} else {
			Error_Handler();
 8005808:	f000 f83e 	bl	8005888 <Error_Handler>
		}
	}
	if(callbackCounter == 4) {
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <HAL_DAC_ConvCpltCallbackCh1+0x18c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d11e      	bne.n	8005852 <HAL_DAC_ConvCpltCallbackCh1+0x182>
		readBuffer = &readArrayFive;
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_DAC_ConvCpltCallbackCh1+0x190>)
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8005818:	601a      	str	r2, [r3, #0]
		memoryOffset = 262146;
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 800581e:	601a      	str	r2, [r3, #0]

		if(BSP_QSPI_Read(&readArrayFive, memoryOffset, 33000) == QSPI_OK) {
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_DAC_ConvCpltCallbackCh1+0x198>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f248 02e8 	movw	r2, #33000	; 0x80e8
 8005828:	4619      	mov	r1, r3
 800582a:	4815      	ldr	r0, [pc, #84]	; (8005880 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 800582c:	f000 f8b0 	bl	8005990 <BSP_QSPI_Read>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_DAC_ConvCpltCallbackCh1+0x17e>
			//HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, readArrayFive, 33000, DAC_ALIGN_12B_R);
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800583e:	4a10      	ldr	r2, [pc, #64]	; (8005880 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 8005840:	2100      	movs	r1, #0
 8005842:	480a      	ldr	r0, [pc, #40]	; (800586c <HAL_DAC_ConvCpltCallbackCh1+0x19c>)
 8005844:	f7fb f93c 	bl	8000ac0 <HAL_DAC_Start_DMA>
			int i = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
//	}




}
 800584c:	e001      	b.n	8005852 <HAL_DAC_ConvCpltCallbackCh1+0x182>
			Error_Handler();
 800584e:	f000 f81b 	bl	8005888 <Error_Handler>
}
 8005852:	bf00      	nop
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200285dc 	.word	0x200285dc
 8005860:	20050a68 	.word	0x20050a68
 8005864:	200285e0 	.word	0x200285e0
 8005868:	20000008 	.word	0x20000008
 800586c:	20000030 	.word	0x20000030
 8005870:	200306c8 	.word	0x200306c8
 8005874:	200387b0 	.word	0x200387b0
 8005878:	20040898 	.word	0x20040898
 800587c:	00030002 	.word	0x00030002
 8005880:	20048980 	.word	0x20048980
 8005884:	00040002 	.word	0x00040002

08005888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800588c:	b672      	cpsid	i
}
 800588e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005890:	e7fe      	b.n	8005890 <Error_Handler+0x8>
	...

08005894 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800589a:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <BSP_QSPI_Init+0xf4>)
 800589c:	4a3b      	ldr	r2, [pc, #236]	; (800598c <BSP_QSPI_Init+0xf8>)
 800589e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80058a0:	4839      	ldr	r0, [pc, #228]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058a2:	f7fc f99f 	bl	8001be4 <HAL_OSPI_DeInit>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e067      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80058b0:	f000 f990 	bl	8005bd4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 80058b4:	4b34      	ldr	r3, [pc, #208]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058b6:	2204      	movs	r2, #4
 80058b8:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80058ba:	4b33      	ldr	r3, [pc, #204]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058bc:	2200      	movs	r2, #0
 80058be:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80058c0:	4b31      	ldr	r3, [pc, #196]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80058cc:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 80058e0:	2320      	movs	r3, #32
 80058e2:	e003      	b.n	80058ec <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b26      	ldr	r3, [pc, #152]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058f0:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 80058f2:	4b25      	ldr	r3, [pc, #148]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80058f8:	4b23      	ldr	r3, [pc, #140]	; (8005988 <BSP_QSPI_Init+0xf4>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005900:	2200      	movs	r2, #0
 8005902:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8005904:	4b20      	ldr	r3, [pc, #128]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005906:	2204      	movs	r2, #4
 8005908:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <BSP_QSPI_Init+0xf4>)
 800590c:	2200      	movs	r2, #0
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <BSP_QSPI_Init+0xf4>)
 800591a:	2200      	movs	r2, #0
 800591c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800591e:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8005924:	4818      	ldr	r0, [pc, #96]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005926:	f7fc f8b3 	bl	8001a90 <HAL_OSPI_Init>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e025      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8005934:	4814      	ldr	r0, [pc, #80]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005936:	f000 f98d 	bl	8005c54 <QSPI_ResetMemory>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8005940:	2304      	movs	r3, #4
 8005942:	e01d      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8005944:	2101      	movs	r1, #1
 8005946:	4810      	ldr	r0, [pc, #64]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005948:	f000 fa72 	bl	8005e30 <QSPI_QuadMode>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e014      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8005956:	2101      	movs	r1, #1
 8005958:	480b      	ldr	r0, [pc, #44]	; (8005988 <BSP_QSPI_Init+0xf4>)
 800595a:	f000 fb15 	bl	8005f88 <QSPI_HighPerfMode>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e00b      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <BSP_QSPI_Init+0xf4>)
 800596a:	2202      	movs	r2, #2
 800596c:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800596e:	4806      	ldr	r0, [pc, #24]	; (8005988 <BSP_QSPI_Init+0xf4>)
 8005970:	f7fc f88e 	bl	8001a90 <HAL_OSPI_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20050a6c 	.word	0x20050a6c
 800598c:	a0001000 	.word	0xa0001000

08005990 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b098      	sub	sp, #96	; 0x60
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80059a4:	23eb      	movs	r3, #235	; 0xeb
 80059a6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80059ac:	2300      	movs	r3, #0
 80059ae:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80059b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 80059be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80059c8:	23aa      	movs	r3, #170	; 0xaa
 80059ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80059cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 80059d2:	2300      	movs	r3, #0
 80059d4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80059da:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80059e8:	2304      	movs	r3, #4
 80059ea:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80059f0:	2300      	movs	r3, #0
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fc:	4619      	mov	r1, r3
 80059fe:	480c      	ldr	r0, [pc, #48]	; (8005a30 <BSP_QSPI_Read+0xa0>)
 8005a00:	f7fc f917 	bl	8001c32 <HAL_OSPI_Command>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e00b      	b.n	8005a26 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	4806      	ldr	r0, [pc, #24]	; (8005a30 <BSP_QSPI_Read+0xa0>)
 8005a16:	f7fc fa00 	bl	8001e1a <HAL_OSPI_Receive>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3760      	adds	r7, #96	; 0x60
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20050a6c 	.word	0x20050a6c

08005a34 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b09c      	sub	sp, #112	; 0x70
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005a48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8005a4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d901      	bls.n	8005a56 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8005a6a:	2338      	movs	r3, #56	; 0x38
 8005a6c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8005a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a7e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8005a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8005a8e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8005aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8005aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aaa:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8005aac:	4823      	ldr	r0, [pc, #140]	; (8005b3c <BSP_QSPI_Write+0x108>)
 8005aae:	f000 f918 	bl	8005ce2 <QSPI_WriteEnable>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e03b      	b.n	8005b34 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005abc:	f107 0314 	add.w	r3, r7, #20
 8005ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	481d      	ldr	r0, [pc, #116]	; (8005b3c <BSP_QSPI_Write+0x108>)
 8005ac8:	f7fc f8b3 	bl	8001c32 <HAL_OSPI_Command>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e02e      	b.n	8005b34 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	4817      	ldr	r0, [pc, #92]	; (8005b3c <BSP_QSPI_Write+0x108>)
 8005ade:	f7fc f929 	bl	8001d34 <HAL_OSPI_Transmit>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e023      	b.n	8005b34 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005aec:	f241 3188 	movw	r1, #5000	; 0x1388
 8005af0:	4812      	ldr	r0, [pc, #72]	; (8005b3c <BSP_QSPI_Write+0x108>)
 8005af2:	f000 f952 	bl	8005d9a <QSPI_AutoPollingMemReady>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e019      	b.n	8005b34 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8005b00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	4413      	add	r3, r2
 8005b06:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8005b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d203      	bcs.n	8005b24 <BSP_QSPI_Write+0xf0>
 8005b1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	e001      	b.n	8005b28 <BSP_QSPI_Write+0xf4>
 8005b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8005b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3b8      	bcc.n	8005aa4 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3770      	adds	r7, #112	; 0x70
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20050a6c 	.word	0x20050a6c

08005b40 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b096      	sub	sp, #88	; 0x58
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8005b50:	23d8      	movs	r3, #216	; 0xd8
 8005b52:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8005b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8005b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005b84:	2300      	movs	r3, #0
 8005b86:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8005b88:	4811      	ldr	r0, [pc, #68]	; (8005bd0 <BSP_QSPI_Erase_Block+0x90>)
 8005b8a:	f000 f8aa 	bl	8005ce2 <QSPI_WriteEnable>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e017      	b.n	8005bc8 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	480b      	ldr	r0, [pc, #44]	; (8005bd0 <BSP_QSPI_Erase_Block+0x90>)
 8005ba4:	f7fc f845 	bl	8001c32 <HAL_OSPI_Command>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e00a      	b.n	8005bc8 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8005bb2:	f640 51ac 	movw	r1, #3500	; 0xdac
 8005bb6:	4806      	ldr	r0, [pc, #24]	; (8005bd0 <BSP_QSPI_Erase_Block+0x90>)
 8005bb8:	f000 f8ef 	bl	8005d9a <QSPI_AutoPollingMemReady>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3758      	adds	r7, #88	; 0x58
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20050a6c 	.word	0x20050a6c

08005bd4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8005bda:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be4:	6513      	str	r3, [r2, #80]	; 0x50
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8005bf2:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005c10:	f043 0310 	orr.w	r3, r3, #16
 8005c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <BSP_QSPI_MspInit+0x78>)
 8005c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8005c22:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005c26:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c30:	2303      	movs	r3, #3
 8005c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8005c34:	230a      	movs	r3, #10
 8005c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c38:	f107 030c 	add.w	r3, r7, #12
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4804      	ldr	r0, [pc, #16]	; (8005c50 <BSP_QSPI_MspInit+0x7c>)
 8005c40:	f7fb fc5a 	bl	80014f8 <HAL_GPIO_Init>
}
 8005c44:	bf00      	nop
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	48001000 	.word	0x48001000

08005c54 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b096      	sub	sp, #88	; 0x58
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8005c64:	2366      	movs	r3, #102	; 0x66
 8005c66:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb ffcb 	bl	8001c32 <HAL_OSPI_Command>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e019      	b.n	8005cda <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8005ca6:	2399      	movs	r3, #153	; 0x99
 8005ca8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005caa:	f107 0308 	add.w	r3, r7, #8
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fb ffbc 	bl	8001c32 <HAL_OSPI_Command>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e00a      	b.n	8005cda <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005cc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f866 	bl	8005d9a <QSPI_AutoPollingMemReady>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3758      	adds	r7, #88	; 0x58
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b09c      	sub	sp, #112	; 0x70
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005cea:	2300      	movs	r3, #0
 8005cec:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8005cf2:	2306      	movs	r3, #6
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005d16:	2300      	movs	r3, #0
 8005d18:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d1a:	f107 0320 	add.w	r3, r7, #32
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fb ff84 	bl	8001c32 <HAL_OSPI_Command>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e02e      	b.n	8005d92 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8005d34:	2302      	movs	r3, #2
 8005d36:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8005d40:	2310      	movs	r3, #16
 8005d42:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d48:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8005d4a:	2305      	movs	r3, #5
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8005d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d52:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8005d54:	2301      	movs	r3, #1
 8005d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d5c:	f107 0320 	add.w	r3, r7, #32
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb ff63 	bl	8001c32 <HAL_OSPI_Command>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e00d      	b.n	8005d92 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fc f8ed 	bl	8001f60 <HAL_OSPI_AutoPolling>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3770      	adds	r7, #112	; 0x70
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b09c      	sub	sp, #112	; 0x70
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005da4:	2300      	movs	r3, #0
 8005da6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005da8:	2300      	movs	r3, #0
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005dac:	2305      	movs	r3, #5
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005db4:	2300      	movs	r3, #0
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8005de2:	2301      	movs	r3, #1
 8005de4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8005dea:	2310      	movs	r3, #16
 8005dec:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005df2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005df4:	f107 0320 	add.w	r3, r7, #32
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb ff17 	bl	8001c32 <HAL_OSPI_Command>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e00c      	b.n	8005e28 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc f8a2 	bl	8001f60 <HAL_OSPI_AutoPolling>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3770      	adds	r7, #112	; 0x70
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b098      	sub	sp, #96	; 0x60
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005e44:	2305      	movs	r3, #5
 8005e46:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e60:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005e72:	2300      	movs	r3, #0
 8005e74:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e76:	f107 0310 	add.w	r3, r7, #16
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fb fed6 	bl	8001c32 <HAL_OSPI_Command>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e077      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e90:	f107 030f 	add.w	r3, r7, #15
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fb ffbd 	bl	8001e1a <HAL_OSPI_Receive>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e06a      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff ff19 	bl	8005ce2 <QSPI_WriteEnable>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e062      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d105      	bne.n	8005ecc <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	e004      	b.n	8005ed6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005eda:	f107 0310 	add.w	r3, r7, #16
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fb fea4 	bl	8001c32 <HAL_OSPI_Command>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e045      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ef4:	f107 030f 	add.w	r3, r7, #15
 8005ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fb ff18 	bl	8001d34 <HAL_OSPI_Transmit>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e038      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005f0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff41 	bl	8005d9a <QSPI_AutoPollingMemReady>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e02e      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8005f22:	2305      	movs	r3, #5
 8005f24:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f26:	f107 0310 	add.w	r3, r7, #16
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7fb fe7e 	bl	8001c32 <HAL_OSPI_Command>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e01f      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f40:	f107 030f 	add.w	r3, r7, #15
 8005f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb ff65 	bl	8001e1a <HAL_OSPI_Receive>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e012      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <QSPI_QuadMode+0x13a>
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d007      	beq.n	8005f7a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3760      	adds	r7, #96	; 0x60
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b098      	sub	sp, #96	; 0x60
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005f9c:	2305      	movs	r3, #5
 8005f9e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fce:	f107 0310 	add.w	r3, r7, #16
 8005fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fb fe2a 	bl	8001c32 <HAL_OSPI_Command>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e09a      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb ff11 	bl	8001e1a <HAL_OSPI_Receive>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e08d      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8006002:	2315      	movs	r3, #21
 8006004:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8006006:	2302      	movs	r3, #2
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fb fe0c 	bl	8001c32 <HAL_OSPI_Command>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e07c      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	3301      	adds	r3, #1
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fb fef2 	bl	8001e1a <HAL_OSPI_Receive>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e06e      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fe4e 	bl	8005ce2 <QSPI_WriteEnable>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e066      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	b2db      	uxtb	r3, r3
 800605e:	73bb      	strb	r3, [r7, #14]
 8006060:	e004      	b.n	800606c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	f023 0302 	bic.w	r3, r3, #2
 8006068:	b2db      	uxtb	r3, r3
 800606a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800606c:	2301      	movs	r3, #1
 800606e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8006070:	2303      	movs	r3, #3
 8006072:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006074:	f107 0310 	add.w	r3, r7, #16
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fb fdd7 	bl	8001c32 <HAL_OSPI_Command>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e047      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800608e:	f107 030c 	add.w	r3, r7, #12
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fb fe4b 	bl	8001d34 <HAL_OSPI_Transmit>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e03a      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80060a8:	f241 3188 	movw	r1, #5000	; 0x1388
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe74 	bl	8005d9a <QSPI_AutoPollingMemReady>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e030      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80060bc:	2315      	movs	r3, #21
 80060be:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80060c0:	2302      	movs	r3, #2
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fb fdaf 	bl	8001c32 <HAL_OSPI_Command>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e01f      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80060de:	f107 030c 	add.w	r3, r7, #12
 80060e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fb fe96 	bl	8001e1a <HAL_OSPI_Receive>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e012      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80060f8:	7b7b      	ldrb	r3, [r7, #13]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <QSPI_HighPerfMode+0x180>
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d007      	beq.n	8006118 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8006108:	7b7b      	ldrb	r3, [r7, #13]
 800610a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3760      	adds	r7, #96	; 0x60
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_MspInit+0x44>)
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <HAL_MspInit+0x44>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	6613      	str	r3, [r2, #96]	; 0x60
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_MspInit+0x44>)
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_MspInit+0x44>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <HAL_MspInit+0x44>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6593      	str	r3, [r2, #88]	; 0x58
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_MspInit+0x44>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000

08006170 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2a      	ldr	r2, [pc, #168]	; (8006238 <HAL_DAC_MspInit+0xc8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d14d      	bne.n	800622e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006192:	4b2a      	ldr	r3, [pc, #168]	; (800623c <HAL_DAC_MspInit+0xcc>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006196:	4a29      	ldr	r2, [pc, #164]	; (800623c <HAL_DAC_MspInit+0xcc>)
 8006198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800619c:	6593      	str	r3, [r2, #88]	; 0x58
 800619e:	4b27      	ldr	r3, [pc, #156]	; (800623c <HAL_DAC_MspInit+0xcc>)
 80061a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <HAL_DAC_MspInit+0xcc>)
 80061ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <HAL_DAC_MspInit+0xcc>)
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061b6:	4b21      	ldr	r3, [pc, #132]	; (800623c <HAL_DAC_MspInit+0xcc>)
 80061b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80061c2:	2310      	movs	r3, #16
 80061c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061c6:	2303      	movs	r3, #3
 80061c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061d8:	f7fb f98e 	bl	80014f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_DAC_MspInit+0xd4>)
 80061e0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061e4:	2206      	movs	r2, #6
 80061e6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061ea:	2210      	movs	r2, #16
 80061ec:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80061f4:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 8006208:	2200      	movs	r2, #0
 800620a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 800620e:	2200      	movs	r2, #0
 8006210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006212:	480b      	ldr	r0, [pc, #44]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 8006214:	f7fa fefe 	bl	8001014 <HAL_DMA_Init>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800621e:	f7ff fb33 	bl	8005888 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a06      	ldr	r2, [pc, #24]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	4a05      	ldr	r2, [pc, #20]	; (8006240 <HAL_DAC_MspInit+0xd0>)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800622e:	bf00      	nop
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40007400 	.word	0x40007400
 800623c:	40021000 	.word	0x40021000
 8006240:	20000044 	.word	0x20000044
 8006244:	40020008 	.word	0x40020008

08006248 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b0b0      	sub	sp, #192	; 0xc0
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006250:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006260:	f107 0318 	add.w	r3, r7, #24
 8006264:	2294      	movs	r2, #148	; 0x94
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f9b5 	bl	80065d8 <memset>
  if(hospi->Instance==OCTOSPI1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a39      	ldr	r2, [pc, #228]	; (8006358 <HAL_OSPI_MspInit+0x110>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d16b      	bne.n	8006350 <HAL_OSPI_MspInit+0x108>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8006278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800627c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800627e:	2300      	movs	r3, #0
 8006280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006284:	f107 0318 	add.w	r3, r7, #24
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd fbed 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8006294:	f7ff faf8 	bl	8005888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8006298:	4b30      	ldr	r3, [pc, #192]	; (800635c <HAL_OSPI_MspInit+0x114>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	4a2f      	ldr	r2, [pc, #188]	; (800635c <HAL_OSPI_MspInit+0x114>)
 800629e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062a4:	4b2d      	ldr	r3, [pc, #180]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80062b0:	4b2a      	ldr	r3, [pc, #168]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ba:	6513      	str	r3, [r2, #80]	; 0x50
 80062bc:	4b27      	ldr	r3, [pc, #156]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062cc:	4a23      	ldr	r2, [pc, #140]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062d4:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062e0:	4b1e      	ldr	r3, [pc, #120]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e4:	4a1d      	ldr	r2, [pc, #116]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062e6:	f043 0310 	orr.w	r3, r3, #16
 80062ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ec:	4b1b      	ldr	r3, [pc, #108]	; (800635c <HAL_OSPI_MspInit+0x114>)
 80062ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062f8:	230c      	movs	r3, #12
 80062fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800630a:	2303      	movs	r3, #3
 800630c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8006310:	230a      	movs	r3, #10
 8006312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006316:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800631a:	4619      	mov	r1, r3
 800631c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006320:	f7fb f8ea 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006324:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800632c:	2302      	movs	r3, #2
 800632e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006338:	2303      	movs	r3, #3
 800633a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800633e:	230a      	movs	r3, #10
 8006340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006344:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006348:	4619      	mov	r1, r3
 800634a:	4805      	ldr	r0, [pc, #20]	; (8006360 <HAL_OSPI_MspInit+0x118>)
 800634c:	f7fb f8d4 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006350:	bf00      	nop
 8006352:	37c0      	adds	r7, #192	; 0xc0
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	a0001000 	.word	0xa0001000
 800635c:	40021000 	.word	0x40021000
 8006360:	48001000 	.word	0x48001000

08006364 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0e      	ldr	r2, [pc, #56]	; (80063ac <HAL_OSPI_MspDeInit+0x48>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d115      	bne.n	80063a2 <HAL_OSPI_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8006376:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <HAL_OSPI_MspDeInit+0x4c>)
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	4a0d      	ldr	r2, [pc, #52]	; (80063b0 <HAL_OSPI_MspDeInit+0x4c>)
 800637c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006380:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_OSPI_MspDeInit+0x4c>)
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <HAL_OSPI_MspDeInit+0x4c>)
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638c:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800638e:	210c      	movs	r1, #12
 8006390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006394:	f7fb fa42 	bl	800181c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8006398:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800639c:	4805      	ldr	r0, [pc, #20]	; (80063b4 <HAL_OSPI_MspDeInit+0x50>)
 800639e:	f7fb fa3d 	bl	800181c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	a0001000 	.word	0xa0001000
 80063b0:	40021000 	.word	0x40021000
 80063b4:	48001000 	.word	0x48001000

080063b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d113      	bne.n	80063f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <HAL_TIM_Base_MspInit+0x44>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	4a0b      	ldr	r2, [pc, #44]	; (80063fc <HAL_TIM_Base_MspInit+0x44>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	6593      	str	r3, [r2, #88]	; 0x58
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_TIM_Base_MspInit+0x44>)
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	201c      	movs	r0, #28
 80063e8:	f7fa fb11 	bl	8000a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80063ec:	201c      	movs	r0, #28
 80063ee:	f7fa fb2a 	bl	8000a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40021000 	.word	0x40021000

08006400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006404:	e7fe      	b.n	8006404 <NMI_Handler+0x4>

08006406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800640a:	e7fe      	b.n	800640a <HardFault_Handler+0x4>

0800640c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006410:	e7fe      	b.n	8006410 <MemManage_Handler+0x4>

08006412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006412:	b480      	push	{r7}
 8006414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006416:	e7fe      	b.n	8006416 <BusFault_Handler+0x4>

08006418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800641c:	e7fe      	b.n	800641c <UsageFault_Handler+0x4>

0800641e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800643a:	b480      	push	{r7}
 800643c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800644c:	f7fa f9c0 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006450:	bf00      	nop
 8006452:	bd80      	pop	{r7, pc}

08006454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <DMA1_Channel1_IRQHandler+0x10>)
 800645a:	f7fa fefe 	bl	800125a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000044 	.word	0x20000044

08006468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800646c:	4802      	ldr	r0, [pc, #8]	; (8006478 <TIM2_IRQHandler+0x10>)
 800646e:	f7fe f8db 	bl	8004628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200000f4 	.word	0x200000f4

0800647c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_Pin);
 8006480:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006484:	f7fb faec 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}

0800648c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <SystemInit+0x20>)
 8006492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006496:	4a05      	ldr	r2, [pc, #20]	; (80064ac <SystemInit+0x20>)
 8006498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800649c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80064b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80064b4:	f7ff ffea 	bl	800648c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064b8:	480c      	ldr	r0, [pc, #48]	; (80064ec <LoopForever+0x6>)
  ldr r1, =_edata
 80064ba:	490d      	ldr	r1, [pc, #52]	; (80064f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80064bc:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <LoopForever+0xe>)
  movs r3, #0
 80064be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064c0:	e002      	b.n	80064c8 <LoopCopyDataInit>

080064c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064c6:	3304      	adds	r3, #4

080064c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064cc:	d3f9      	bcc.n	80064c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80064d0:	4c0a      	ldr	r4, [pc, #40]	; (80064fc <LoopForever+0x16>)
  movs r3, #0
 80064d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064d4:	e001      	b.n	80064da <LoopFillZerobss>

080064d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064d8:	3204      	adds	r2, #4

080064da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064dc:	d3fb      	bcc.n	80064d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064de:	f000 f857 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064e2:	f7fe fc95 	bl	8004e10 <main>

080064e6 <LoopForever>:

LoopForever:
    b LoopForever
 80064e6:	e7fe      	b.n	80064e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80064e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80064ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80064f4:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 80064f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80064fc:	20050abc 	.word	0x20050abc

08006500 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006500:	e7fe      	b.n	8006500 <ADC1_IRQHandler>
	...

08006504 <arm_sin_f32>:
 8006504:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006584 <arm_sin_f32+0x80>
 8006508:	ee20 0a27 	vmul.f32	s0, s0, s15
 800650c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006514:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006518:	d504      	bpl.n	8006524 <arm_sin_f32+0x20>
 800651a:	ee17 3a90 	vmov	r3, s15
 800651e:	3b01      	subs	r3, #1
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006528:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006588 <arm_sin_f32+0x84>
 800652c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006530:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006534:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006538:	ee17 3a90 	vmov	r3, s15
 800653c:	b29b      	uxth	r3, r3
 800653e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006542:	d21a      	bcs.n	800657a <arm_sin_f32+0x76>
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006552:	4a0e      	ldr	r2, [pc, #56]	; (800658c <arm_sin_f32+0x88>)
 8006554:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800655c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006560:	ed93 7a00 	vldr	s14, [r3]
 8006564:	edd2 6a00 	vldr	s13, [r2]
 8006568:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800656c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006574:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006578:	4770      	bx	lr
 800657a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800657e:	2101      	movs	r1, #1
 8006580:	2300      	movs	r3, #0
 8006582:	e7e6      	b.n	8006552 <arm_sin_f32+0x4e>
 8006584:	3e22f983 	.word	0x3e22f983
 8006588:	44000000 	.word	0x44000000
 800658c:	08006640 	.word	0x08006640

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4d0d      	ldr	r5, [pc, #52]	; (80065c8 <__libc_init_array+0x38>)
 8006594:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006596:	1b64      	subs	r4, r4, r5
 8006598:	10a4      	asrs	r4, r4, #2
 800659a:	2600      	movs	r6, #0
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	4d0b      	ldr	r5, [pc, #44]	; (80065d0 <__libc_init_array+0x40>)
 80065a2:	4c0c      	ldr	r4, [pc, #48]	; (80065d4 <__libc_init_array+0x44>)
 80065a4:	f000 f820 	bl	80065e8 <_init>
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	2600      	movs	r6, #0
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006e44 	.word	0x08006e44
 80065cc:	08006e44 	.word	0x08006e44
 80065d0:	08006e44 	.word	0x08006e44
 80065d4:	08006e48 	.word	0x08006e48

080065d8 <memset>:
 80065d8:	4402      	add	r2, r0
 80065da:	4603      	mov	r3, r0
 80065dc:	4293      	cmp	r3, r2
 80065de:	d100      	bne.n	80065e2 <memset+0xa>
 80065e0:	4770      	bx	lr
 80065e2:	f803 1b01 	strb.w	r1, [r3], #1
 80065e6:	e7f9      	b.n	80065dc <memset+0x4>

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

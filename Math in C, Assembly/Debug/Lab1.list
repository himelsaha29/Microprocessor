
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001744  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001900  08001900  00011900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001990  08001990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080019a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080019a4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004643  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f98  00000000  00000000  0002467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00025bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fc3  00000000  00000000  000260b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a36  00000000  00000000  0004f073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa773  00000000  00000000  00054aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f21c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001438  00000000  00000000  0014f26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080018e8 	.word	0x080018e8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080018e8 	.word	0x080018e8

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f91e 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f001 faad 	bl	800177c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f91d 	bl	8000496 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f000 f8f5 	bl	800045e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0307 	and.w	r3, r3, #7
 80002f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <__NVIC_SetPriorityGrouping+0x44>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000300:	4013      	ands	r3, r2
 8000302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800030c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <__NVIC_SetPriorityGrouping+0x44>)
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	60d3      	str	r3, [r2, #12]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <__NVIC_GetPriorityGrouping+0x18>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	f003 0307 	and.w	r3, r3, #7
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000358:	2b00      	cmp	r3, #0
 800035a:	db0a      	blt.n	8000372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	b2da      	uxtb	r2, r3
 8000360:	490c      	ldr	r1, [pc, #48]	; (8000394 <__NVIC_SetPriority+0x4c>)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	440b      	add	r3, r1
 800036c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000370:	e00a      	b.n	8000388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4908      	ldr	r1, [pc, #32]	; (8000398 <__NVIC_SetPriority+0x50>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f003 030f 	and.w	r3, r3, #15
 800037e:	3b04      	subs	r3, #4
 8000380:	0112      	lsls	r2, r2, #4
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	440b      	add	r3, r1
 8000386:	761a      	strb	r2, [r3, #24]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f003 0307 	and.w	r3, r3, #7
 80003ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	f1c3 0307 	rsb	r3, r3, #7
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	bf28      	it	cs
 80003ba:	2304      	movcs	r3, #4
 80003bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3304      	adds	r3, #4
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d902      	bls.n	80003cc <NVIC_EncodePriority+0x30>
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3b03      	subs	r3, #3
 80003ca:	e000      	b.n	80003ce <NVIC_EncodePriority+0x32>
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d0:	f04f 32ff 	mov.w	r2, #4294967295
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	43da      	mvns	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	401a      	ands	r2, r3
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e4:	f04f 31ff 	mov.w	r1, #4294967295
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43d9      	mvns	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	4313      	orrs	r3, r2
         );
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3724      	adds	r7, #36	; 0x24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f7ff ff8e 	bl	8000348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff47 	bl	80002e4 <__NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000470:	f7ff ff5c 	bl	800032c <__NVIC_GetPriorityGrouping>
 8000474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ff8e 	bl	800039c <NVIC_EncodePriority>
 8000480:	4602      	mov	r2, r0
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff5d 	bl	8000348 <__NVIC_SetPriority>
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffb0 	bl	8000404 <SysTick_Config>
 80004a4:	4603      	mov	r3, r0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c0:	d102      	bne.n	80004c8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	e00b      	b.n	80004e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004d6:	d102      	bne.n	80004de <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80004d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004dc:	e000      	b.n	80004e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80004de:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40007000 	.word	0x40007000

080004f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d141      	bne.n	8000582 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80004fe:	4b4b      	ldr	r3, [pc, #300]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800050a:	d131      	bne.n	8000570 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800050e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000512:	4a46      	ldr	r2, [pc, #280]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000518:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000524:	4a41      	ldr	r2, [pc, #260]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800052c:	4b40      	ldr	r3, [pc, #256]	; (8000630 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2232      	movs	r2, #50	; 0x32
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	4a3f      	ldr	r2, [pc, #252]	; (8000634 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000538:	fba2 2303 	umull	r2, r3, r2, r3
 800053c:	0c9b      	lsrs	r3, r3, #18
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000542:	e002      	b.n	800054a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3b01      	subs	r3, #1
 8000548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800054a:	4b38      	ldr	r3, [pc, #224]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000556:	d102      	bne.n	800055e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f2      	bne.n	8000544 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800056a:	d158      	bne.n	800061e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800056c:	2303      	movs	r3, #3
 800056e:	e057      	b.n	8000620 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000576:	4a2d      	ldr	r2, [pc, #180]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800057c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000580:	e04d      	b.n	800061e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000588:	d141      	bne.n	800060e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000596:	d131      	bne.n	80005fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800059a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800059e:	4a23      	ldr	r2, [pc, #140]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2232      	movs	r2, #50	; 0x32
 80005be:	fb02 f303 	mul.w	r3, r2, r3
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80005c4:	fba2 2303 	umull	r2, r3, r2, r3
 80005c8:	0c9b      	lsrs	r3, r3, #18
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005ce:	e002      	b.n	80005d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e2:	d102      	bne.n	80005ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1f2      	bne.n	80005d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f6:	d112      	bne.n	800061e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80005f8:	2303      	movs	r3, #3
 80005fa:	e011      	b.n	8000620 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800060c:	e007      	b.n	800061e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000618:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800061c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40007000 	.word	0x40007000
 8000630:	20000008 	.word	0x20000008
 8000634:	431bde83 	.word	0x431bde83

08000638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d102      	bne.n	800064c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	f000 bc08 	b.w	8000e5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800064c:	4b96      	ldr	r3, [pc, #600]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	f003 030c 	and.w	r3, r3, #12
 8000654:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000656:	4b94      	ldr	r3, [pc, #592]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f003 0303 	and.w	r3, r3, #3
 800065e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	2b00      	cmp	r3, #0
 800066a:	f000 80e4 	beq.w	8000836 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d007      	beq.n	8000684 <HAL_RCC_OscConfig+0x4c>
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	2b0c      	cmp	r3, #12
 8000678:	f040 808b 	bne.w	8000792 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	2b01      	cmp	r3, #1
 8000680:	f040 8087 	bne.w	8000792 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000684:	4b88      	ldr	r3, [pc, #544]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <HAL_RCC_OscConfig+0x64>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000698:	2301      	movs	r3, #1
 800069a:	e3df      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a1a      	ldr	r2, [r3, #32]
 80006a0:	4b81      	ldr	r3, [pc, #516]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <HAL_RCC_OscConfig+0x7e>
 80006ac:	4b7e      	ldr	r3, [pc, #504]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006b4:	e005      	b.n	80006c2 <HAL_RCC_OscConfig+0x8a>
 80006b6:	4b7c      	ldr	r3, [pc, #496]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d223      	bcs.n	800070e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd94 	bl	80011f8 <RCC_SetFlashLatencyFromMSIRange>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e3c0      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006da:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a72      	ldr	r2, [pc, #456]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b70      	ldr	r3, [pc, #448]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a1b      	ldr	r3, [r3, #32]
 80006f2:	496d      	ldr	r1, [pc, #436]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006f4:	4313      	orrs	r3, r2
 80006f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80006f8:	4b6b      	ldr	r3, [pc, #428]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	4968      	ldr	r1, [pc, #416]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000708:	4313      	orrs	r3, r2
 800070a:	604b      	str	r3, [r1, #4]
 800070c:	e025      	b.n	800075a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800070e:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a65      	ldr	r2, [pc, #404]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6a1b      	ldr	r3, [r3, #32]
 8000726:	4960      	ldr	r1, [pc, #384]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000728:	4313      	orrs	r3, r2
 800072a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800072c:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	495b      	ldr	r1, [pc, #364]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800073c:	4313      	orrs	r3, r2
 800073e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fd54 	bl	80011f8 <RCC_SetFlashLatencyFromMSIRange>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e380      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800075a:	f000 fcc1 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 800075e:	4602      	mov	r2, r0
 8000760:	4b51      	ldr	r3, [pc, #324]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	4950      	ldr	r1, [pc, #320]	; (80008ac <HAL_RCC_OscConfig+0x274>)
 800076c:	5ccb      	ldrb	r3, [r1, r3]
 800076e:	f003 031f 	and.w	r3, r3, #31
 8000772:	fa22 f303 	lsr.w	r3, r2, r3
 8000776:	4a4e      	ldr	r2, [pc, #312]	; (80008b0 <HAL_RCC_OscConfig+0x278>)
 8000778:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800077a:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <HAL_RCC_OscConfig+0x27c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd54 	bl	800022c <HAL_InitTick>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d052      	beq.n	8000834 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	e364      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d032      	beq.n	8000800 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800079a:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a42      	ldr	r2, [pc, #264]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80007a6:	f7ff fd91 	bl	80002cc <HAL_GetTick>
 80007aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80007ac:	e008      	b.n	80007c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007ae:	f7ff fd8d 	bl	80002cc <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d901      	bls.n	80007c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80007bc:	2303      	movs	r3, #3
 80007be:	e34d      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f0      	beq.n	80007ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a35      	ldr	r2, [pc, #212]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4930      	ldr	r1, [pc, #192]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	492b      	ldr	r1, [pc, #172]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	604b      	str	r3, [r1, #4]
 80007fe:	e01a      	b.n	8000836 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800080c:	f7ff fd5e 	bl	80002cc <HAL_GetTick>
 8000810:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000812:	e008      	b.n	8000826 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000814:	f7ff fd5a 	bl	80002cc <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	2b02      	cmp	r3, #2
 8000820:	d901      	bls.n	8000826 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000822:	2303      	movs	r3, #3
 8000824:	e31a      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f0      	bne.n	8000814 <HAL_RCC_OscConfig+0x1dc>
 8000832:	e000      	b.n	8000836 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000834:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	d073      	beq.n	800092a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	2b08      	cmp	r3, #8
 8000846:	d005      	beq.n	8000854 <HAL_RCC_OscConfig+0x21c>
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	2b0c      	cmp	r3, #12
 800084c:	d10e      	bne.n	800086c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d10b      	bne.n	800086c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <HAL_RCC_OscConfig+0x2f0>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d15f      	bne.n	8000928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e2f7      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000874:	d106      	bne.n	8000884 <HAL_RCC_OscConfig+0x24c>
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800087c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	e025      	b.n	80008d0 <HAL_RCC_OscConfig+0x298>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800088c:	d114      	bne.n	80008b8 <HAL_RCC_OscConfig+0x280>
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 8000894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a02      	ldr	r2, [pc, #8]	; (80008a8 <HAL_RCC_OscConfig+0x270>)
 80008a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e013      	b.n	80008d0 <HAL_RCC_OscConfig+0x298>
 80008a8:	40021000 	.word	0x40021000
 80008ac:	08001950 	.word	0x08001950
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000000 	.word	0x20000000
 80008b8:	4ba0      	ldr	r3, [pc, #640]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a9f      	ldr	r2, [pc, #636]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80008be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b9d      	ldr	r3, [pc, #628]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a9c      	ldr	r2, [pc, #624]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80008ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d013      	beq.n	8000900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008d8:	f7ff fcf8 	bl	80002cc <HAL_GetTick>
 80008dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80008de:	e008      	b.n	80008f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008e0:	f7ff fcf4 	bl	80002cc <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	2b64      	cmp	r3, #100	; 0x64
 80008ec:	d901      	bls.n	80008f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80008ee:	2303      	movs	r3, #3
 80008f0:	e2b4      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80008f2:	4b92      	ldr	r3, [pc, #584]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f0      	beq.n	80008e0 <HAL_RCC_OscConfig+0x2a8>
 80008fe:	e014      	b.n	800092a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000900:	f7ff fce4 	bl	80002cc <HAL_GetTick>
 8000904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000906:	e008      	b.n	800091a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fce0 	bl	80002cc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	2b64      	cmp	r3, #100	; 0x64
 8000914:	d901      	bls.n	800091a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e2a0      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800091a:	4b88      	ldr	r3, [pc, #544]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f0      	bne.n	8000908 <HAL_RCC_OscConfig+0x2d0>
 8000926:	e000      	b.n	800092a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	2b00      	cmp	r3, #0
 8000934:	d060      	beq.n	80009f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d005      	beq.n	8000948 <HAL_RCC_OscConfig+0x310>
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d119      	bne.n	8000976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d116      	bne.n	8000976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000948:	4b7c      	ldr	r3, [pc, #496]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <HAL_RCC_OscConfig+0x328>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e27d      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000960:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	061b      	lsls	r3, r3, #24
 800096e:	4973      	ldr	r1, [pc, #460]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000970:	4313      	orrs	r3, r2
 8000972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000974:	e040      	b.n	80009f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d023      	beq.n	80009c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800097e:	4b6f      	ldr	r3, [pc, #444]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a6e      	ldr	r2, [pc, #440]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800098a:	f7ff fc9f 	bl	80002cc <HAL_GetTick>
 800098e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000990:	e008      	b.n	80009a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000992:	f7ff fc9b 	bl	80002cc <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d901      	bls.n	80009a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80009a0:	2303      	movs	r3, #3
 80009a2:	e25b      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009a4:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f0      	beq.n	8000992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	4b62      	ldr	r3, [pc, #392]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	061b      	lsls	r3, r3, #24
 80009be:	495f      	ldr	r1, [pc, #380]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009c0:	4313      	orrs	r3, r2
 80009c2:	604b      	str	r3, [r1, #4]
 80009c4:	e018      	b.n	80009f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009c6:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a5c      	ldr	r2, [pc, #368]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009d2:	f7ff fc7b 	bl	80002cc <HAL_GetTick>
 80009d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80009d8:	e008      	b.n	80009ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009da:	f7ff fc77 	bl	80002cc <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d901      	bls.n	80009ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80009e8:	2303      	movs	r3, #3
 80009ea:	e237      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f0      	bne.n	80009da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d03c      	beq.n	8000a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d01c      	beq.n	8000a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fc56 	bl	80002cc <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a24:	f7ff fc52 	bl	80002cc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e212      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0ef      	beq.n	8000a24 <HAL_RCC_OscConfig+0x3ec>
 8000a44:	e01b      	b.n	8000a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a4c:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a56:	f7ff fc39 	bl	80002cc <HAL_GetTick>
 8000a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000a5c:	e008      	b.n	8000a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fc35 	bl	80002cc <HAL_GetTick>
 8000a62:	4602      	mov	r2, r0
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d901      	bls.n	8000a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e1f5      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1ef      	bne.n	8000a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 80a6 	beq.w	8000bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10d      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_RCC_OscConfig+0x508>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d118      	bne.n	8000af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_RCC_OscConfig+0x508>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_RCC_OscConfig+0x508>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ad0:	f7ff fbfc 	bl	80002cc <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad8:	f7ff fbf8 	bl	80002cc <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e1b8      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_RCC_OscConfig+0x508>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d108      	bne.n	8000b10 <HAL_RCC_OscConfig+0x4d8>
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b0e:	e029      	b.n	8000b64 <HAL_RCC_OscConfig+0x52c>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d115      	bne.n	8000b44 <HAL_RCC_OscConfig+0x50c>
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b2e:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <HAL_RCC_OscConfig+0x504>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b38:	e014      	b.n	8000b64 <HAL_RCC_OscConfig+0x52c>
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40007000 	.word	0x40007000
 8000b44:	4b9d      	ldr	r3, [pc, #628]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	4a9c      	ldr	r2, [pc, #624]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b54:	4b99      	ldr	r3, [pc, #612]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5a:	4a98      	ldr	r2, [pc, #608]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000b5c:	f023 0304 	bic.w	r3, r3, #4
 8000b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d016      	beq.n	8000b9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b6c:	f7ff fbae 	bl	80002cc <HAL_GetTick>
 8000b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000b72:	e00a      	b.n	8000b8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b74:	f7ff fbaa 	bl	80002cc <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d901      	bls.n	8000b8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e168      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000b8a:	4b8c      	ldr	r3, [pc, #560]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0ed      	beq.n	8000b74 <HAL_RCC_OscConfig+0x53c>
 8000b98:	e015      	b.n	8000bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fb97 	bl	80002cc <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ba0:	e00a      	b.n	8000bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fb93 	bl	80002cc <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d901      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e151      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bb8:	4b80      	ldr	r3, [pc, #512]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1ed      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000bc6:	7ffb      	ldrb	r3, [r7, #31]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bcc:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	4a7a      	ldr	r2, [pc, #488]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0320 	and.w	r3, r3, #32
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d03c      	beq.n	8000c5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01c      	beq.n	8000c26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000bec:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bf2:	4a72      	ldr	r2, [pc, #456]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bfc:	f7ff fb66 	bl	80002cc <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c04:	f7ff fb62 	bl	80002cc <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e122      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c16:	4b69      	ldr	r3, [pc, #420]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0ef      	beq.n	8000c04 <HAL_RCC_OscConfig+0x5cc>
 8000c24:	e01b      	b.n	8000c5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000c26:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c2c:	4a63      	ldr	r2, [pc, #396]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c36:	f7ff fb49 	bl	80002cc <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c3e:	f7ff fb45 	bl	80002cc <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e105      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000c50:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1ef      	bne.n	8000c3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80f9 	beq.w	8000e5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	f040 80cf 	bne.w	8000e10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f003 0203 	and.w	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d12c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	3b01      	subs	r3, #1
 8000c92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d123      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d11b      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d113      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d109      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d071      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2b0c      	cmp	r3, #12
 8000ce4:	d068      	beq.n	8000db8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e0ac      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000d0e:	f7ff fadd 	bl	80002cc <HAL_GetTick>
 8000d12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d16:	f7ff fad9 	bl	80002cc <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e099      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f0      	bne.n	8000d16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_RCC_OscConfig+0x788>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d44:	3a01      	subs	r2, #1
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d4e:	0212      	lsls	r2, r2, #8
 8000d50:	4311      	orrs	r1, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000d56:	0852      	lsrs	r2, r2, #1
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	0552      	lsls	r2, r2, #21
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d62:	0852      	lsrs	r2, r2, #1
 8000d64:	3a01      	subs	r2, #1
 8000d66:	0652      	lsls	r2, r2, #25
 8000d68:	4311      	orrs	r1, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000d6e:	06d2      	lsls	r2, r2, #27
 8000d70:	430a      	orrs	r2, r1
 8000d72:	4912      	ldr	r1, [pc, #72]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000d90:	f7ff fa9c 	bl	80002cc <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d98:	f7ff fa98 	bl	80002cc <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e058      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_RCC_OscConfig+0x784>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000db6:	e050      	b.n	8000e5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e04f      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d144      	bne.n	8000e5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000de8:	f7ff fa70 	bl	80002cc <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff fa6c 	bl	80002cc <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e02c      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x7b8>
 8000e0e:	e024      	b.n	8000e5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d01f      	beq.n	8000e56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e22:	f7ff fa53 	bl	80002cc <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2a:	f7ff fa4f 	bl	80002cc <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e00f      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f0      	bne.n	8000e2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4905      	ldr	r1, [pc, #20]	; (8000e64 <HAL_RCC_OscConfig+0x82c>)
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_RCC_OscConfig+0x830>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	60cb      	str	r3, [r1, #12]
 8000e54:	e001      	b.n	8000e5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	feeefffc 	.word	0xfeeefffc

08000e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e11d      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e84:	4b90      	ldr	r3, [pc, #576]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d910      	bls.n	8000eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e92:	4b8d      	ldr	r3, [pc, #564]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 020f 	bic.w	r2, r3, #15
 8000e9a:	498b      	ldr	r1, [pc, #556]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea2:	4b89      	ldr	r3, [pc, #548]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d001      	beq.n	8000eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e105      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d010      	beq.n	8000ee2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	4b81      	ldr	r3, [pc, #516]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d908      	bls.n	8000ee2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed0:	4b7e      	ldr	r3, [pc, #504]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	497b      	ldr	r1, [pc, #492]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d079      	beq.n	8000fe2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d11e      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ef6:	4b75      	ldr	r3, [pc, #468]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0dc      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8000f06:	f000 f9d1 	bl	80012ac <RCC_GetSysClockFreqFromPLLSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a70      	ldr	r2, [pc, #448]	; (80010d0 <HAL_RCC_ClockConfig+0x264>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d946      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000f12:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d140      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000f1e:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f26:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	e035      	b.n	8000fa0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d107      	bne.n	8000f4c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d115      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0b9      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d107      	bne.n	8000f64 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f54:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0ad      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f64:	4b59      	ldr	r3, [pc, #356]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0a5      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8000f74:	f000 f8b4 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <HAL_RCC_ClockConfig+0x264>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d90f      	bls.n	8000fa0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000f80:	4b52      	ldr	r3, [pc, #328]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000f8c:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 0203 	bic.w	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4947      	ldr	r1, [pc, #284]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fb2:	f7ff f98b 	bl	80002cc <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fba:	f7ff f987 	bl	80002cc <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e077      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 020c 	and.w	r2, r3, #12
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d1eb      	bne.n	8000fba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b80      	cmp	r3, #128	; 0x80
 8000fe6:	d105      	bne.n	8000ff4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a37      	ldr	r2, [pc, #220]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8000fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ff2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d010      	beq.n	8001022 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800100c:	429a      	cmp	r2, r3
 800100e:	d208      	bcs.n	8001022 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	492b      	ldr	r1, [pc, #172]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 800101e:	4313      	orrs	r3, r2
 8001020:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d210      	bcs.n	8001052 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 020f 	bic.w	r2, r3, #15
 8001038:	4923      	ldr	r1, [pc, #140]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_RCC_ClockConfig+0x25c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e036      	b.n	80010c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4918      	ldr	r1, [pc, #96]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 800106c:	4313      	orrs	r3, r2
 800106e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d009      	beq.n	8001090 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4910      	ldr	r1, [pc, #64]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 800108c:	4313      	orrs	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001090:	f000 f826 	bl	80010e0 <HAL_RCC_GetSysClockFreq>
 8001094:	4602      	mov	r2, r0
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_RCC_ClockConfig+0x260>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <HAL_RCC_ClockConfig+0x268>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x26c>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_RCC_ClockConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f8b9 	bl	800022c <HAL_InitTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	04c4b400 	.word	0x04c4b400
 80010d4:	08001950 	.word	0x08001950
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000000 	.word	0x20000000

080010e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_GetSysClockFreq+0x34>
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d121      	bne.n	8001152 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d11e      	bne.n	8001152 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001120:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e005      	b.n	800113c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800113c:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10d      	bne.n	8001168 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d102      	bne.n	800115e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	e004      	b.n	8001168 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	2b08      	cmp	r3, #8
 8001162:	d101      	bne.n	8001168 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001166:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b0c      	cmp	r3, #12
 800116c:	d134      	bne.n	80011d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d003      	beq.n	8001186 <HAL_RCC_GetSysClockFreq+0xa6>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d003      	beq.n	800118c <HAL_RCC_GetSysClockFreq+0xac>
 8001184:	e005      	b.n	8001192 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001188:	617b      	str	r3, [r7, #20]
      break;
 800118a:	e005      	b.n	8001198 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800118e:	617b      	str	r3, [r7, #20]
      break;
 8001190:	e002      	b.n	8001198 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	617b      	str	r3, [r7, #20]
      break;
 8001196:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3301      	adds	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	fb03 f202 	mul.w	r2, r3, r2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	0e5b      	lsrs	r3, r3, #25
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	3301      	adds	r3, #1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80011d8:	69bb      	ldr	r3, [r7, #24]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	08001960 	.word	0x08001960
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	007a1200 	.word	0x007a1200

080011f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001210:	f7ff f94e 	bl	80004b0 <HAL_PWREx_GetVoltageRange>
 8001214:	6178      	str	r0, [r7, #20]
 8001216:	e014      	b.n	8001242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6593      	str	r3, [r2, #88]	; 0x58
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001230:	f7ff f93e 	bl	80004b0 <HAL_PWREx_GetVoltageRange>
 8001234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800123c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001248:	d10b      	bne.n	8001262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b80      	cmp	r3, #128	; 0x80
 800124e:	d913      	bls.n	8001278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2ba0      	cmp	r3, #160	; 0xa0
 8001254:	d902      	bls.n	800125c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	e00d      	b.n	8001278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800125c:	2301      	movs	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	e00a      	b.n	8001278 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b7f      	cmp	r3, #127	; 0x7f
 8001266:	d902      	bls.n	800126e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	e004      	b.n	8001278 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b70      	cmp	r3, #112	; 0x70
 8001272:	d101      	bne.n	8001278 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 020f 	bic.w	r2, r3, #15
 8001280:	4909      	ldr	r1, [pc, #36]	; (80012a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	429a      	cmp	r2, r3
 8001294:	d001      	beq.n	800129a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40022000 	.word	0x40022000

080012ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d00b      	beq.n	80012da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d825      	bhi.n	8001314 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d008      	beq.n	80012e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d11f      	bne.n	8001314 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80012d6:	613b      	str	r3, [r7, #16]
    break;
 80012d8:	e01f      	b.n	800131a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80012dc:	613b      	str	r3, [r7, #16]
    break;
 80012de:	e01c      	b.n	800131a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80012ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e005      	b.n	8001308 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
    break;
 8001312:	e002      	b.n	800131a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
    break;
 8001318:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	3301      	adds	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	fb03 f202 	mul.w	r2, r3, r2
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0e5b      	lsrs	r3, r3, #25
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	3301      	adds	r3, #1
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800135a:	683b      	ldr	r3, [r7, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	00f42400 	.word	0x00f42400
 8001370:	007a1200 	.word	0x007a1200
 8001374:	08001960 	.word	0x08001960

08001378 <asmStd>:
* S2 = SIZE(N)
* S3 = MU

*/
asmStd:
 PUSH {R4, R5, R6, R7} // saving R4 and R5 according to calling convention
 8001378:	b4f0      	push	{r4, r5, r6, r7}
 MOV R3, R1 // R3 = SIZE(N)
 800137a:	460b      	mov	r3, r1
 MOV R4, #0
 800137c:	f04f 0400 	mov.w	r4, #0
 VMOV.f32 S0, R4
 8001380:	ee00 4a10 	vmov	s0, r4

08001384 <loopOne>:

 //VSUB.F32 S0, S0, S0
loopOne:
 SUBS R1, R1, #1 // size = size - 1
 8001384:	3901      	subs	r1, #1
 BLT doneOne // loop finishes when R1 < 0
 8001386:	db06      	blt.n	8001396 <doneOne>
 ADD R4, R0, R1, LSL #2 // calculate base address (in R5) for array element in arrayOne
 8001388:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 VLDR.f32 S1, [R4] // load element into fp register S1 (from address in R5)
 800138c:	edd4 0a00 	vldr	s1, [r4]
 //VLDR.f32 S2, [R2] // load element into fp register S2 (from address in R2)
 VADD.f32 S0, S0, S1
 8001390:	ee30 0a20 	vadd.f32	s0, s0, s1

08001394 <continueOne>:


continueOne:
 B loopOne // next iteration
 8001394:	e7f6      	b.n	8001384 <loopOne>

08001396 <doneOne>:
doneOne:
 VMOV.f32 S2, R3   // SQ BRACKET ADDED HERE CHECK
 8001396:	ee01 3a10 	vmov	s2, r3
 VCVT.f32.u32 S2, S2
 800139a:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 VDIV.f32 S3, S0, S2
 800139e:	eec0 1a01 	vdiv.f32	s3, s0, s2

080013a2 <asmStdAfterMu>:




asmStdAfterMu:
 MOV R1, R3	// RESET COUNTER
 80013a2:	4619      	mov	r1, r3
 SUBS R3, R3, #1	//  N-1
 80013a4:	3b01      	subs	r3, #1
 MOV R4, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 VMOV.f32 S0, R4
 80013aa:	ee00 4a10 	vmov	s0, r4
 VCVT.f32.u32 S0, S0
 80013ae:	eeb8 0a40 	vcvt.f32.u32	s0, s0

080013b2 <loopTwo>:
 //VSUB.F32 S0, S0, S0
loopTwo:
 SUBS R1, R1, #1 // size = size - 1
 80013b2:	3901      	subs	r1, #1
 BLT doneTwo // loop finishes when R1 < 0
 80013b4:	db10      	blt.n	80013d8 <doneTwo>
 ADD R4, R0, R1, LSL #2 // calculate base address (in R5) for array element in arrayOne
 80013b6:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 VLDR.f32 S1, [R4] // load element into fp register S1 (from address in R3)
 80013ba:	edd4 0a00 	vldr	s1, [r4]

 //VLDR.f32 S0,[R4]
 VSUB.f32 S2, S1, S3		// S2 CONTAINS A(i) - mu
 80013be:	ee30 1ae1 	vsub.f32	s2, s1, s3
 VMUL.f32 S2, S2, S2		// S2 CONTAINS (A(i) - mu)^2
 80013c2:	ee21 1a01 	vmul.f32	s2, s2, s2

 // VLDR.f32 S4, [R3] // N-1
 VMOV.f32 S4, R3 // N-1
 80013c6:	ee02 3a10 	vmov	s4, r3
 VCVT.f32.u32 S4, S4
 80013ca:	eeb8 2a42 	vcvt.f32.u32	s4, s4

 VDIV.f32 S5, S2, S4 // (A(i) - mu)^2 / (N-1)
 80013ce:	eec1 2a02 	vdiv.f32	s5, s2, s4

 VADD.f32 S0, S0, S5  // ADD TO THE TOTAL
 80013d2:	ee30 0a22 	vadd.f32	s0, s0, s5

080013d6 <continueTwo>:


continueTwo:
 B loopTwo // next iteration
 80013d6:	e7ec      	b.n	80013b2 <loopTwo>

080013d8 <doneTwo>:
doneTwo:
 VSQRT.f32 S6, S0
 80013d8:	eeb1 3ac0 	vsqrt.f32	s6, s0

 VSTR.f32 S6, [R2]  // PREVIOUSLY [R4]
 80013dc:	ed82 3a00 	vstr	s6, [r2]

 POP {R4, R5, R6, R7} // restore context
 80013e0:	bcf0      	pop	{r4, r5, r6, r7}
 BX LR // return
 80013e2:	4770      	bx	lr

080013e4 <cStd>:


float square(float number);


void cStd(float *array, uint32_t size, float *result) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	float mu = 0;
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
	float total = 0;
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < size; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00e      	b.n	8001420 <cStd+0x3c>
		total += array[i];
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < size; i++) {
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	3301      	adds	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	d3ec      	bcc.n	8001402 <cStd+0x1e>
	} // for
	mu = total /(float)size;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001432:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143a:	edc7 7a05 	vstr	s15, [r7, #20]



	float middle = 0;
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
	//float mean = cMu(&array ,size, &mu);
	//cMu(&array ,size, &mu);
	for (uint32_t i = 0; i < size; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e026      	b.n	8001498 <cStd+0xb4>
		middle += ((array[i] - mu) * (array[i] - mu))/((float)(size-1));
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	edd7 7a05 	vldr	s15, [r7, #20]
 800145a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	edd3 6a00 	vldr	s13, [r3]
 800146a:	edd7 7a05 	vldr	s15, [r7, #20]
 800146e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001472:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001486:	ed97 7a07 	vldr	s14, [r7, #28]
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	edc7 7a07 	vstr	s15, [r7, #28]
	for (uint32_t i = 0; i < size; i++) {
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3301      	adds	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3d4      	bcc.n	800144a <cStd+0x66>
	} // for

	(*result) = square(middle);
 80014a0:	ed97 0a07 	vldr	s0, [r7, #28]
 80014a4:	f000 f809 	bl	80014ba <square>
 80014a8:	eef0 7a40 	vmov.f32	s15, s0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edc3 7a00 	vstr	s15, [r3]
	//return result;

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <square>:

	//return total;
}


float square(float number) {
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	ed87 0a01 	vstr	s0, [r7, #4]

	float temp, sqrt;

	// store the half of the given number e.g from 256 => 128
	sqrt = number / 2;
 80014c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d0:	edc7 7a02 	vstr	s15, [r7, #8]
	temp = 0;
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]

	// Iterate until sqrt is different of temp, that is updated on the loop
	while(sqrt != temp){
 80014da:	e011      	b.n	8001500 <square+0x46>
		// initially 0, is updated with the initial value of 128
	    // (on second iteration = 65)
	    // and so on
	    temp = sqrt;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60fb      	str	r3, [r7, #12]

	    // Then, replace values (256 / 128 + 128 ) / 2 = 6
	    // (on second iteration 34.46923076923077)
	    // and so on
	    sqrt = ( number/temp + temp) / 2;
 80014e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fc:	edc7 7a02 	vstr	s15, [r7, #8]
	while(sqrt != temp){
 8001500:	ed97 7a02 	vldr	s14, [r7, #8]
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	eeb4 7a67 	vcmp.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d1e4      	bne.n	80014dc <square+0x22>
	}
	return sqrt;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	ee07 3a90 	vmov	s15, r3

}
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b0b6      	sub	sp, #216	; 0xd8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152e:	f7fe fe65 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001532:	f000 f8a7 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001536:	f000 f8f7 	bl	8001728 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  float maxC = 0;
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint32_t maxIndexC;
  float maxAsm = 0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t maxIndexAsm;
  float maxCMSIS = 0;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t maxIndexCMSIS;
  // the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52,
 8001552:	4b48      	ldr	r3, [pc, #288]	; (8001674 <main+0x14c>)
 8001554:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8001558:	461d      	mov	r5, r3
 800155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001566:	e884 0003 	stmia.w	r4, {r0, r1}
//  for (float32_t i=0; i < 1000; i++) {
//	  cMultiplicationOne[i]
//  }


  float cMultiplicationOne[5] = {1.2, 3.2, 5.1, 8.2, 3.7};
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <main+0x150>)
 800156c:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001570:	461d      	mov	r5, r3
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	6023      	str	r3, [r4, #0]
  float cMultiplicationTwo[5] = {2.2, 9.2, 1.5, 2.8, 5.1};
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <main+0x154>)
 800157c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001580:	461d      	mov	r5, r3
 8001582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	6023      	str	r3, [r4, #0]
  float cMultiplicationResult[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
 800158a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
  float CMSISMultiplicationResult[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
 800159a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
  float asmMultiplicationResult[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
 80015aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]


  float stdDev[5] = {2.2, 9.2, 1.5, 2.8, 5.1};
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <main+0x154>)
 80015bc:	f107 0420 	add.w	r4, r7, #32
 80015c0:	461d      	mov	r5, r3
 80015c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	6023      	str	r3, [r4, #0]
  float cStdDevResult = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  float stdArrayCMSIS[5] = {1.2, 3.2, 5.1, 8.2, 3.7};
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <main+0x150>)
 80015d2:	f107 0408 	add.w	r4, r7, #8
 80015d6:	461d      	mov	r5, r3
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	6023      	str	r3, [r4, #0]
  float CMSISstd;
  float asmstdDevResult = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
//	  ITM_Port32(31) = 4;


	  // STANDARD DEVIATION PART

	  ITM_Port32(31) = 1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <main+0x158>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i < 1000; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80015f2:	e00c      	b.n	800160e <main+0xe6>
		  cStd(&stdDev, 5, &cStdDevResult);
 80015f4:	f107 021c 	add.w	r2, r7, #28
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	2105      	movs	r1, #5
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fef0 	bl	80013e4 <cStd>
	  for (uint32_t i=0; i < 1000; i++)
 8001604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800160e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001616:	d3ed      	bcc.n	80015f4 <main+0xcc>
	  ITM_Port32(31) = 2;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <main+0x158>)
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001624:	e007      	b.n	8001636 <main+0x10e>
		  //arm_std_f32(&stdArrayCMSIS, 5, &CMSISstd);
	  ITM_Port32(31) = 3;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <main+0x158>)
 8001628:	2203      	movs	r2, #3
 800162a:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 800162c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001630:	3301      	adds	r3, #1
 8001632:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001636:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800163a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800163e:	d3f2      	bcc.n	8001626 <main+0xfe>
	  for (uint32_t i=0; i<1000; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001646:	e00b      	b.n	8001660 <main+0x138>
		  asmStd(&stdDev, 5, &asmstdDevResult);
 8001648:	1d3a      	adds	r2, r7, #4
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2105      	movs	r1, #5
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fe91 	bl	8001378 <asmStd>
	  for (uint32_t i=0; i<1000; i++)
 8001656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800165a:	3301      	adds	r3, #1
 800165c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001668:	d3ee      	bcc.n	8001648 <main+0x120>
	  ITM_Port32(31) = 4;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <main+0x158>)
 800166c:	2204      	movs	r2, #4
 800166e:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 1;
 8001670:	e7b9      	b.n	80015e6 <main+0xbe>
 8001672:	bf00      	nop
 8001674:	08001900 	.word	0x08001900
 8001678:	08001928 	.word	0x08001928
 800167c:	0800193c 	.word	0x0800193c
 8001680:	e000007c 	.word	0xe000007c

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	; 0x58
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2244      	movs	r2, #68	; 0x44
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f920 	bl	80018d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016aa:	f7fe ff21 	bl	80004f0 <HAL_PWREx_ControlVoltageScaling>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016b4:	f000 f85c 	bl	8001770 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016b8:	2310      	movs	r3, #16
 80016ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016cc:	2301      	movs	r3, #1
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016d4:	2328      	movs	r3, #40	; 0x28
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ffa5 	bl	8000638 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016f4:	f000 f83c 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2303      	movs	r3, #3
 80016fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2103      	movs	r1, #3
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fbab 	bl	8000e6c <HAL_RCC_ClockConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800171c:	f000 f828 	bl	8001770 <Error_Handler>
  }
}
 8001720:	bf00      	nop
 8001722:	3758      	adds	r7, #88	; 0x58
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_GPIO_Init+0x44>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <MX_GPIO_Init+0x44>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_GPIO_Init+0x44>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_GPIO_Init+0x44>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <MX_GPIO_Init+0x44>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_GPIO_Init+0x44>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]

}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_MspInit+0x44>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_MspInit+0x44>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x44>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x44>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f7fe fd48 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f000 f811 	bl	8001890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff fe5b 	bl	8001528 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001880:	08001998 	.word	0x08001998
  ldr r2, =_sbss
 8001884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001888:	2000002c 	.word	0x2000002c

0800188c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_IRQHandler>
	...

08001890 <__libc_init_array>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	4d0d      	ldr	r5, [pc, #52]	; (80018c8 <__libc_init_array+0x38>)
 8001894:	4c0d      	ldr	r4, [pc, #52]	; (80018cc <__libc_init_array+0x3c>)
 8001896:	1b64      	subs	r4, r4, r5
 8001898:	10a4      	asrs	r4, r4, #2
 800189a:	2600      	movs	r6, #0
 800189c:	42a6      	cmp	r6, r4
 800189e:	d109      	bne.n	80018b4 <__libc_init_array+0x24>
 80018a0:	4d0b      	ldr	r5, [pc, #44]	; (80018d0 <__libc_init_array+0x40>)
 80018a2:	4c0c      	ldr	r4, [pc, #48]	; (80018d4 <__libc_init_array+0x44>)
 80018a4:	f000 f820 	bl	80018e8 <_init>
 80018a8:	1b64      	subs	r4, r4, r5
 80018aa:	10a4      	asrs	r4, r4, #2
 80018ac:	2600      	movs	r6, #0
 80018ae:	42a6      	cmp	r6, r4
 80018b0:	d105      	bne.n	80018be <__libc_init_array+0x2e>
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
 80018b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b8:	4798      	blx	r3
 80018ba:	3601      	adds	r6, #1
 80018bc:	e7ee      	b.n	800189c <__libc_init_array+0xc>
 80018be:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c2:	4798      	blx	r3
 80018c4:	3601      	adds	r6, #1
 80018c6:	e7f2      	b.n	80018ae <__libc_init_array+0x1e>
 80018c8:	08001990 	.word	0x08001990
 80018cc:	08001990 	.word	0x08001990
 80018d0:	08001990 	.word	0x08001990
 80018d4:	08001994 	.word	0x08001994

080018d8 <memset>:
 80018d8:	4402      	add	r2, r0
 80018da:	4603      	mov	r3, r0
 80018dc:	4293      	cmp	r3, r2
 80018de:	d100      	bne.n	80018e2 <memset+0xa>
 80018e0:	4770      	bx	lr
 80018e2:	f803 1b01 	strb.w	r1, [r3], #1
 80018e6:	e7f9      	b.n	80018dc <memset+0x4>

080018e8 <_init>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr

080018f4 <_fini>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	bf00      	nop
 80018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fa:	bc08      	pop	{r3}
 80018fc:	469e      	mov	lr, r3
 80018fe:	4770      	bx	lr

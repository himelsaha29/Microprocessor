
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ddc  08004ddc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ddc  08004ddc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004963c  2000000c  08004df0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20049648  08004df0  00029648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d21  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023af  00000000  00000000  00031d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000351f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a53e  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011beb  00000000  00000000  00060706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106b59  00000000  00000000  000722f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178e4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  00178e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004d84 	.word	0x08004d84

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004d84 	.word	0x08004d84

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f960 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f004 fadd 	bl	80047dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f96d 	bl	8000536 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f000 f937 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002fc:	d005      	beq.n	800030a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_Delay+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030a:	bf00      	nop
 800030c:	f7ff ffde 	bl	80002cc <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f7      	bhi.n	800030c <HAL_Delay+0x28>
  {
  }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	; 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff29 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff3e 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa2 	bl	8000488 <SysTick_Config>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e014      	b.n	800058a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 f957 	bl	8004824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d101      	bne.n	80005b2 <HAL_DAC_Start_DMA+0x1e>
 80005ae:	2302      	movs	r3, #2
 80005b0:	e0ab      	b.n	800070a <HAL_DAC_Start_DMA+0x176>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2201      	movs	r2, #1
 80005b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2202      	movs	r2, #2
 80005bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d12f      	bne.n	8000624 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a52      	ldr	r2, [pc, #328]	; (8000714 <HAL_DAC_Start_DMA+0x180>)
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a51      	ldr	r2, [pc, #324]	; (8000718 <HAL_DAC_Start_DMA+0x184>)
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a50      	ldr	r2, [pc, #320]	; (800071c <HAL_DAC_Start_DMA+0x188>)
 80005da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d013      	beq.n	800061a <HAL_DAC_Start_DMA+0x86>
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d845      	bhi.n	8000684 <HAL_DAC_Start_DMA+0xf0>
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <HAL_DAC_Start_DMA+0x72>
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000604:	e03e      	b.n	8000684 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3308      	adds	r3, #8
 800060c:	613b      	str	r3, [r7, #16]
        break;
 800060e:	e03c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	330c      	adds	r3, #12
 8000616:	613b      	str	r3, [r7, #16]
        break;
 8000618:	e037      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3310      	adds	r3, #16
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e032      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <HAL_DAC_Start_DMA+0x18c>)
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <HAL_DAC_Start_DMA+0x190>)
 8000632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <HAL_DAC_Start_DMA+0x194>)
 800063a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800064a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	2b08      	cmp	r3, #8
 8000650:	d013      	beq.n	800067a <HAL_DAC_Start_DMA+0xe6>
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d817      	bhi.n	8000688 <HAL_DAC_Start_DMA+0xf4>
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_DAC_Start_DMA+0xd2>
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d005      	beq.n	8000670 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000664:	e010      	b.n	8000688 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3314      	adds	r3, #20
 800066c:	613b      	str	r3, [r7, #16]
        break;
 800066e:	e00c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3318      	adds	r3, #24
 8000676:	613b      	str	r3, [r7, #16]
        break;
 8000678:	e007      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	331c      	adds	r3, #28
 8000680:	613b      	str	r3, [r7, #16]
        break;
 8000682:	e002      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000688:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d111      	bne.n	80006b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800069e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	f001 f859 	bl	8001760 <HAL_DMA_Start_IT>
 80006ae:	4603      	mov	r3, r0
 80006b0:	75fb      	strb	r3, [r7, #23]
 80006b2:	e010      	b.n	80006d6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80006c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68d8      	ldr	r0, [r3, #12]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	f001 f847 	bl	8001760 <HAL_DMA_Start_IT>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10c      	bne.n	80006fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2201      	movs	r2, #1
 80006f0:	409a      	lsls	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e005      	b.n	8000708 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f043 0204 	orr.w	r2, r3, #4
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000708:	7dfb      	ldrb	r3, [r7, #23]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08000a75 	.word	0x08000a75
 8000718:	08000a97 	.word	0x08000a97
 800071c:	08000ab3 	.word	0x08000ab3
 8000720:	08000b1d 	.word	0x08000b1d
 8000724:	08000b3f 	.word	0x08000b3f
 8000728:	08000b5b 	.word	0x08000b5b

0800072c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6819      	ldr	r1, [r3, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	2201      	movs	r2, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10d      	bne.n	8000792 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f86b 	bl	8001856 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e00c      	b.n	80007ac <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f85d 	bl	8001856 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80007aa:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	795b      	ldrb	r3, [r3, #5]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <HAL_DAC_ConfigChannel+0x1c>
 800080c:	2302      	movs	r3, #2
 800080e:	e12a      	b.n	8000a66 <HAL_DAC_ConfigChannel+0x272>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2201      	movs	r2, #1
 8000814:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2202      	movs	r2, #2
 800081a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b04      	cmp	r3, #4
 8000822:	d174      	bne.n	800090e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000824:	f7ff fd52 	bl	80002cc <HAL_GetTick>
 8000828:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d134      	bne.n	800089a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000830:	e011      	b.n	8000856 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000832:	f7ff fd4b 	bl	80002cc <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b01      	cmp	r3, #1
 800083e:	d90a      	bls.n	8000856 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	f043 0208 	orr.w	r2, r3, #8
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2203      	movs	r2, #3
 8000850:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000852:	2303      	movs	r3, #3
 8000854:	e107      	b.n	8000a66 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1e6      	bne.n	8000832 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fd3d 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	69d2      	ldr	r2, [r2, #28]
 8000872:	641a      	str	r2, [r3, #64]	; 0x40
 8000874:	e01e      	b.n	80008b4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000876:	f7ff fd29 	bl	80002cc <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b01      	cmp	r3, #1
 8000882:	d90a      	bls.n	800089a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	f043 0208 	orr.w	r2, r3, #8
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2203      	movs	r2, #3
 8000894:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000896:	2303      	movs	r3, #3
 8000898:	e0e5      	b.n	8000a66 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dbe8      	blt.n	8000876 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff fd1d 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	69d2      	ldr	r2, [r2, #28]
 80008b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	ea02 0103 	and.w	r1, r2, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	6a1a      	ldr	r2, [r3, #32]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	409a      	lsls	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	430a      	orrs	r2, r1
 80008e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	ea02 0103 	and.w	r1, r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f003 0310 	and.w	r3, r3, #16
 8000904:	409a      	lsls	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d11d      	bne.n	8000952 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	221f      	movs	r2, #31
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	69fa      	ldr	r2, [r7, #28]
 800092e:	4013      	ands	r3, r2
 8000930:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	4313      	orrs	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000958:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2207      	movs	r2, #7
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	69fa      	ldr	r2, [r7, #28]
 800096a:	4013      	ands	r3, r2
 800096c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	431a      	orrs	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	4313      	orrs	r3, r2
 8000990:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	400a      	ands	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69fa      	ldr	r2, [r7, #28]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009f6:	d104      	bne.n	8000a02 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e018      	b.n	8000a34 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d104      	bne.n	8000a14 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e00f      	b.n	8000a34 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000a14:	f002 f948 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8000a18:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <HAL_DAC_ConfigChannel+0x27c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d904      	bls.n	8000a2c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	e003      	b.n	8000a34 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a32:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f003 0310 	and.w	r3, r3, #16
 8000a48:	22c0      	movs	r2, #192	; 0xc0
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	04c4b400 	.word	0x04c4b400

08000a74 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fe97 	bl	80007b6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	711a      	strb	r2, [r3, #4]
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff fe90 	bl	80007ca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	f043 0204 	orr.w	r2, r3, #4
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fe86 	bl	80007de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	711a      	strb	r2, [r3, #4]
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff ffd8 	bl	8000ae0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2201      	movs	r2, #1
 8000b34:	711a      	strb	r2, [r3, #4]
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ffd1 	bl	8000af4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	f043 0204 	orr.w	r2, r3, #4
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff ffc7 	bl	8000b08 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	711a      	strb	r2, [r3, #4]
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e0ac      	b.n	8000cf4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fc46 	bl	8001430 <DFSDM_GetChannelFromInstance>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a55      	ldr	r2, [pc, #340]	; (8000cfc <HAL_DFSDM_ChannelInit+0x174>)
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e09f      	b.n	8000cf4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f003 ff57 	bl	8004a68 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <HAL_DFSDM_ChannelInit+0x178>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <HAL_DFSDM_ChannelInit+0x178>)
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <HAL_DFSDM_ChannelInit+0x178>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d125      	bne.n	8000c18 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000bd6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000bd8:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	4948      	ldr	r1, [pc, #288]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000be6:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a46      	ldr	r2, [pc, #280]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000bec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000bf0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	791b      	ldrb	r3, [r3, #4]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d108      	bne.n	8000c0c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000bfa:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	493f      	ldr	r1, [pc, #252]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a3c      	ldr	r2, [pc, #240]	; (8000d04 <HAL_DFSDM_ChannelInit+0x17c>)
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000c26:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6819      	ldr	r1, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c36:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000c3c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 020f 	bic.w	r2, r2, #15
 8000c54:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000c7c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6899      	ldr	r1, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f002 0207 	and.w	r2, r2, #7
 8000ca8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6859      	ldr	r1, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fba4 	bl	8001430 <DFSDM_GetChannelFromInstance>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <HAL_DFSDM_ChannelInit+0x174>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000030 	.word	0x20000030
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	40016000 	.word	0x40016000

08000d08 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e0ca      	b.n	8000ed8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <HAL_DFSDM_FilterInit+0x1b0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d109      	bne.n	8000d60 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d003      	beq.n	8000d5c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e0bb      	b.n	8000ed8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f003 fdc1 	bl	8004900 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000d8c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7a1b      	ldrb	r3, [r3, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d108      	bne.n	8000da8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e007      	b.n	8000db8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000db6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7a5b      	ldrb	r3, [r3, #9]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e007      	b.n	8000de2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000df0:	f023 0308 	bic.w	r3, r3, #8
 8000df4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d108      	bne.n	8000e10 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7c1b      	ldrb	r3, [r3, #16]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d108      	bne.n	8000e2a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0210 	orr.w	r2, r2, #16
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e007      	b.n	8000e3a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0210 	bic.w	r2, r2, #16
 8000e38:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7c5b      	ldrb	r3, [r3, #17]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d108      	bne.n	8000e54 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e007      	b.n	8000e64 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0220 	bic.w	r2, r2, #32
 8000e62:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000e72:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000e76:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6959      	ldr	r1, [r3, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000e8a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000e92:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7c1a      	ldrb	r2, [r3, #16]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40016100 	.word	0x40016100

08000ee4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d02e      	beq.n	8000f5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d029      	beq.n	8000f5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10d      	bne.n	8000f3e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f30:	431a      	orrs	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e00a      	b.n	8000f54 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5a:	e001      	b.n	8000f60 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	75fb      	strb	r3, [r7, #23]
 8000f90:	e064      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000fa0:	d002      	beq.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
 8000fa6:	e059      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10e      	bne.n	8000fce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10a      	bne.n	8000fce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d105      	bne.n	8000fce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d002      	beq.n	8000fce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	75fb      	strb	r3, [r7, #23]
 8000fcc:	e046      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10b      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d107      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000fe4:	2b20      	cmp	r3, #32
 8000fe6:	d102      	bne.n	8000fee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	75fb      	strb	r3, [r7, #23]
 8000fec:	e036      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d004      	beq.n	8001002 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d12a      	bne.n	8001058 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001018:	2b20      	cmp	r3, #32
 800101a:	d101      	bne.n	8001020 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800101e:	e000      	b.n	8001022 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001020:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	331c      	adds	r3, #28
 8001032:	4619      	mov	r1, r3
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f000 fb92 	bl	8001760 <HAL_DMA_Start_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800104e:	e005      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 fa39 	bl	80014c8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001056:	e001      	b.n	800105c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	080013f1 	.word	0x080013f1
 800106c:	0800140d 	.word	0x0800140d
 8001070:	080013d5 	.word	0x080013d5

08001074 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001086:	2b02      	cmp	r3, #2
 8001088:	d007      	beq.n	800109a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001090:	2b04      	cmp	r3, #4
 8001092:	d002      	beq.n	800109a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e007      	b.n	80010aa <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fbd9 	bl	8001856 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fa65 	bl	8001574 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00f      	beq.n	80010f6 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00a      	beq.n	80010f6 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2208      	movs	r2, #8
 80010e6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f966 	bl	80013c0 <HAL_DFSDM_FilterErrorCallback>
 80010f4:	e13b      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00f      	beq.n	8001120 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2204      	movs	r2, #4
 8001110:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2202      	movs	r2, #2
 8001116:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f951 	bl	80013c0 <HAL_DFSDM_FilterErrorCallback>
 800111e:	e126      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d025      	beq.n	8001176 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f003 facd 	bl	80046d4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 8114 	bne.w	800136c <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 810f 	bne.w	800136c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0202 	bic.w	r2, r2, #2
 800115c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001164:	2b02      	cmp	r3, #2
 8001166:	d101      	bne.n	800116c <HAL_DFSDM_IRQHandler+0xb8>
 8001168:	2201      	movs	r2, #1
 800116a:	e000      	b.n	800116e <HAL_DFSDM_IRQHandler+0xba>
 800116c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001174:	e0fa      	b.n	800136c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d034      	beq.n	80011ea <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001186:	2b00      	cmp	r3, #0
 8001188:	d02f      	beq.n	80011ea <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f902 	bl	8001394 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 80e5 	bne.w	800136e <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d112      	bne.n	80011d2 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d101      	bne.n	80011ca <HAL_DFSDM_IRQHandler+0x116>
 80011c6:	2201      	movs	r2, #1
 80011c8:	e000      	b.n	80011cc <HAL_DFSDM_IRQHandler+0x118>
 80011ca:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <HAL_DFSDM_IRQHandler+0x12e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	e000      	b.n	80011e4 <HAL_DFSDM_IRQHandler+0x130>
 80011e2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80011e8:	e0c1      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03d      	beq.n	8001270 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d038      	beq.n	8001270 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_DFSDM_IRQHandler+0x162>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_DFSDM_IRQHandler+0x164>
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001226:	e005      	b.n	8001234 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	3301      	adds	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_DFSDM_IRQHandler+0x190>
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	2b06      	cmp	r3, #6
 8001242:	d9f1      	bls.n	8001228 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_DFSDM_IRQHandler+0x1a2>
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	3308      	adds	r3, #8
 800124e:	2201      	movs	r2, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	e003      	b.n	800125e <HAL_DFSDM_IRQHandler+0x1aa>
 8001256:	2201      	movs	r2, #1
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f89d 	bl	80013a8 <HAL_DFSDM_FilterAwdCallback>
  {
 800126e:	e07e      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d141      	bne.n	80012fe <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001280:	2b00      	cmp	r3, #0
 8001282:	d03c      	beq.n	80012fe <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800128a:	2b00      	cmp	r3, #0
 800128c:	d037      	beq.n	80012fe <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	b2db      	uxtb	r3, r3
 800129c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800129e:	e02a      	b.n	80012f6 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01f      	beq.n	80012ea <HAL_DFSDM_IRQHandler+0x236>
 80012aa:	4a34      	ldr	r2, [pc, #208]	; (800137c <HAL_DFSDM_IRQHandler+0x2c8>)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80012b6:	4a31      	ldr	r2, [pc, #196]	; (800137c <HAL_DFSDM_IRQHandler+0x2c8>)
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00f      	beq.n	80012ea <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f103 0210 	add.w	r2, r3, #16
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_DFSDM_IRQHandler+0x2c8>)
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd0f 	bl	8000d08 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9d1      	bls.n	80012a0 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80012fc:	e037      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d132      	bne.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001318:	2b00      	cmp	r3, #0
 800131a:	d028      	beq.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0e1b      	lsrs	r3, r3, #24
 8001328:	b2db      	uxtb	r3, r3
 800132a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800132c:	e005      	b.n	800133a <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	3301      	adds	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_DFSDM_IRQHandler+0x296>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d9f1      	bls.n	800132e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f103 0218 	add.w	r2, r3, #24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_DFSDM_IRQHandler+0x2c8>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fcd9 	bl	8000d1c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 800136a:	e000      	b.n	800136e <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800136c:	bf00      	nop
}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40016100 	.word	0x40016100
 800137c:	20000030 	.word	0x20000030

08001380 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ffcc 	bl	8001380 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f003 f968 	bl	80046d4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2203      	movs	r2, #3
 800141e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff ffcd 	bl	80013c0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <DFSDM_GetChannelFromInstance+0x7c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e02b      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <DFSDM_GetChannelFromInstance+0x80>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d102      	bne.n	8001454 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e024      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <DFSDM_GetChannelFromInstance+0x84>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d102      	bne.n	8001462 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e01d      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <DFSDM_GetChannelFromInstance+0x88>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d102      	bne.n	8001470 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e016      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <DFSDM_GetChannelFromInstance+0x8c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d102      	bne.n	800147e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001478:	2305      	movs	r3, #5
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e00f      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <DFSDM_GetChannelFromInstance+0x90>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d102      	bne.n	800148c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001486:	2306      	movs	r3, #6
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e008      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <DFSDM_GetChannelFromInstance+0x94>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d102      	bne.n	800149a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001494:	2307      	movs	r3, #7
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e001      	b.n	800149e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800149a:	2303      	movs	r3, #3
 800149c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40016000 	.word	0x40016000
 80014b0:	40016020 	.word	0x40016020
 80014b4:	40016040 	.word	0x40016040
 80014b8:	40016080 	.word	0x40016080
 80014bc:	400160a0 	.word	0x400160a0
 80014c0:	400160c0 	.word	0x400160c0
 80014c4:	400160e0 	.word	0x400160e0

080014c8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e033      	b.n	8001552 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001508:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001520:	2b03      	cmp	r3, #3
 8001522:	d116      	bne.n	8001552 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0202 	orr.w	r2, r2, #2
 800153a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <DFSDM_RegConvStart+0x84>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	e000      	b.n	800154e <DFSDM_RegConvStart+0x86>
 800154c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <DFSDM_RegConvStart+0x98>
 800155c:	2202      	movs	r2, #2
 800155e:	e000      	b.n	8001562 <DFSDM_RegConvStart+0x9a>
 8001560:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80015a2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d116      	bne.n	80015ec <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0202 	orr.w	r2, r2, #2
 80015d4:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d102      	bne.n	80015e6 <DFSDM_RegConvStop+0x72>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	e000      	b.n	80015e8 <DFSDM_RegConvStop+0x74>
 80015e6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d101      	bne.n	80015fa <DFSDM_RegConvStop+0x86>
 80015f6:	2201      	movs	r2, #1
 80015f8:	e000      	b.n	80015fc <DFSDM_RegConvStop+0x88>
 80015fa:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e08d      	b.n	800173e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_DMA_Init+0x138>)
 800162a:	429a      	cmp	r2, r3
 800162c:	d80f      	bhi.n	800164e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_DMA_Init+0x13c>)
 8001636:	4413      	add	r3, r2
 8001638:	4a45      	ldr	r2, [pc, #276]	; (8001750 <HAL_DMA_Init+0x140>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	009a      	lsls	r2, r3, #2
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a42      	ldr	r2, [pc, #264]	; (8001754 <HAL_DMA_Init+0x144>)
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
 800164c:	e00e      	b.n	800166c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_DMA_Init+0x148>)
 8001656:	4413      	add	r3, r2
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_DMA_Init+0x140>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	009a      	lsls	r2, r3, #2
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a3c      	ldr	r2, [pc, #240]	; (800175c <HAL_DMA_Init+0x14c>)
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fa12 	bl	8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016cc:	d102      	bne.n	80016d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016e8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d010      	beq.n	8001714 <HAL_DMA_Init+0x104>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d80c      	bhi.n	8001714 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fa32 	bl	8001b64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	e008      	b.n	8001726 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020407 	.word	0x40020407
 800174c:	bffdfff8 	.word	0xbffdfff8
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	40020000 	.word	0x40020000
 8001758:	bffdfbf8 	.word	0xbffdfbf8
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_DMA_Start_IT+0x20>
 800177c:	2302      	movs	r3, #2
 800177e:	e066      	b.n	800184e <HAL_DMA_Start_IT+0xee>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d155      	bne.n	8001840 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f957 	bl	8001a6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 020e 	orr.w	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e00f      	b.n	80017f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0204 	bic.w	r2, r2, #4
 80017e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 020a 	orr.w	r2, r2, #10
 80017f6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800182c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e005      	b.n	800184c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800184c:	7dfb      	ldrb	r3, [r7, #23]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d008      	beq.n	8001880 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e040      	b.n	8001902 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	f003 021c 	and.w	r2, r3, #28
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00c      	beq.n	80018f0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f003 031c 	and.w	r3, r3, #28
 800192e:	2204      	movs	r2, #4
 8001930:	409a      	lsls	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d026      	beq.n	8001988 <HAL_DMA_IRQHandler+0x7a>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d021      	beq.n	8001988 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	2b00      	cmp	r3, #0
 8001950:	d107      	bne.n	8001962 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0204 	bic.w	r2, r2, #4
 8001960:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 021c 	and.w	r2, r3, #28
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2104      	movs	r1, #4
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	2b00      	cmp	r3, #0
 800197c:	d071      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001986:	e06c      	b.n	8001a62 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f003 031c 	and.w	r3, r3, #28
 8001990:	2202      	movs	r2, #2
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d02e      	beq.n	80019fa <HAL_DMA_IRQHandler+0xec>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10b      	bne.n	80019cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020a 	bic.w	r2, r2, #10
 80019c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	f003 021c 	and.w	r2, r3, #28
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2102      	movs	r1, #2
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d038      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019f8:	e033      	b.n	8001a62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f003 031c 	and.w	r3, r3, #28
 8001a02:	2208      	movs	r2, #8
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d02a      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x156>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d025      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 020e 	bic.w	r2, r2, #14
 8001a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f003 021c 	and.w	r2, r3, #28
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
}
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a82:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a94:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 021c 	and.w	r2, r3, #28
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d80a      	bhi.n	8001b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b08:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6493      	str	r3, [r2, #72]	; 0x48
 8001b10:	e007      	b.n	8001b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	009a      	lsls	r2, r3, #2
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3b08      	subs	r3, #8
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b38:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2201      	movs	r2, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40020407 	.word	0x40020407
 8001b58:	4002081c 	.word	0x4002081c
 8001b5c:	cccccccd 	.word	0xcccccccd
 8001b60:	40020880 	.word	0x40020880

08001b64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2201      	movs	r2, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	1000823f 	.word	0x1000823f
 8001ba8:	40020940 	.word	0x40020940

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e166      	b.n	8001e8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8158 	beq.w	8001e84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80b2 	beq.w	8001e84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_GPIO_Init+0x2fc>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <HAL_GPIO_Init+0x2fc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <HAL_GPIO_Init+0x2fc>)
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a5c      	ldr	r2, [pc, #368]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d02b      	beq.n	8001dbc <HAL_GPIO_Init+0x210>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_GPIO_Init+0x304>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d025      	beq.n	8001db8 <HAL_GPIO_Init+0x20c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_GPIO_Init+0x308>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01f      	beq.n	8001db4 <HAL_GPIO_Init+0x208>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a50      	ldr	r2, [pc, #320]	; (8001eb8 <HAL_GPIO_Init+0x30c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d019      	beq.n	8001db0 <HAL_GPIO_Init+0x204>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a4f      	ldr	r2, [pc, #316]	; (8001ebc <HAL_GPIO_Init+0x310>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x200>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <HAL_GPIO_Init+0x314>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1fc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x318>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1f8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4c      	ldr	r2, [pc, #304]	; (8001ec8 <HAL_GPIO_Init+0x31c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1f4>
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	e00e      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001da0:	2308      	movs	r3, #8
 8001da2:	e00c      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001da4:	2306      	movs	r3, #6
 8001da6:	e00a      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001da8:	2305      	movs	r3, #5
 8001daa:	e008      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001dac:	2304      	movs	r3, #4
 8001dae:	e006      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001db0:	2303      	movs	r3, #3
 8001db2:	e004      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_GPIO_Init+0x212>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	f002 0203 	and.w	r2, r2, #3
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	4093      	lsls	r3, r2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dce:	4937      	ldr	r1, [pc, #220]	; (8001eac <HAL_GPIO_Init+0x300>)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e00:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e2a:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_GPIO_Init+0x320>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f ae91 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	48000c00 	.word	0x48000c00
 8001ebc:	48001000 	.word	0x48001000
 8001ec0:	48001400 	.word	0x48001400
 8001ec4:	48001800 	.word	0x48001800
 8001ec8:	48001c00 	.word	0x48001c00
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fb7c 	bl	800464c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f70:	d102      	bne.n	8001f78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f76:	e00b      	b.n	8001f90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f86:	d102      	bne.n	8001f8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8c:	e000      	b.n	8001f90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d141      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fae:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d131      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd4:	4a41      	ldr	r2, [pc, #260]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2232      	movs	r2, #50	; 0x32
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	e002      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002006:	d102      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d158      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e057      	b.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800202c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002030:	e04d      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d141      	bne.n	80020be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d131      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800204e:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2232      	movs	r2, #50	; 0x32
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207e:	e002      	b.n	8002086 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b01      	subs	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002092:	d102      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f2      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d112      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e011      	b.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020bc:	e007      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40007000 	.word	0x40007000
 80020e0:	20000008 	.word	0x20000008
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f000 bc08 	b.w	800290c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fc:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002106:	4b94      	ldr	r3, [pc, #592]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80e4 	beq.w	80022e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_RCC_OscConfig+0x4c>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	f040 808b 	bne.w	8002242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b01      	cmp	r3, #1
 8002130:	f040 8087 	bne.w	8002242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002134:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x64>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e3df      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <HAL_RCC_OscConfig+0x7e>
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	e005      	b.n	8002172 <HAL_RCC_OscConfig+0x8a>
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	4293      	cmp	r3, r2
 8002174:	d223      	bcs.n	80021be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fda0 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e3c0      	b.n	800290c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a72      	ldr	r2, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b70      	ldr	r3, [pc, #448]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	496d      	ldr	r1, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a8:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4968      	ldr	r1, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e025      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4960      	ldr	r1, [pc, #384]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	495b      	ldr	r1, [pc, #364]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fd60 	bl	8002cc0 <RCC_SetFlashLatencyFromMSIRange>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e380      	b.n	800290c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220a:	f000 fcc1 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4950      	ldr	r1, [pc, #320]	; (800235c <HAL_RCC_OscConfig+0x274>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800222a:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <HAL_RCC_OscConfig+0x27c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd fffc 	bl	800022c <HAL_InitTick>
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d052      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	e364      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d032      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a42      	ldr	r2, [pc, #264]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002256:	f7fe f839 	bl	80002cc <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225e:	f7fe f835 	bl	80002cc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e34d      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4930      	ldr	r1, [pc, #192]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	492b      	ldr	r1, [pc, #172]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
 80022ae:	e01a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022bc:	f7fe f806 	bl	80002cc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7fe f802 	bl	80002cc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e31a      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1dc>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d073      	beq.n	80023da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x21c>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d10e      	bne.n	800231c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d063      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d15f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2f7      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x24c>
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e025      	b.n	8002380 <HAL_RCC_OscConfig+0x298>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d114      	bne.n	8002368 <HAL_RCC_OscConfig+0x280>
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a02      	ldr	r2, [pc, #8]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e013      	b.n	8002380 <HAL_RCC_OscConfig+0x298>
 8002358:	40021000 	.word	0x40021000
 800235c:	08004d9c 	.word	0x08004d9c
 8002360:	20000008 	.word	0x20000008
 8002364:	20000000 	.word	0x20000000
 8002368:	4ba0      	ldr	r3, [pc, #640]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a9f      	ldr	r2, [pc, #636]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b9d      	ldr	r3, [pc, #628]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a9c      	ldr	r2, [pc, #624]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fd ffa0 	bl	80002cc <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7fd ff9c 	bl	80002cc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2b4      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a2:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x2a8>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fd ff8c 	bl	80002cc <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fd ff88 	bl	80002cc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2a0      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ca:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2d0>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d060      	beq.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_OscConfig+0x310>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d116      	bne.n	8002426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f8:	4b7c      	ldr	r3, [pc, #496]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x328>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e27d      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	4973      	ldr	r1, [pc, #460]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	e040      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d023      	beq.n	8002476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fd ff47 	bl	80002cc <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fd ff43 	bl	80002cc <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e25b      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	495f      	ldr	r1, [pc, #380]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	e018      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5c      	ldr	r2, [pc, #368]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800247c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fd ff23 	bl	80002cc <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7fd ff1f 	bl	80002cc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e237      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03c      	beq.n	800252e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c2:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fd fefe 	bl	80002cc <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fd fefa 	bl	80002cc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e212      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x3ec>
 80024f4:	e01b      	b.n	800252e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80024f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fc:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fd fee1 	bl	80002cc <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7fd fedd 	bl	80002cc <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1f5      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a6 	beq.w	8002688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	4a26      	ldr	r2, [pc, #152]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	6593      	str	r3, [r2, #88]	; 0x58
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x508>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_OscConfig+0x508>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_RCC_OscConfig+0x508>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002580:	f7fd fea4 	bl	80002cc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7fd fea0 	bl	80002cc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1b8      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x508>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4d8>
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025be:	e029      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d115      	bne.n	80025f4 <HAL_RCC_OscConfig+0x50c>
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a03      	ldr	r2, [pc, #12]	; (80025ec <HAL_RCC_OscConfig+0x504>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	4b9d      	ldr	r3, [pc, #628]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a9c      	ldr	r2, [pc, #624]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002604:	4b99      	ldr	r3, [pc, #612]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a98      	ldr	r2, [pc, #608]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d016      	beq.n	800264a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fd fe56 	bl	80002cc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fd fe52 	bl	80002cc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e168      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	4b8c      	ldr	r3, [pc, #560]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ed      	beq.n	8002624 <HAL_RCC_OscConfig+0x53c>
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fd fe3f 	bl	80002cc <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7fd fe3b 	bl	80002cc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e151      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	4b80      	ldr	r3, [pc, #512]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ed      	bne.n	8002652 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b7b      	ldr	r3, [pc, #492]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a7a      	ldr	r2, [pc, #488]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03c      	beq.n	800270e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800269e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a2:	4a72      	ldr	r2, [pc, #456]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fd fe0e 	bl	80002cc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b4:	f7fd fe0a 	bl	80002cc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e122      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c6:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80026c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x5cc>
 80026d4:	e01b      	b.n	800270e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d6:	4b65      	ldr	r3, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80026d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026dc:	4a63      	ldr	r2, [pc, #396]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fd fdf1 	bl	80002cc <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ee:	f7fd fded 	bl	80002cc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e105      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002700:	4b5a      	ldr	r3, [pc, #360]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80f9 	beq.w	800290a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2b02      	cmp	r3, #2
 800271e:	f040 80cf 	bne.w	80028c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	429a      	cmp	r2, r3
 8002734:	d12c      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	3b01      	subs	r3, #1
 8002742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d123      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d11b      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d113      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d109      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d071      	beq.n	8002874 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d068      	beq.n	8002868 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0ac      	b.n	800290c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80027b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027be:	f7fd fd85 	bl	80002cc <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fd fd81 	bl	80002cc <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e099      	b.n	800290c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_RCC_OscConfig+0x784>)
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_OscConfig+0x788>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027f4:	3a01      	subs	r2, #1
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	4311      	orrs	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027fe:	0212      	lsls	r2, r2, #8
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002806:	0852      	lsrs	r2, r2, #1
 8002808:	3a01      	subs	r2, #1
 800280a:	0552      	lsls	r2, r2, #21
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002812:	0852      	lsrs	r2, r2, #1
 8002814:	3a01      	subs	r2, #1
 8002816:	0652      	lsls	r2, r2, #25
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800281e:	06d2      	lsls	r2, r2, #27
 8002820:	430a      	orrs	r2, r1
 8002822:	4912      	ldr	r1, [pc, #72]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002824:	4313      	orrs	r3, r2
 8002826:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002834:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_RCC_OscConfig+0x784>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002840:	f7fd fd44 	bl	80002cc <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fd fd40 	bl	80002cc <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e058      	b.n	800290c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_RCC_OscConfig+0x784>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002866:	e050      	b.n	800290a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e04f      	b.n	800290c <HAL_RCC_OscConfig+0x824>
 800286c:	40021000 	.word	0x40021000
 8002870:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d144      	bne.n	800290a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002898:	f7fd fd18 	bl	80002cc <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fd fd14 	bl	80002cc <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e02c      	b.n	800290c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x7b8>
 80028be:	e024      	b.n	800290a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d01f      	beq.n	8002906 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fd fcfb 	bl	80002cc <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fd fcf7 	bl	80002cc <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e00f      	b.n	800290c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4905      	ldr	r1, [pc, #20]	; (8002914 <HAL_RCC_OscConfig+0x82c>)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x830>)
 8002900:	4013      	ands	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
 8002904:	e001      	b.n	800290a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	feeefffc 	.word	0xfeeefffc

0800291c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e11d      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b90      	ldr	r3, [pc, #576]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d910      	bls.n	8002964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 020f 	bic.w	r2, r3, #15
 800294a:	498b      	ldr	r1, [pc, #556]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b89      	ldr	r3, [pc, #548]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e105      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d010      	beq.n	8002992 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	429a      	cmp	r2, r3
 800297e:	d908      	bls.n	8002992 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	497b      	ldr	r1, [pc, #492]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d079      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d11e      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0dc      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029b6:	f000 f9dd 	bl	8002d74 <RCC_GetSysClockFreqFromPLLSource>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a70      	ldr	r2, [pc, #448]	; (8002b80 <HAL_RCC_ClockConfig+0x264>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d946      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029c2:	4b6e      	ldr	r3, [pc, #440]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d140      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029ce:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d6:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e035      	b.n	8002a50 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b9      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a04:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0ad      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0a5      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a24:	f000 f8b4 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4a55      	ldr	r2, [pc, #340]	; (8002b80 <HAL_RCC_ClockConfig+0x264>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d90f      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a30:	4b52      	ldr	r3, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a44:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a50:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 0203 	bic.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4947      	ldr	r1, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a62:	f7fd fc33 	bl	80002cc <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fd fc2f 	bl	80002cc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e077      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 020c 	and.w	r2, r3, #12
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d1eb      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a98:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a37      	ldr	r2, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d208      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	492b      	ldr	r1, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d210      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 020f 	bic.w	r2, r3, #15
 8002ae8:	4923      	ldr	r1, [pc, #140]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_ClockConfig+0x25c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e036      	b.n	8002b70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4918      	ldr	r1, [pc, #96]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4910      	ldr	r1, [pc, #64]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b40:	f000 f826 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_ClockConfig+0x260>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <HAL_RCC_ClockConfig+0x268>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x26c>)
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fb61 	bl	800022c <HAL_InitTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	04c4b400 	.word	0x04c4b400
 8002b84:	08004d9c 	.word	0x08004d9c
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d121      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11e      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bd0:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	e005      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e004      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d134      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d003      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xac>
 8002c34:	e005      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c38:	617b      	str	r3, [r7, #20]
      break;
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c3e:	617b      	str	r3, [r7, #20]
      break;
 8002c40:	e002      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3301      	adds	r3, #1
 8002c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	fb03 f202 	mul.w	r2, r3, r2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	0e5b      	lsrs	r3, r3, #25
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c88:	69bb      	ldr	r3, [r7, #24]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08004dac 	.word	0x08004dac
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cd8:	f7ff f942 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002cdc:	6178      	str	r0, [r7, #20]
 8002cde:	e014      	b.n	8002d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	; 0x58
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cf8:	f7ff f932 	bl	8001f60 <HAL_PWREx_GetVoltageRange>
 8002cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d10b      	bne.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d913      	bls.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d1c:	d902      	bls.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d1e:	2302      	movs	r3, #2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e00d      	b.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	e00a      	b.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d2e:	d902      	bls.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d30:	2302      	movs	r3, #2
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	e004      	b.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d101      	bne.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 020f 	bic.w	r2, r3, #15
 8002d48:	4909      	ldr	r1, [pc, #36]	; (8002d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40022000 	.word	0x40022000

08002d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d00b      	beq.n	8002da2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d825      	bhi.n	8002ddc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d008      	beq.n	8002da8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11f      	bne.n	8002ddc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d9e:	613b      	str	r3, [r7, #16]
    break;
 8002da0:	e01f      	b.n	8002de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002da4:	613b      	str	r3, [r7, #16]
    break;
 8002da6:	e01c      	b.n	8002de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e005      	b.n	8002dd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002dd0:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	613b      	str	r3, [r7, #16]
    break;
 8002dda:	e002      	b.n	8002de2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
    break;
 8002de0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	3301      	adds	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	fb03 f202 	mul.w	r2, r3, r2
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0e5b      	lsrs	r3, r3, #25
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e22:	683b      	ldr	r3, [r7, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40021000 	.word	0x40021000
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200
 8002e3c:	08004dac 	.word	0x08004dac

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e48:	2300      	movs	r3, #0
 8002e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d040      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d02a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d825      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e68:	2b60      	cmp	r3, #96	; 0x60
 8002e6a:	d026      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d821      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d006      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d81d      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e80:	e018      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e82:	4b89      	ldr	r3, [pc, #548]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a88      	ldr	r2, [pc, #544]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e8e:	e015      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fb02 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea0:	e00c      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3320      	adds	r3, #32
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fbed 	bl	8003688 <RCCEx_PLLSAI2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb2:	e003      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	74fb      	strb	r3, [r7, #19]
      break;
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec2:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ec8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed0:	4975      	ldr	r1, [pc, #468]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ed8:	e001      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d047      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d030      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d82a      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efe:	d02a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f04:	d824      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	d81e      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f1c:	e018      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1e:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f2a:	e015      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fab4 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f3c:	e00c      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3320      	adds	r3, #32
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb9f 	bl	8003688 <RCCEx_PLLSAI2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	74fb      	strb	r3, [r7, #19]
      break;
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f5e:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	494e      	ldr	r1, [pc, #312]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f74:	e001      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 809f 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fca:	f7fd f97f 	bl	80002cc <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fd f97b 	bl	80002cc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d902      	bls.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ef      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d15b      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01f      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	429a      	cmp	r2, r3
 8003014:	d019      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003042:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fd f93a 	bl	80002cc <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	e00b      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd f936 	bl	80002cc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d902      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	74fb      	strb	r3, [r7, #19]
            break;
 8003072:	e006      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ec      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030a0:	e008      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
 80030a6:	e005      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4ba0      	ldr	r3, [pc, #640]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a9f      	ldr	r2, [pc, #636]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4b9a      	ldr	r3, [pc, #616]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	4996      	ldr	r1, [pc, #600]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b91      	ldr	r3, [pc, #580]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	498e      	ldr	r1, [pc, #568]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	4985      	ldr	r1, [pc, #532]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003138:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003146:	497d      	ldr	r1, [pc, #500]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315a:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	4974      	ldr	r1, [pc, #464]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	496c      	ldr	r1, [pc, #432]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ac:	4963      	ldr	r1, [pc, #396]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c0:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	495b      	ldr	r1, [pc, #364]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	4952      	ldr	r1, [pc, #328]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	494a      	ldr	r1, [pc, #296]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003226:	4b45      	ldr	r3, [pc, #276]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	4941      	ldr	r1, [pc, #260]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	4939      	ldr	r1, [pc, #228]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800326a:	4b34      	ldr	r3, [pc, #208]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003278:	4930      	ldr	r1, [pc, #192]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d106      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800328a:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a2b      	ldr	r2, [pc, #172]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003294:	60d3      	str	r3, [r2, #12]
 8003296:	e011      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f8f9 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d0:	d108      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d8:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032e2:	e012      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ea:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003302:	490e      	ldr	r1, [pc, #56]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003312:	d106      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a08      	ldr	r2, [pc, #32]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331e:	60d3      	str	r3, [r2, #12]
 8003320:	e020      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332a:	d109      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a02      	ldr	r2, [pc, #8]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	e014      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f8a5 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d028      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337e:	4947      	ldr	r1, [pc, #284]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800338e:	d106      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a41      	ldr	r2, [pc, #260]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339a:	60d3      	str	r3, [r2, #12]
 800339c:	e011      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f876 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01e      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	492f      	ldr	r1, [pc, #188]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033f0:	d10c      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f851 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003418:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800341e:	f023 0204 	bic.w	r2, r3, #4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	491c      	ldr	r1, [pc, #112]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003442:	f023 0218 	bic.w	r2, r3, #24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003470:	490a      	ldr	r1, [pc, #40]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003482:	d105      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003490:	7cbb      	ldrb	r3, [r7, #18]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000

080034a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d103      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
       ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d142      	bne.n	8003558 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e03f      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d018      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x72>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d825      	bhi.n	8003530 <RCCEx_PLLSAI1_Config+0x90>
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x4e>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d009      	beq.n	8003500 <RCCEx_PLLSAI1_Config+0x60>
 80034ec:	e020      	b.n	8003530 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ee:	4b62      	ldr	r3, [pc, #392]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11d      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e01a      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003500:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e013      	b.n	800353a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003512:	4b59      	ldr	r3, [pc, #356]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351e:	4b56      	ldr	r3, [pc, #344]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352e:	e006      	b.n	800353e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e004      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800353e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 0203 	bic.w	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4949      	ldr	r1, [pc, #292]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 8086 	bne.w	800366c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003560:	4b45      	ldr	r3, [pc, #276]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a44      	ldr	r2, [pc, #272]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003566:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800356a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fc feae 	bl	80002cc <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003572:	e009      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003574:	f7fc feaa 	bl	80002cc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d902      	bls.n	8003588 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	73fb      	strb	r3, [r7, #15]
        break;
 8003586:	e005      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003588:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ef      	bne.n	8003574 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d168      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	06d2      	lsls	r2, r2, #27
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6852      	ldr	r2, [r2, #4]
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	430a      	orrs	r2, r1
 80035c0:	492d      	ldr	r1, [pc, #180]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]
 80035c6:	e02d      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d115      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	0211      	lsls	r1, r2, #8
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6912      	ldr	r2, [r2, #16]
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6852      	ldr	r2, [r2, #4]
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4921      	ldr	r1, [pc, #132]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	610b      	str	r3, [r1, #16]
 80035f8:	e014      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	4b21      	ldr	r3, [pc, #132]	; (8003684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	0211      	lsls	r1, r2, #8
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6952      	ldr	r2, [r2, #20]
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
 8003610:	0652      	lsls	r2, r2, #25
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	3a01      	subs	r2, #1
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	430a      	orrs	r2, r1
 800361e:	4916      	ldr	r1, [pc, #88]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fc fe4c 	bl	80002cc <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003636:	e009      	b.n	800364c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003638:	f7fc fe48 	bl	80002cc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	73fb      	strb	r3, [r7, #15]
          break;
 800364a:	e005      	b.n	8003658 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	07ff800f 	.word	0x07ff800f
 8003680:	ff9f800f 	.word	0xff9f800f
 8003684:	f9ff800f 	.word	0xf9ff800f

08003688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d103      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
       ||
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d142      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e03f      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI2_Config+0x72>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI2_Config+0x90>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI2_Config+0x4e>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI2_Config+0x60>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b59      	ldr	r3, [pc, #356]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4949      	ldr	r1, [pc, #292]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 8086 	bne.w	8003854 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fc fdba 	bl	80002cc <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800375a:	e009      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800375c:	f7fc fdb6 	bl	80002cc <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	73fb      	strb	r3, [r7, #15]
        break;
 800376e:	e005      	b.n	800377c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ef      	bne.n	800375c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d168      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <RCCEx_PLLSAI2_Config+0x1dc>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	06d2      	lsls	r2, r2, #27
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	3a01      	subs	r2, #1
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	430a      	orrs	r2, r1
 80037a8:	492d      	ldr	r1, [pc, #180]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	614b      	str	r3, [r1, #20]
 80037ae:	e02d      	b.n	800380c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d115      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <RCCEx_PLLSAI2_Config+0x1e0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	0211      	lsls	r1, r2, #8
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6912      	ldr	r2, [r2, #16]
 80037c8:	0852      	lsrs	r2, r2, #1
 80037ca:	3a01      	subs	r2, #1
 80037cc:	0552      	lsls	r2, r2, #21
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	4921      	ldr	r1, [pc, #132]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	614b      	str	r3, [r1, #20]
 80037e0:	e014      	b.n	800380c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <RCCEx_PLLSAI2_Config+0x1e4>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0652      	lsls	r2, r2, #25
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6852      	ldr	r2, [r2, #4]
 8003800:	3a01      	subs	r2, #1
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	430a      	orrs	r2, r1
 8003806:	4916      	ldr	r1, [pc, #88]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fc fd58 	bl	80002cc <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003820:	f7fc fd54 	bl	80002cc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
          break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	07ff800f 	.word	0x07ff800f
 8003868:	ff9f800f 	.word	0xff9f800f
 800386c:	f9ff800f 	.word	0xf9ff800f

08003870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e049      	b.n	8003916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f001 f956 	bl	8004b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f000 fab8 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d001      	beq.n	8003938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e047      	b.n	80039c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_TIM_Base_Start+0xb4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01d      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d018      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_TIM_Base_Start+0xb8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <HAL_TIM_Base_Start+0xbc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_TIM_Base_Start+0xc0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <HAL_TIM_Base_Start+0xc4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIM_Base_Start+0x66>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_TIM_Base_Start+0xc8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d115      	bne.n	80039b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <HAL_TIM_Base_Start+0xcc>)
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d015      	beq.n	80039c4 <HAL_TIM_Base_Start+0xa4>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d011      	beq.n	80039c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	e008      	b.n	80039c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e000      	b.n	80039c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	00010007 	.word	0x00010007

080039f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d122      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0202 	mvn.w	r2, #2
 8003a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9d8 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f9ca 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f9db 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0204 	mvn.w	r2, #4
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9ae 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9a0 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f9b1 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0208 	mvn.w	r2, #8
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f984 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f976 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f987 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0210 	mvn.w	r2, #16
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f95a 	bl	8003de8 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f94c 	bl	8003dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f95d 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0201 	mvn.w	r2, #1
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f926 	bl	8003dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fb08 	bl	80041b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fafb 	bl	80041c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f90b 	bl	8003e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d10e      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0220 	mvn.w	r2, #32
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fabb 	bl	800419c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0b6      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x18a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d03e      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xd8>
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	f200 8087 	bhi.w	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c94:	f000 8086 	beq.w	8003da4 <HAL_TIM_ConfigClockSource+0x176>
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d87f      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003c9e:	2b70      	cmp	r3, #112	; 0x70
 8003ca0:	d01a      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0xaa>
 8003ca2:	2b70      	cmp	r3, #112	; 0x70
 8003ca4:	d87b      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003ca6:	2b60      	cmp	r3, #96	; 0x60
 8003ca8:	d050      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0x11e>
 8003caa:	2b60      	cmp	r3, #96	; 0x60
 8003cac:	d877      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003cae:	2b50      	cmp	r3, #80	; 0x50
 8003cb0:	d03c      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0xfe>
 8003cb2:	2b50      	cmp	r3, #80	; 0x50
 8003cb4:	d873      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d058      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0x13e>
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d86f      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d064      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x15e>
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	d86b      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d060      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x15e>
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d867      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d05c      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x15e>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d05a      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x15e>
 8003cd6:	e062      	b.n	8003d9e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	6899      	ldr	r1, [r3, #8]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f000 f9b0 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	609a      	str	r2, [r3, #8]
      break;
 8003d04:	e04f      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f000 f999 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d28:	609a      	str	r2, [r3, #8]
      break;
 8003d2a:	e03c      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f000 f90d 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2150      	movs	r1, #80	; 0x50
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f966 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d4a:	e02c      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f000 f92c 	bl	8003fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2160      	movs	r1, #96	; 0x60
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f956 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e01c      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f8ed 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f946 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f000 f93d 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003da4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <TIM_Base_SetConfig+0x114>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d013      	beq.n	8003e64 <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d00f      	beq.n	8003e64 <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3d      	ldr	r2, [pc, #244]	; (8003f3c <TIM_Base_SetConfig+0x118>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00b      	beq.n	8003e64 <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	; (8003f40 <TIM_Base_SetConfig+0x11c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3b      	ldr	r2, [pc, #236]	; (8003f44 <TIM_Base_SetConfig+0x120>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <TIM_Base_SetConfig+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <TIM_Base_SetConfig+0x114>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d01b      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <TIM_Base_SetConfig+0x118>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <TIM_Base_SetConfig+0x11c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <TIM_Base_SetConfig+0x120>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <TIM_Base_SetConfig+0x124>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a28      	ldr	r2, [pc, #160]	; (8003f4c <TIM_Base_SetConfig+0x128>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <TIM_Base_SetConfig+0x12c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_Base_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <TIM_Base_SetConfig+0x130>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <TIM_Base_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <TIM_Base_SetConfig+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <TIM_Base_SetConfig+0x128>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <TIM_Base_SetConfig+0x12c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0xf8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <TIM_Base_SetConfig+0x130>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d103      	bne.n	8003f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	615a      	str	r2, [r3, #20]
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 030a 	bic.w	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e068      	b.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2e      	ldr	r2, [pc, #184]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d018      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1a      	ldr	r2, [pc, #104]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a14      	ldr	r2, [pc, #80]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40014000 	.word	0x40014000

0800419c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for (int i = 0; i < 50000 ; i++){
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	e008      	b.n	80041f6 <main+0x1e>
		arrayOne[i] = (int32_t)500;
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <main+0x60>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80041ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50000 ; i++){
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80041fc:	4293      	cmp	r3, r2
 80041fe:	ddf1      	ble.n	80041e4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004200:	f7fb fffc 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004204:	f000 f822 	bl	800424c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004208:	f000 f994 	bl	8004534 <MX_GPIO_Init>
  MX_DMA_Init();
 800420c:	f000 f958 	bl	80044c0 <MX_DMA_Init>
  MX_DAC1_Init();
 8004210:	f000 f86e 	bl	80042f0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8004214:	f000 f906 	bl	8004424 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8004218:	f000 f89e 	bl	8004358 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  // INIT
  //HAL_StatusTypeDef HAL_DFSDM_ChannelInit(&hdfsdm1_channel2);
  //HAL_StatusTypeDef HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
  HAL_TIM_Base_Start(&htim2);
 800421c:	4807      	ldr	r0, [pc, #28]	; (800423c <main+0x64>)
 800421e:	f7ff fb7f 	bl	8003920 <HAL_TIM_Base_Start>
  HAL_DMA_Init(&hdma_dac1_ch1);
 8004222:	4807      	ldr	r0, [pc, #28]	; (8004240 <main+0x68>)
 8004224:	f7fd f9f4 	bl	8001610 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_dfsdm1_flt0);
 8004228:	4806      	ldr	r0, [pc, #24]	; (8004244 <main+0x6c>)
 800422a:	f7fd f9f1 	bl	8001610 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_tim2_up);
 800422e:	4806      	ldr	r0, [pc, #24]	; (8004248 <main+0x70>)
 8004230:	f7fd f9ee 	bl	8001610 <HAL_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004234:	e7fe      	b.n	8004234 <main+0x5c>
 8004236:	bf00      	nop
 8004238:	2000025c 	.word	0x2000025c
 800423c:	200001b0 	.word	0x200001b0
 8004240:	20000064 	.word	0x20000064
 8004244:	20000150 	.word	0x20000150
 8004248:	200001fc 	.word	0x200001fc

0800424c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b096      	sub	sp, #88	; 0x58
 8004250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004252:	f107 0314 	add.w	r3, r7, #20
 8004256:	2244      	movs	r2, #68	; 0x44
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fd8a 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004260:	463b      	mov	r3, r7
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800426e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004272:	f7fd fe95 	bl	8001fa0 <HAL_PWREx_ControlVoltageScaling>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800427c:	f000 faa8 	bl	80047d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004280:	2310      	movs	r3, #16
 8004282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004284:	2301      	movs	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800428c:	2360      	movs	r3, #96	; 0x60
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004290:	2302      	movs	r3, #2
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004294:	2301      	movs	r3, #1
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004298:	2301      	movs	r3, #1
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800429c:	2328      	movs	r3, #40	; 0x28
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042a0:	2302      	movs	r3, #2
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042a4:	2302      	movs	r3, #2
 80042a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042a8:	2302      	movs	r3, #2
 80042aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd ff19 	bl	80020e8 <HAL_RCC_OscConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80042bc:	f000 fa88 	bl	80047d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042c0:	230f      	movs	r3, #15
 80042c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042c4:	2303      	movs	r3, #3
 80042c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042d0:	2300      	movs	r3, #0
 80042d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042d4:	463b      	mov	r3, r7
 80042d6:	2103      	movs	r1, #3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe fb1f 	bl	800291c <HAL_RCC_ClockConfig>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80042e4:	f000 fa74 	bl	80047d0 <Error_Handler>
  }
}
 80042e8:	bf00      	nop
 80042ea:	3758      	adds	r7, #88	; 0x58
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80042f6:	463b      	mov	r3, r7
 80042f8:	2228      	movs	r2, #40	; 0x28
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fd39 	bl	8004d74 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <MX_DAC1_Init+0x60>)
 8004304:	4a13      	ldr	r2, [pc, #76]	; (8004354 <MX_DAC1_Init+0x64>)
 8004306:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004308:	4811      	ldr	r0, [pc, #68]	; (8004350 <MX_DAC1_Init+0x60>)
 800430a:	f7fc f920 	bl	800054e <HAL_DAC_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004314:	f000 fa5c 	bl	80047d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800431c:	230a      	movs	r3, #10
 800431e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004330:	463b      	mov	r3, r7
 8004332:	2200      	movs	r2, #0
 8004334:	4619      	mov	r1, r3
 8004336:	4806      	ldr	r0, [pc, #24]	; (8004350 <MX_DAC1_Init+0x60>)
 8004338:	f7fc fa5c 	bl	80007f4 <HAL_DAC_ConfigChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8004342:	f000 fa45 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004346:	bf00      	nop
 8004348:	3728      	adds	r7, #40	; 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000050 	.word	0x20000050
 8004354:	40007400 	.word	0x40007400

08004358 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 800435e:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <MX_DFSDM1_Init+0xbc>)
 8004360:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 800436a:	2201      	movs	r2, #1
 800436c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 8004370:	2201      	movs	r2, #1
 8004372:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 8004376:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800437a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 52;
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 800437e:	2234      	movs	r2, #52	; 0x34
 8004380:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 8004384:	2201      	movs	r2, #1
 8004386:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8004388:	4821      	ldr	r0, [pc, #132]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 800438a:	f7fc fcd1 	bl	8000d30 <HAL_DFSDM_FilterInit>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8004394:	f000 fa1c 	bl	80047d0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <MX_DFSDM1_Init+0xc4>)
 800439c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 35;
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043ac:	2223      	movs	r2, #35	; 0x23
 80043ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043ca:	2204      	movs	r2, #4
 80043cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80043e6:	480c      	ldr	r0, [pc, #48]	; (8004418 <MX_DFSDM1_Init+0xc0>)
 80043e8:	f7fc fbce 	bl	8000b88 <HAL_DFSDM_ChannelInit>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80043f2:	f000 f9ed 	bl	80047d0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80043f6:	2201      	movs	r2, #1
 80043f8:	4909      	ldr	r1, [pc, #36]	; (8004420 <MX_DFSDM1_Init+0xc8>)
 80043fa:	4805      	ldr	r0, [pc, #20]	; (8004410 <MX_DFSDM1_Init+0xb8>)
 80043fc:	f7fc fd72 	bl	8000ee4 <HAL_DFSDM_FilterConfigRegChannel>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8004406:	f000 f9e3 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200000c4 	.word	0x200000c4
 8004414:	40016100 	.word	0x40016100
 8004418:	20000118 	.word	0x20000118
 800441c:	40016040 	.word	0x40016040
 8004420:	00020004 	.word	0x00020004

08004424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800442a:	f107 0310 	add.w	r3, r7, #16
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <MX_TIM2_Init+0x98>)
 8004444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004448:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <MX_TIM2_Init+0x98>)
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004450:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <MX_TIM2_Init+0x98>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1810;
 8004456:	4b19      	ldr	r3, [pc, #100]	; (80044bc <MX_TIM2_Init+0x98>)
 8004458:	f240 7212 	movw	r2, #1810	; 0x712
 800445c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <MX_TIM2_Init+0x98>)
 8004460:	2200      	movs	r2, #0
 8004462:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <MX_TIM2_Init+0x98>)
 8004466:	2200      	movs	r2, #0
 8004468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800446a:	4814      	ldr	r0, [pc, #80]	; (80044bc <MX_TIM2_Init+0x98>)
 800446c:	f7ff fa00 	bl	8003870 <HAL_TIM_Base_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004476:	f000 f9ab 	bl	80047d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800447a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	4619      	mov	r1, r3
 8004486:	480d      	ldr	r0, [pc, #52]	; (80044bc <MX_TIM2_Init+0x98>)
 8004488:	f7ff fbd1 	bl	8003c2e <HAL_TIM_ConfigClockSource>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004492:	f000 f99d 	bl	80047d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004496:	2320      	movs	r3, #32
 8004498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4806      	ldr	r0, [pc, #24]	; (80044bc <MX_TIM2_Init+0x98>)
 80044a4:	f7ff fdf2 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80044ae:	f000 f98f 	bl	80047d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044b2:	bf00      	nop
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200001b0 	.word	0x200001b0

080044c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <MX_DMA_Init+0x70>)
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <MX_DMA_Init+0x70>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	6493      	str	r3, [r2, #72]	; 0x48
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <MX_DMA_Init+0x70>)
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <MX_DMA_Init+0x70>)
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <MX_DMA_Init+0x70>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6493      	str	r3, [r2, #72]	; 0x48
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <MX_DMA_Init+0x70>)
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2100      	movs	r1, #0
 80044fa:	200b      	movs	r0, #11
 80044fc:	f7fb fff1 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004500:	200b      	movs	r0, #11
 8004502:	f7fc f80a 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	200c      	movs	r0, #12
 800450c:	f7fb ffe9 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004510:	200c      	movs	r0, #12
 8004512:	f7fc f802 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	200d      	movs	r0, #13
 800451c:	f7fb ffe1 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004520:	200d      	movs	r0, #13
 8004522:	f7fb fffa 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000

08004534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453a:	f107 0314 	add.w	r3, r7, #20
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	609a      	str	r2, [r3, #8]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <MX_GPIO_Init+0x108>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <MX_GPIO_Init+0x108>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <MX_GPIO_Init+0x108>)
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <MX_GPIO_Init+0x108>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	4a35      	ldr	r2, [pc, #212]	; (800463c <MX_GPIO_Init+0x108>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <MX_GPIO_Init+0x108>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <MX_GPIO_Init+0x108>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <MX_GPIO_Init+0x108>)
 8004580:	f043 0310 	orr.w	r3, r3, #16
 8004584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <MX_GPIO_Init+0x108>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	4b2a      	ldr	r3, [pc, #168]	; (800463c <MX_GPIO_Init+0x108>)
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	4a29      	ldr	r2, [pc, #164]	; (800463c <MX_GPIO_Init+0x108>)
 8004598:	f043 0302 	orr.w	r3, r3, #2
 800459c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <MX_GPIO_Init+0x108>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <MX_GPIO_Init+0x108>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	4a23      	ldr	r2, [pc, #140]	; (800463c <MX_GPIO_Init+0x108>)
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <MX_GPIO_Init+0x108>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80045c2:	2200      	movs	r2, #0
 80045c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045c8:	481d      	ldr	r0, [pc, #116]	; (8004640 <MX_GPIO_Init+0x10c>)
 80045ca:	f7fd fc99 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 80045ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80045d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4619      	mov	r1, r3
 80045e4:	4817      	ldr	r0, [pc, #92]	; (8004644 <MX_GPIO_Init+0x110>)
 80045e6:	f7fd fae1 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80045ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045f0:	2301      	movs	r3, #1
 80045f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f8:	2300      	movs	r3, #0
 80045fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	4619      	mov	r1, r3
 8004602:	480f      	ldr	r0, [pc, #60]	; (8004640 <MX_GPIO_Init+0x10c>)
 8004604:	f7fd fad2 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800460c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800460e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	4619      	mov	r1, r3
 800461e:	480a      	ldr	r0, [pc, #40]	; (8004648 <MX_GPIO_Init+0x114>)
 8004620:	f7fd fac4 	bl	8001bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004624:	2200      	movs	r2, #0
 8004626:	2100      	movs	r1, #0
 8004628:	2028      	movs	r0, #40	; 0x28
 800462a:	f7fb ff5a 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800462e:	2028      	movs	r0, #40	; 0x28
 8004630:	f7fb ff73 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 8004634:	bf00      	nop
 8004636:	3728      	adds	r7, #40	; 0x28
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	48000400 	.word	0x48000400
 8004644:	48000800 	.word	0x48000800
 8004648:	48000c00 	.word	0x48000c00

0800464c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]

	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004656:	2100      	movs	r1, #0
 8004658:	481a      	ldr	r0, [pc, #104]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x78>)
 800465a:	f7fc f867 	bl	800072c <HAL_DAC_Stop_DMA>
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800465e:	481a      	ldr	r0, [pc, #104]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8004660:	f7fc fd08 	bl	8001074 <HAL_DFSDM_FilterRegularStop_DMA>
	for (int i = 0; i < 50000 ; i++){
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e007      	b.n	800467a <HAL_GPIO_EXTI_Callback+0x2e>
		arrayOne[i] = (int32_t)0;
 800466a:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_GPIO_EXTI_Callback+0x80>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2100      	movs	r1, #0
 8004670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 50000 ; i++){
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004680:	4293      	cmp	r3, r2
 8004682:	ddf2      	ble.n	800466a <HAL_GPIO_EXTI_Callback+0x1e>
	}
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, &arrayOne, 50000);
 8004684:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004688:	4910      	ldr	r1, [pc, #64]	; (80046cc <HAL_GPIO_EXTI_Callback+0x80>)
 800468a:	480f      	ldr	r0, [pc, #60]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800468c:	f7fc fc70 	bl	8000f70 <HAL_DFSDM_FilterRegularStart_DMA>

	if(HAL_GPIO_ReadPin(GPIOB, LED_Pin) == GPIO_PIN_SET) {
 8004690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004694:	480e      	ldr	r0, [pc, #56]	; (80046d0 <HAL_GPIO_EXTI_Callback+0x84>)
 8004696:	f7fd fc1b 	bl	8001ed0 <HAL_GPIO_ReadPin>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d106      	bne.n	80046ae <HAL_GPIO_EXTI_Callback+0x62>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_RESET);
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046a6:	480a      	ldr	r0, [pc, #40]	; (80046d0 <HAL_GPIO_EXTI_Callback+0x84>)
 80046a8:	f7fd fc2a 	bl	8001f00 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	}
}
 80046ac:	e005      	b.n	80046ba <HAL_GPIO_EXTI_Callback+0x6e>
		HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80046ae:	2201      	movs	r2, #1
 80046b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046b4:	4806      	ldr	r0, [pc, #24]	; (80046d0 <HAL_GPIO_EXTI_Callback+0x84>)
 80046b6:	f7fd fc23 	bl	8001f00 <HAL_GPIO_WritePin>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000050 	.word	0x20000050
 80046c8:	200000c4 	.word	0x200000c4
 80046cc:	2000025c 	.word	0x2000025c
 80046d0:	48000400 	.word	0x48000400

080046d4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b096      	sub	sp, #88	; 0x58
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 50000 ; i++){
 80046dc:	2300      	movs	r3, #0
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	e024      	b.n	800472c <HAL_DFSDM_FilterRegConvCpltCallback+0x58>

		micValue = arrayOne[i];
 80046e2:	4a37      	ldr	r2, [pc, #220]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80046e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	4a36      	ldr	r2, [pc, #216]	; (80047c4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 80046ec:	6013      	str	r3, [r2, #0]

		int32_t temp = arrayOne[i] >> 8;
 80046ee:	4a34      	ldr	r2, [pc, #208]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	121b      	asrs	r3, r3, #8
 80046f8:	60fb      	str	r3, [r7, #12]
//		if(temp < -30000) { temp = -30000; }
//		else if(temp > 30000) { temp = 30000; }
		temp = (temp/256)/*max here is 32768*/ + 32768; // total max is 65536 <= 2^16 for 16 bits.
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da00      	bge.n	8004702 <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
 8004700:	33ff      	adds	r3, #255	; 0xff
 8004702:	121b      	asrs	r3, r3, #8
 8004704:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004708:	60fb      	str	r3, [r7, #12]

		forDac[i] = (uint16_t)((int16_t)(arrayOne[i] >> 8) + 32748);
 800470a:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004712:	121b      	asrs	r3, r3, #8
 8004714:	b29b      	uxth	r3, r3
 8004716:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800471a:	336c      	adds	r3, #108	; 0x6c
 800471c:	b299      	uxth	r1, r3
 800471e:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 50000 ; i++){
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	3301      	adds	r3, #1
 800472a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004732:	4293      	cmp	r3, r2
 8004734:	ddd5      	ble.n	80046e2 <HAL_DFSDM_FilterRegConvCpltCallback+0xe>

		//dacValue = (uint16_t) temp;
	}


	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &forDac, 50000, DAC_ALIGN_12B_R);
 8004736:	2300      	movs	r3, #0
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800473e:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8004740:	2100      	movs	r1, #0
 8004742:	4822      	ldr	r0, [pc, #136]	; (80047cc <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8004744:	f7fb ff26 	bl	8000594 <HAL_DAC_Start_DMA>
	int y = 69;
 8004748:	2345      	movs	r3, #69	; 0x45
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t temp = arrayOne[0] >> 8;
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	121b      	asrs	r3, r3, #8
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t temp1 = arrayOne[1] >> 8;
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	121b      	asrs	r3, r3, #8
 800475a:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t temp2 = arrayOne[2] >> 8;
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	121b      	asrs	r3, r3, #8
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t temp3 = arrayOne[3] >> 8;
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	121b      	asrs	r3, r3, #8
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t temp4 = arrayOne[4] >> 8;
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	121b      	asrs	r3, r3, #8
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t temp5 = arrayOne[5] >> 8;
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	121b      	asrs	r3, r3, #8
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t temp6 = arrayOne[0];
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t temp7 = arrayOne[1];
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t temp8 = arrayOne[2];
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t temp9 = arrayOne[3];
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	623b      	str	r3, [r7, #32]
	int32_t temp10 = arrayOne[4];
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	61fb      	str	r3, [r7, #28]

	uint16_t temp11 = forDac[0];
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	837b      	strh	r3, [r7, #26]
	uint16_t temp12 = forDac[1];
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 80047a2:	885b      	ldrh	r3, [r3, #2]
 80047a4:	833b      	strh	r3, [r7, #24]
	uint16_t temp13 = forDac[2];
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 80047a8:	889b      	ldrh	r3, [r3, #4]
 80047aa:	82fb      	strh	r3, [r7, #22]
	uint16_t temp14 = forDac[3];
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 80047ae:	88db      	ldrh	r3, [r3, #6]
 80047b0:	82bb      	strh	r3, [r7, #20]
	uint16_t temp15 = forDac[4];
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 80047b4:	891b      	ldrh	r3, [r3, #8]
 80047b6:	827b      	strh	r3, [r7, #18]
}
 80047b8:	bf00      	nop
 80047ba:	3750      	adds	r7, #80	; 0x50
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	2000025c 	.word	0x2000025c
 80047c4:	2004963c 	.word	0x2004963c
 80047c8:	20030f9c 	.word	0x20030f9c
 80047cc:	20000050 	.word	0x20000050

080047d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d4:	b672      	cpsid	i
}
 80047d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <Error_Handler+0x8>
	...

080047dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e2:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <HAL_MspInit+0x44>)
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_MspInit+0x44>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6613      	str	r3, [r2, #96]	; 0x60
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <HAL_MspInit+0x44>)
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_MspInit+0x44>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_MspInit+0x44>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	; 0x58
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_MspInit+0x44>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <HAL_DAC_MspInit+0xcc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d14f      	bne.n	80048e6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004846:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 800484c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004850:	6593      	str	r3, [r2, #88]	; 0x58
 8004852:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	4a24      	ldr	r2, [pc, #144]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <HAL_DAC_MspInit+0xd0>)
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004876:	2310      	movs	r3, #16
 8004878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800487a:	2303      	movs	r3, #3
 800487c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004882:	f107 0314 	add.w	r3, r7, #20
 8004886:	4619      	mov	r1, r3
 8004888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800488c:	f7fd f98e 	bl	8001bac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <HAL_DAC_MspInit+0xd8>)
 8004894:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8004896:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 8004898:	2206      	movs	r2, #6
 800489a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 800489e:	2210      	movs	r2, #16
 80048a0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048aa:	2280      	movs	r2, #128	; 0x80
 80048ac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048b4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048bc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048c0:	2220      	movs	r2, #32
 80048c2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80048ca:	480b      	ldr	r0, [pc, #44]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048cc:	f7fc fea0 	bl	8001610 <HAL_DMA_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80048d6:	f7ff ff7b 	bl	80047d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_DAC_MspInit+0xd4>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80048e6:	bf00      	nop
 80048e8:	3728      	adds	r7, #40	; 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40007400 	.word	0x40007400
 80048f4:	40021000 	.word	0x40021000
 80048f8:	20000064 	.word	0x20000064
 80048fc:	40020030 	.word	0x40020030

08004900 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0ae      	sub	sp, #184	; 0xb8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	2294      	movs	r2, #148	; 0x94
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fa27 	bl	8004d74 <memset>
  if(DFSDM1_Init == 0)
 8004926:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <HAL_DFSDM_FilterMspInit+0x14c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d153      	bne.n	80049d6 <HAL_DFSDM_FilterMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800492e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004932:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fa7e 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800494a:	f7ff ff41 	bl	80047d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <HAL_DFSDM_FilterMspInit+0x150>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <HAL_DFSDM_FilterMspInit+0x150>)
 8004956:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004958:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_DFSDM_FilterMspInit+0x150>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10b      	bne.n	8004978 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004960:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 8004966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496a:	6613      	str	r3, [r2, #96]	; 0x60
 800496c:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	4a35      	ldr	r2, [pc, #212]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 800497e:	f043 0310 	orr.w	r3, r3, #16
 8004982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_DFSDM_FilterMspInit+0x154>)
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8004990:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80049aa:	2306      	movs	r3, #6
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4828      	ldr	r0, [pc, #160]	; (8004a58 <HAL_DFSDM_FilterMspInit+0x158>)
 80049b8:	f7fd f8f8 	bl	8001bac <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80049bc:	2200      	movs	r2, #0
 80049be:	2100      	movs	r1, #0
 80049c0:	203d      	movs	r0, #61	; 0x3d
 80049c2:	f7fb fd8e 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80049c6:	203d      	movs	r0, #61	; 0x3d
 80049c8:	f7fb fda7 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80049cc:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <HAL_DFSDM_FilterMspInit+0x14c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <HAL_DFSDM_FilterMspInit+0x14c>)
 80049d4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <HAL_DFSDM_FilterMspInit+0x15c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d130      	bne.n	8004a42 <HAL_DFSDM_FilterMspInit+0x142>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 80049e0:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 80049e2:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <HAL_DFSDM_FilterMspInit+0x164>)
 80049e4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80049e6:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 80049e8:	2256      	movs	r2, #86	; 0x56
 80049ea:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80049f8:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049fe:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8004a1a:	4811      	ldr	r0, [pc, #68]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a1c:	f7fc fdf8 	bl	8001610 <HAL_DMA_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_DFSDM_FilterMspInit+0x12a>
    {
      Error_Handler();
 8004a26:	f7ff fed3 	bl	80047d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <HAL_DFSDM_FilterMspInit+0x160>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8004a42:	bf00      	nop
 8004a44:	37b8      	adds	r7, #184	; 0xb8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20049644 	.word	0x20049644
 8004a50:	20049640 	.word	0x20049640
 8004a54:	40021000 	.word	0x40021000
 8004a58:	48001000 	.word	0x48001000
 8004a5c:	40016100 	.word	0x40016100
 8004a60:	20000150 	.word	0x20000150
 8004a64:	40020008 	.word	0x40020008

08004a68 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0ae      	sub	sp, #184	; 0xb8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a80:	f107 0310 	add.w	r3, r7, #16
 8004a84:	2294      	movs	r2, #148	; 0x94
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f973 	bl	8004d74 <memset>
  if(DFSDM1_Init == 0)
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d14b      	bne.n	8004b2e <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8004a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aa2:	f107 0310 	add.w	r3, r7, #16
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe f9ca 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8004ab2:	f7ff fe8d 	bl	80047d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004abe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004ae6:	f043 0310 	orr.w	r3, r3, #16
 8004aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8004af8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004b12:	2306      	movs	r3, #6
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4809      	ldr	r0, [pc, #36]	; (8004b44 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8004b20:	f7fd f844 	bl	8001bac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	4a03      	ldr	r2, [pc, #12]	; (8004b38 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004b2c:	6013      	str	r3, [r2, #0]
  }

}
 8004b2e:	bf00      	nop
 8004b30:	37b8      	adds	r7, #184	; 0xb8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20049644 	.word	0x20049644
 8004b3c:	20049640 	.word	0x20049640
 8004b40:	40021000 	.word	0x40021000
 8004b44:	48001000 	.word	0x48001000

08004b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d13e      	bne.n	8004bd8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_TIM_Base_MspInit+0x98>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <HAL_TIM_Base_MspInit+0x98>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6593      	str	r3, [r2, #88]	; 0x58
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_TIM_Base_MspInit+0x98>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_Base_MspInit+0xa0>)
 8004b76:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b7a:	223c      	movs	r2, #60	; 0x3c
 8004b7c:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b7e:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8004b8a:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b9e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8004bac:	480d      	ldr	r0, [pc, #52]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004bae:	f7fc fd2f 	bl	8001610 <HAL_DMA_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8004bb8:	f7ff fe0a 	bl	80047d0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004bc0:	621a      	str	r2, [r3, #32]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <HAL_TIM_Base_MspInit+0x9c>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	201c      	movs	r0, #28
 8004bce:	f7fb fc88 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bd2:	201c      	movs	r0, #28
 8004bd4:	f7fb fca1 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	200001fc 	.word	0x200001fc
 8004be8:	4002001c 	.word	0x4002001c

08004bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bf0:	e7fe      	b.n	8004bf0 <NMI_Handler+0x4>

08004bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bf6:	e7fe      	b.n	8004bf6 <HardFault_Handler+0x4>

08004bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bfc:	e7fe      	b.n	8004bfc <MemManage_Handler+0x4>

08004bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c02:	e7fe      	b.n	8004c02 <BusFault_Handler+0x4>

08004c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c08:	e7fe      	b.n	8004c08 <UsageFault_Handler+0x4>

08004c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c38:	f7fb fb34 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <DMA1_Channel1_IRQHandler+0x10>)
 8004c46:	f7fc fe62 	bl	800190e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000150 	.word	0x20000150

08004c54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8004c58:	4802      	ldr	r0, [pc, #8]	; (8004c64 <DMA1_Channel2_IRQHandler+0x10>)
 8004c5a:	f7fc fe58 	bl	800190e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200001fc 	.word	0x200001fc

08004c68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004c6c:	4802      	ldr	r0, [pc, #8]	; (8004c78 <DMA1_Channel3_IRQHandler+0x10>)
 8004c6e:	f7fc fe4e 	bl	800190e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000064 	.word	0x20000064

08004c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <TIM2_IRQHandler+0x10>)
 8004c82:	f7fe feb5 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200001b0 	.word	0x200001b0

08004c90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_Pin);
 8004c94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004c98:	f7fd f94a 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8004ca4:	4802      	ldr	r0, [pc, #8]	; (8004cb0 <DFSDM1_FLT0_IRQHandler+0x10>)
 8004ca6:	f7fc fa05 	bl	80010b4 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	200000c4 	.word	0x200000c4

08004cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <SystemInit+0x20>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <SystemInit+0x20>)
 8004cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	e000ed00 	.word	0xe000ed00

08004cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004cdc:	f7ff ffea 	bl	8004cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ce0:	480c      	ldr	r0, [pc, #48]	; (8004d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ce2:	490d      	ldr	r1, [pc, #52]	; (8004d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <LoopForever+0xe>)
  movs r3, #0
 8004ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ce8:	e002      	b.n	8004cf0 <LoopCopyDataInit>

08004cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cee:	3304      	adds	r3, #4

08004cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cf4:	d3f9      	bcc.n	8004cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cf8:	4c0a      	ldr	r4, [pc, #40]	; (8004d24 <LoopForever+0x16>)
  movs r3, #0
 8004cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cfc:	e001      	b.n	8004d02 <LoopFillZerobss>

08004cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d00:	3204      	adds	r2, #4

08004d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d04:	d3fb      	bcc.n	8004cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d06:	f000 f811 	bl	8004d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d0a:	f7ff fa65 	bl	80041d8 <main>

08004d0e <LoopForever>:

LoopForever:
    b LoopForever
 8004d0e:	e7fe      	b.n	8004d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004d10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004d1c:	08004de4 	.word	0x08004de4
  ldr r2, =_sbss
 8004d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004d24:	20049648 	.word	0x20049648

08004d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d28:	e7fe      	b.n	8004d28 <ADC1_IRQHandler>
	...

08004d2c <__libc_init_array>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4d0d      	ldr	r5, [pc, #52]	; (8004d64 <__libc_init_array+0x38>)
 8004d30:	4c0d      	ldr	r4, [pc, #52]	; (8004d68 <__libc_init_array+0x3c>)
 8004d32:	1b64      	subs	r4, r4, r5
 8004d34:	10a4      	asrs	r4, r4, #2
 8004d36:	2600      	movs	r6, #0
 8004d38:	42a6      	cmp	r6, r4
 8004d3a:	d109      	bne.n	8004d50 <__libc_init_array+0x24>
 8004d3c:	4d0b      	ldr	r5, [pc, #44]	; (8004d6c <__libc_init_array+0x40>)
 8004d3e:	4c0c      	ldr	r4, [pc, #48]	; (8004d70 <__libc_init_array+0x44>)
 8004d40:	f000 f820 	bl	8004d84 <_init>
 8004d44:	1b64      	subs	r4, r4, r5
 8004d46:	10a4      	asrs	r4, r4, #2
 8004d48:	2600      	movs	r6, #0
 8004d4a:	42a6      	cmp	r6, r4
 8004d4c:	d105      	bne.n	8004d5a <__libc_init_array+0x2e>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d54:	4798      	blx	r3
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7ee      	b.n	8004d38 <__libc_init_array+0xc>
 8004d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5e:	4798      	blx	r3
 8004d60:	3601      	adds	r6, #1
 8004d62:	e7f2      	b.n	8004d4a <__libc_init_array+0x1e>
 8004d64:	08004ddc 	.word	0x08004ddc
 8004d68:	08004ddc 	.word	0x08004ddc
 8004d6c:	08004ddc 	.word	0x08004ddc
 8004d70:	08004de0 	.word	0x08004de0

08004d74 <memset>:
 8004d74:	4402      	add	r2, r0
 8004d76:	4603      	mov	r3, r0
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
